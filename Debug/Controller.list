
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800cee8  0800cee8  0001cee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d384  0800d384  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d38c  0800d38c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d38c  0800d38c  0001d38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d390  0800d390  0001d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6ec  200001fc  0800d590  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  2000a8e8  0800d590  0002a8e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021291  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f59  00000000  00000000  00041500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d20  00000000  00000000  00046460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001663  00000000  00000000  00048180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8fb  00000000  00000000  000497e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002835f  00000000  00000000  000770de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106792  00000000  00000000  0009f43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088e0  00000000  00000000  001a5bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001ae4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cecc 	.word	0x0800cecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800cecc 	.word	0x0800cecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200d      	movs	r0, #13
 8000f68:	f001 ff13 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f6c:	200d      	movs	r0, #13
 8000f6e:	f001 ff2c 	bl	8002dca <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <eeprom_wait>:
static I2C_HandleTypeDef eeprom_I2C;
static uint32_t last_write;
static bool is_set = false;


static void eeprom_wait() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	while (HAL_GetTick() - last_write <= WRITE_TIMEOUT) {
 8000f84:	bf00      	nop
 8000f86:	f001 fdf9 	bl	8002b7c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <eeprom_wait+0x1c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d9f7      	bls.n	8000f86 <eeprom_wait+0x6>

	}
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000026c 	.word	0x2000026c

08000fa0 <eeprom_init>:


void eeprom_init(I2C_HandleTypeDef* eeprom_i2c) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	eeprom_I2C = *eeprom_i2c;
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <eeprom_init+0x28>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2354      	movs	r3, #84	; 0x54
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f00a f94b 	bl	800b24e <memcpy>
	is_set = true;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <eeprom_init+0x2c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000218 	.word	0x20000218
 8000fcc:	20000270 	.word	0x20000270

08000fd0 <eeprom_read>:

	return res;
}


HAL_StatusTypeDef eeprom_read(uint32_t address, uint8_t* data, uint32_t size) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	if (!is_set) return HAL_ERROR;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <eeprom_read+0x4c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <eeprom_read+0x1e>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e011      	b.n	8001012 <eeprom_read+0x42>

	eeprom_wait();
 8000fee:	f7ff ffc7 	bl	8000f80 <eeprom_wait>

	// fix to use DMA
//	return HAL_I2C_Mem_Read_DMA(&eeprom_I2C, EEPROM_ADDRESS, address, 1, data, size);

	return HAL_I2C_Mem_Read(&eeprom_I2C, EEPROM_ADDRESS, address, 1, data, size, 300);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ffe:	9102      	str	r1, [sp, #8]
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	21a0      	movs	r1, #160	; 0xa0
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <eeprom_read+0x50>)
 800100c:	f002 fb66 	bl	80036dc <HAL_I2C_Mem_Read>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000270 	.word	0x20000270
 8001020:	20000218 	.word	0x20000218

08001024 <deserialize_FCC>:
static void serialize_FCC(FCC* data, uint8_t* buffer) {
	memcpy(buffer, data, sizeof(FCC));
}


static void deserialize_FCC(FCC* data, uint8_t* buffer) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	memcpy(data, buffer, sizeof(FCC));
 800102e:	2210      	movs	r2, #16
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f00a f90b 	bl	800b24e <memcpy>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <read_fc_configuration>:


// read the furnace controller configuration
HAL_StatusTypeDef read_fc_configuration(FCC* fcc) {
 8001040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	466b      	mov	r3, sp
 800104c:	461e      	mov	r6, r3
	uint8_t n = sizeof(FCC) / sizeof(uint8_t);
 800104e:	2310      	movs	r3, #16
 8001050:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[n];
 8001052:	7df9      	ldrb	r1, [r7, #23]
 8001054:	460b      	mov	r3, r1
 8001056:	3b01      	subs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	b2cb      	uxtb	r3, r1
 800105c:	2200      	movs	r2, #0
 800105e:	4698      	mov	r8, r3
 8001060:	4691      	mov	r9, r2
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001076:	b2cb      	uxtb	r3, r1
 8001078:	2200      	movs	r2, #0
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	00eb      	lsls	r3, r5, #3
 8001088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800108c:	00e2      	lsls	r2, r4, #3
 800108e:	460b      	mov	r3, r1
 8001090:	3307      	adds	r3, #7
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	ebad 0d03 	sub.w	sp, sp, r3
 800109a:	466b      	mov	r3, sp
 800109c:	3300      	adds	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

	if (eeprom_read(0, buffer, sizeof(buffer)) != HAL_OK)
 80010a0:	460b      	mov	r3, r1
 80010a2:	461a      	mov	r2, r3
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff92 	bl	8000fd0 <eeprom_read>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <read_fc_configuration+0x76>
		return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e004      	b.n	80010c0 <read_fc_configuration+0x80>

	deserialize_FCC(fcc, buffer);
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffb3 	bl	8001024 <deserialize_FCC>

	return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	46b5      	mov	sp, r6
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_GPIO_Init+0xf8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f002 fa12 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2108      	movs	r1, #8
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_GPIO_Init+0xfc>)
 8001156:	f002 fa0d 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <MX_GPIO_Init+0xfc>)
 8001160:	f002 fa08 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Select_Pin;
 8001164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Select_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_GPIO_Init+0x100>)
 800117a:	f002 f839 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f002 f829 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 800119e:	2328      	movs	r3, #40	; 0x28
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_GPIO_Init+0xfc>)
 80011b6:	f002 f81b 	bl	80031f0 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800

080011d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_I2C1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_I2C1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_I2C1_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MX_I2C1_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_I2C1_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <MX_I2C1_Init+0x74>)
 800120c:	f002 f9ca 	bl	80035a4 <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fbe5 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_I2C1_Init+0x74>)
 800121e:	f002 fddb 	bl	8003dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 fbdc 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_I2C1_Init+0x74>)
 8001230:	f002 fe1d 	bl	8003e6e <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fbd3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000274 	.word	0x20000274
 8001248:	40005400 	.word	0x40005400
 800124c:	00702991 	.word	0x00702991

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	; 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2288      	movs	r2, #136	; 0x88
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f009 ff6d 	bl	800b150 <memset>
  if(i2cHandle->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_I2C_MspInit+0xb0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d13a      	bne.n	80012f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001284:	2300      	movs	r3, #0
 8001286:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fc9f 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f000 fba4 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d6:	4619      	mov	r1, r3
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_I2C_MspInit+0xb8>)
 80012da:	f001 ff89 	bl	80031f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_I2C_MspInit+0xb4>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	37b0      	adds	r7, #176	; 0xb0
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400

0800130c <lcd_cmd>:
	CMD(ST7735S_COLMOD), 0x05,
	CMD(ST7735S_MADCTL), 0xa0,
};


static HAL_StatusTypeDef lcd_cmd(uint8_t cmd) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_RESET);
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <lcd_cmd+0x5c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <lcd_cmd+0x5c>)
 800131c:	8891      	ldrh	r1, [r2, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f927 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <lcd_cmd+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <lcd_cmd+0x60>)
 800132c:	8891      	ldrh	r1, [r2, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f91f 	bl	8003574 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&LCD_SPI, &cmd, 1, LCD_MAX_TIMEOUT) != HAL_OK)
 8001336:	1df9      	adds	r1, r7, #7
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	2201      	movs	r2, #1
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <lcd_cmd+0x64>)
 800133e:	f006 fa14 	bl	800776a <HAL_SPI_Transmit>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <lcd_cmd+0x40>
		return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e008      	b.n	800135e <lcd_cmd+0x52>

	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <lcd_cmd+0x60>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <lcd_cmd+0x60>)
 8001352:	8891      	ldrh	r1, [r2, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f002 f90c 	bl	8003574 <HAL_GPIO_WritePin>
	return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000334 	.word	0x20000334
 800136c:	2000032c 	.word	0x2000032c
 8001370:	200002c8 	.word	0x200002c8

08001374 <lcd_data>:

static HAL_StatusTypeDef lcd_data(uint8_t data) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_SET);
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <lcd_data+0x5c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <lcd_data+0x5c>)
 8001384:	8891      	ldrh	r1, [r2, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f002 f8f3 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <lcd_data+0x60>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <lcd_data+0x60>)
 8001394:	8891      	ldrh	r1, [r2, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f8eb 	bl	8003574 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&LCD_SPI, &data, 1, LCD_MAX_TIMEOUT) != HAL_OK)
 800139e:	1df9      	adds	r1, r7, #7
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	2201      	movs	r2, #1
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <lcd_data+0x64>)
 80013a6:	f006 f9e0 	bl	800776a <HAL_SPI_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <lcd_data+0x40>
		return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e008      	b.n	80013c6 <lcd_data+0x52>

	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <lcd_data+0x60>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <lcd_data+0x60>)
 80013ba:	8891      	ldrh	r1, [r2, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f8d8 	bl	8003574 <HAL_GPIO_WritePin>
	return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000334 	.word	0x20000334
 80013d4:	2000032c 	.word	0x2000032c
 80013d8:	200002c8 	.word	0x200002c8

080013dc <lcd_data16>:

static void lcd_data16(uint16_t value) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ffc0 	bl	8001374 <lcd_data>
	lcd_data(value);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffbb 	bl	8001374 <lcd_data>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <lcd_send>:

static HAL_StatusTypeDef lcd_send(uint16_t value) {
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <lcd_send+0x28>
		if (lcd_cmd(value) != HAL_OK)
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff74 	bl	800130c <lcd_cmd>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <lcd_send+0x3c>
			return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00a      	b.n	8001444 <lcd_send+0x3e>
	}
	else {
		if (lcd_data(value) != HAL_OK)
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff9e 	bl	8001374 <lcd_data>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <lcd_send+0x3c>
			return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <lcd_send+0x3e>
	}

	return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lcd_init>:


HAL_StatusTypeDef lcd_init(SPI_HandleTypeDef* lcd_spi, LCD_GPIO* lcd_cs, LCD_GPIO* lcd_dc, LCD_GPIO* lcd_rst) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	LCD_SPI = *lcd_spi;
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <lcd_init+0xd4>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	2364      	movs	r3, #100	; 0x64
 8001464:	461a      	mov	r2, r3
 8001466:	f009 fef2 	bl	800b24e <memcpy>
	LCD_CS = *lcd_cs;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <lcd_init+0xd8>)
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001472:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_DC = *lcd_dc;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <lcd_init+0xdc>)
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_RST = *lcd_rst;
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <lcd_init+0xe0>)
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148a:	e883 0003 	stmia.w	r3, {r0, r1}
	// TODO brightness control GPIO
	is_set = true;
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <lcd_init+0xe4>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LCD_RST.Port, LCD_RST.Pin, GPIO_PIN_RESET);
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <lcd_init+0xe0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a24      	ldr	r2, [pc, #144]	; (800152c <lcd_init+0xe0>)
 800149a:	8891      	ldrh	r1, [r2, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 f868 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_Delay(100); // TODO time could be lower
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f001 fb75 	bl	8002b94 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST.Port, LCD_RST.Pin, GPIO_PIN_SET);
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <lcd_init+0xe0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <lcd_init+0xe0>)
 80014b0:	8891      	ldrh	r1, [r2, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f85d 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014ba:	2064      	movs	r0, #100	; 0x64
 80014bc:	f001 fb6a 	bl	8002b94 <HAL_Delay>

	for (uint8_t i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
 80014c4:	e00e      	b.n	80014e4 <lcd_init+0x98>
		if (lcd_send(init_table[i]) != HAL_OK)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <lcd_init+0xe8>)
 80014ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff99 	bl	8001406 <lcd_send>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <lcd_init+0x92>
			return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e01c      	b.n	8001518 <lcd_init+0xcc>
	for (uint8_t i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	3301      	adds	r3, #1
 80014e2:	75fb      	strb	r3, [r7, #23]
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b4b      	cmp	r3, #75	; 0x4b
 80014e8:	d9ed      	bls.n	80014c6 <lcd_init+0x7a>
	}

	HAL_Delay(200);
 80014ea:	20c8      	movs	r0, #200	; 0xc8
 80014ec:	f001 fb52 	bl	8002b94 <HAL_Delay>
	if (lcd_cmd(ST7735S_SLPOUT) != HAL_OK)
 80014f0:	2011      	movs	r0, #17
 80014f2:	f7ff ff0b 	bl	800130c <lcd_cmd>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <lcd_init+0xb4>
		return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e00b      	b.n	8001518 <lcd_init+0xcc>
	HAL_Delay(120);
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f001 fb47 	bl	8002b94 <HAL_Delay>

	if (lcd_cmd(ST7735S_DISPON) != HAL_OK)
 8001506:	2029      	movs	r0, #41	; 0x29
 8001508:	f7ff ff00 	bl	800130c <lcd_cmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <lcd_init+0xca>
		return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <lcd_init+0xcc>

	return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002c8 	.word	0x200002c8
 8001524:	2000032c 	.word	0x2000032c
 8001528:	20000334 	.word	0x20000334
 800152c:	2000033c 	.word	0x2000033c
 8001530:	20000344 	.word	0x20000344
 8001534:	0800cf1c 	.word	0x0800cf1c

08001538 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 8001546:	202a      	movs	r0, #42	; 0x2a
 8001548:	f7ff fee0 	bl	800130c <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	b29b      	uxth	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff41 	bl	80013dc <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff38 	bl	80013dc <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 800156c:	202b      	movs	r0, #43	; 0x2b
 800156e:	f7ff fecd 	bl	800130c <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	b29b      	uxth	r3, r3
 8001576:	3302      	adds	r3, #2
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff2e 	bl	80013dc <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	b29a      	uxth	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff23 	bl	80013dc <lcd_data16>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80fb      	strh	r3, [r7, #6]
	buffer[x + y * LCD_WIDTH] = __REV16(color);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	ba5b      	rev16	r3, r3
 80015b6:	613b      	str	r3, [r7, #16]
  return result;
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	015b      	lsls	r3, r3, #5
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	b289      	uxth	r1, r1
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <lcd_put_pixel+0x40>)
 80015ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000348 	.word	0x20000348

080015e4 <lcd_show>:

void lcd_show(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	22a0      	movs	r2, #160	; 0xa0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff ffa2 	bl	8001538 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80015f4:	202c      	movs	r0, #44	; 0x2c
 80015f6:	f7ff fe89 	bl	800130c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_SET);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <lcd_show+0x48>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <lcd_show+0x48>)
 8001600:	8891      	ldrh	r1, [r2, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f001 ffb5 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <lcd_show+0x4c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <lcd_show+0x4c>)
 8001610:	8891      	ldrh	r1, [r2, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f001 ffad 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&LCD_SPI, (uint8_t*)buffer, sizeof(buffer));
 800161a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800161e:	4905      	ldr	r1, [pc, #20]	; (8001634 <lcd_show+0x50>)
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <lcd_show+0x54>)
 8001622:	f006 fa17 	bl	8007a54 <HAL_SPI_Transmit_DMA>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000334 	.word	0x20000334
 8001630:	2000032c 	.word	0x2000032c
 8001634:	20000348 	.word	0x20000348
 8001638:	200002c8 	.word	0x200002c8

0800163c <lcd_transfer_done>:

void lcd_transfer_done(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <lcd_transfer_done+0x18>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <lcd_transfer_done+0x18>)
 8001646:	8891      	ldrh	r1, [r2, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	4618      	mov	r0, r3
 800164c:	f001 ff92 	bl	8003574 <HAL_GPIO_WritePin>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000032c 	.word	0x2000032c

08001658 <lcd_full_box>:
		return LCD_BUSY;
	else
		return LCD_OK;
}

void lcd_full_box(int x, int y, int width, int height, uint16_t color) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
	for (uint8_t i = x; i < width + x; i++) {
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	75fb      	strb	r3, [r7, #23]
 800166a:	e014      	b.n	8001696 <lcd_full_box+0x3e>
		for (uint8_t j = y; j < height + y; j++) {
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	75bb      	strb	r3, [r7, #22]
 8001670:	e008      	b.n	8001684 <lcd_full_box+0x2c>
			lcd_put_pixel(i, j, color);
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	7db9      	ldrb	r1, [r7, #22]
 8001676:	8c3a      	ldrh	r2, [r7, #32]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff91 	bl	80015a0 <lcd_put_pixel>
		for (uint8_t j = y; j < height + y; j++) {
 800167e:	7dbb      	ldrb	r3, [r7, #22]
 8001680:	3301      	adds	r3, #1
 8001682:	75bb      	strb	r3, [r7, #22]
 8001684:	7dba      	ldrb	r2, [r7, #22]
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	440b      	add	r3, r1
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <lcd_full_box+0x1a>
	for (uint8_t i = x; i < width + x; i++) {
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	3301      	adds	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
 8001696:	7dfa      	ldrb	r2, [r7, #23]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	440b      	add	r3, r1
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbe4      	blt.n	800166c <lcd_full_box+0x14>
		}
	}

//	lcd_show();
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <lcd_empty_box>:

void lcd_empty_box(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint16_t color) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	4603      	mov	r3, r0
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	717b      	strb	r3, [r7, #5]
 80016c6:	4613      	mov	r3, r2
 80016c8:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = x; i < width + x; i++) {
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e010      	b.n	80016f2 <lcd_empty_box+0x46>
		lcd_put_pixel(i, y, color);
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	79b9      	ldrb	r1, [r7, #6]
 80016d4:	8c3a      	ldrh	r2, [r7, #32]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff62 	bl	80015a0 <lcd_put_pixel>
		lcd_put_pixel(i, y + height, color);
 80016dc:	7bf8      	ldrb	r0, [r7, #15]
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	793b      	ldrb	r3, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	8c3a      	ldrh	r2, [r7, #32]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff ff5a 	bl	80015a0 <lcd_put_pixel>
	for (uint8_t i = x; i < width + x; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	440b      	add	r3, r1
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbe8      	blt.n	80016d0 <lcd_empty_box+0x24>
	}

	for (uint8_t i = y; i < height + y; i++) {
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	73bb      	strb	r3, [r7, #14]
 8001702:	e010      	b.n	8001726 <lcd_empty_box+0x7a>
		lcd_put_pixel(x, i, color);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	7bb9      	ldrb	r1, [r7, #14]
 8001708:	8c3a      	ldrh	r2, [r7, #32]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff48 	bl	80015a0 <lcd_put_pixel>
		lcd_put_pixel(x + width, i, color);
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	4413      	add	r3, r2
 8001716:	7bb9      	ldrb	r1, [r7, #14]
 8001718:	8c3a      	ldrh	r2, [r7, #32]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff40 	bl	80015a0 <lcd_put_pixel>
	for (uint8_t i = y; i < height + y; i++) {
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	3301      	adds	r3, #1
 8001724:	73bb      	strb	r3, [r7, #14]
 8001726:	7bba      	ldrb	r2, [r7, #14]
 8001728:	7939      	ldrb	r1, [r7, #4]
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	440b      	add	r3, r1
 800172e:	429a      	cmp	r2, r3
 8001730:	dbe8      	blt.n	8001704 <lcd_empty_box+0x58>
	}

//	lcd_show();
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}

0800173c <lcd_draw_backgroud>:
//	for (uint8_t i = min_x; i < max_x; i++) {
//
//	}
}

void lcd_draw_backgroud() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
	lcd_full_box(0, 0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 8001742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	22a0      	movs	r2, #160	; 0xa0
 800174c:	2100      	movs	r1, #0
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff ff82 	bl	8001658 <lcd_full_box>

	// drawing fire place
	lcd_empty_box(20, 70, 30, 40, BLACK);
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2328      	movs	r3, #40	; 0x28
 800175a:	221e      	movs	r2, #30
 800175c:	2146      	movs	r1, #70	; 0x46
 800175e:	2014      	movs	r0, #20
 8001760:	f7ff ffa4 	bl	80016ac <lcd_empty_box>
	lcd_empty_box(50, 97, 80, 0, BLACK);
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	2250      	movs	r2, #80	; 0x50
 800176c:	2161      	movs	r1, #97	; 0x61
 800176e:	2032      	movs	r0, #50	; 0x32
 8001770:	f7ff ff9c 	bl	80016ac <lcd_empty_box>
	lcd_empty_box(50, 105, 80, 0, BLACK);
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2250      	movs	r2, #80	; 0x50
 800177c:	2169      	movs	r1, #105	; 0x69
 800177e:	2032      	movs	r0, #50	; 0x32
 8001780:	f7ff ff94 	bl	80016ac <lcd_empty_box>
	lcd_empty_box(130, 97, 0, 9, BLACK);
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2309      	movs	r3, #9
 800178a:	2200      	movs	r2, #0
 800178c:	2161      	movs	r1, #97	; 0x61
 800178e:	2082      	movs	r0, #130	; 0x82
 8001790:	f7ff ff8c 	bl	80016ac <lcd_empty_box>

	// drawing water tank
	lcd_empty_box(110, 70, 30, 40, BLACK);
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2328      	movs	r3, #40	; 0x28
 800179a:	221e      	movs	r2, #30
 800179c:	2146      	movs	r1, #70	; 0x46
 800179e:	206e      	movs	r0, #110	; 0x6e
 80017a0:	f7ff ff84 	bl	80016ac <lcd_empty_box>


	// flush the result
	lcd_show();
 80017a4:	f7ff ff1e 	bl	80015e4 <lcd_show>
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	d102      	bne.n	80017c4 <__io_putchar+0x14>
    __io_putchar('\r');
 80017be:	200d      	movs	r0, #13
 80017c0:	f7ff fff6 	bl	80017b0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80017c4:	1d39      	adds	r1, r7, #4
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	2201      	movs	r2, #1
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <__io_putchar+0x2c>)
 80017ce:	f007 f90f 	bl	80089f0 <HAL_UART_Transmit>

  return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000a674 	.word	0x2000a674

080017e0 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_SPI_TxCpltCallback+0x1c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 80017f0:	f7ff ff24 	bl	800163c <lcd_transfer_done>
	}
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000a4e0 	.word	0x2000a4e0

08001800 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if (htim == &htim7) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d105      	bne.n	800181c <HAL_TIM_PeriodElapsedCallback+0x1c>
    get_all_temperature(temperature_array, fcc.temperature_offset);
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001818:	f000 fb2a 	bl	8001e70 <get_all_temperature>
  }
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000a5dc 	.word	0x2000a5dc
 8001828:	2000a348 	.word	0x2000a348
 800182c:	2000a358 	.word	0x2000a358

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001836:	f001 f938 	bl	8002aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183a:	f000 f87f 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183e:	f7ff fc45 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001842:	f7ff fb7f 	bl	8000f44 <MX_DMA_Init>
  MX_I2C1_Init();
 8001846:	f7ff fcc3 	bl	80011d0 <MX_I2C1_Init>
  MX_TIM6_Init();
 800184a:	f000 feb9 	bl	80025c0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800184e:	f000 fffd 	bl	800284c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001852:	f001 f82b 	bl	80028ac <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001856:	f000 fee9 	bl	800262c <MX_TIM7_Init>
  MX_SDMMC1_SD_Init();
 800185a:	f000 fc15 	bl	8002088 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800185e:	f008 fc1d 	bl	800a09c <MX_FATFS_Init>
  MX_RTC_Init();
 8001862:	f000 fb45 	bl	8001ef0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001866:	f000 fcc3 	bl	80021f0 <MX_SPI1_Init>
  MX_TIM8_Init();
 800186a:	f000 ff17 	bl	800269c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800186e:	4825      	ldr	r0, [pc, #148]	; (8001904 <main+0xd4>)
 8001870:	f006 fc32 	bl	80080d8 <HAL_TIM_Base_Start>
  OW_init(&huart3, &htim6);
 8001874:	4923      	ldr	r1, [pc, #140]	; (8001904 <main+0xd4>)
 8001876:	4824      	ldr	r0, [pc, #144]	; (8001908 <main+0xd8>)
 8001878:	f000 fa60 	bl	8001d3c <OW_init>
  eeprom_init(&hi2c1);
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <main+0xdc>)
 800187e:	f7ff fb8f 	bl	8000fa0 <eeprom_init>

  read_fc_configuration(&fcc);
 8001882:	4823      	ldr	r0, [pc, #140]	; (8001910 <main+0xe0>)
 8001884:	f7ff fbdc 	bl	8001040 <read_fc_configuration>

  if (set_rtc_datatime() != HAL_OK)
 8001888:	f000 fbc0 	bl	800200c <set_rtc_datatime>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <main+0x68>
	  printf("RTC Error\n");
 8001892:	4820      	ldr	r0, [pc, #128]	; (8001914 <main+0xe4>)
 8001894:	f009 fb7c 	bl	800af90 <puts>

  if (lcd_init(&hspi1, &lcd_cs, &lcd_dc, &lcd_rst) == HAL_OK) {
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <main+0xe8>)
 800189a:	4a20      	ldr	r2, [pc, #128]	; (800191c <main+0xec>)
 800189c:	4920      	ldr	r1, [pc, #128]	; (8001920 <main+0xf0>)
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <main+0xf4>)
 80018a0:	f7ff fdd4 	bl	800144c <lcd_init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <main+0x86>
	  printf("LCD OK\n");
 80018aa:	481f      	ldr	r0, [pc, #124]	; (8001928 <main+0xf8>)
 80018ac:	f009 fb70 	bl	800af90 <puts>
	  lcd_draw_backgroud();
 80018b0:	f7ff ff44 	bl	800173c <lcd_draw_backgroud>
 80018b4:	e002      	b.n	80018bc <main+0x8c>
  }
  else
	  printf("LCD ERROR\n");
 80018b6:	481d      	ldr	r0, [pc, #116]	; (800192c <main+0xfc>)
 80018b8:	f009 fb6a 	bl	800af90 <puts>

  get_all_temperature(temperature_array, fcc.temperature_offset);
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0xe0>)
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	4619      	mov	r1, r3
 80018c2:	481b      	ldr	r0, [pc, #108]	; (8001930 <main+0x100>)
 80018c4:	f000 fad4 	bl	8001e70 <get_all_temperature>

  HAL_TIM_Base_Start_IT(&htim7);
 80018c8:	481a      	ldr	r0, [pc, #104]	; (8001934 <main+0x104>)
 80018ca:	f006 fc6d 	bl	80081a8 <HAL_TIM_Base_Start_IT>
//  uint8_t last_encoder_value = 255;
//  uint8_t encoder_value = 0;
//  SD_Controll_Status sd_res;

  while (1) {
	  printf("T1= %f C\tT2= %f C\n", temperature_array[0], temperature_array[1]);
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <main+0x100>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <main+0x100>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9cd 2300 	strd	r2, r3, [sp]
 80018ee:	4622      	mov	r2, r4
 80018f0:	462b      	mov	r3, r5
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <main+0x108>)
 80018f4:	f009 fae6 	bl	800aec4 <iprintf>
//
//	  else {
//		  printf("Error\n");
//	  }

	  HAL_Delay(500);
 80018f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fc:	f001 f94a 	bl	8002b94 <HAL_Delay>
	  printf("T1= %f C\tT2= %f C\n", temperature_array[0], temperature_array[1]);
 8001900:	e7e5      	b.n	80018ce <main+0x9e>
 8001902:	bf00      	nop
 8001904:	2000a590 	.word	0x2000a590
 8001908:	2000a6fc 	.word	0x2000a6fc
 800190c:	20000274 	.word	0x20000274
 8001910:	2000a348 	.word	0x2000a348
 8001914:	0800cee8 	.word	0x0800cee8
 8001918:	20000010 	.word	0x20000010
 800191c:	20000008 	.word	0x20000008
 8001920:	20000000 	.word	0x20000000
 8001924:	2000a4e0 	.word	0x2000a4e0
 8001928:	0800cef4 	.word	0x0800cef4
 800192c:	0800cefc 	.word	0x0800cefc
 8001930:	2000a358 	.word	0x2000a358
 8001934:	2000a5dc 	.word	0x2000a5dc
 8001938:	0800cf08 	.word	0x0800cf08

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b096      	sub	sp, #88	; 0x58
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2244      	movs	r2, #68	; 0x44
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f009 fc00 	bl	800b150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800195e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001962:	f002 fadf 	bl	8003f24 <HAL_PWREx_ControlVoltageScaling>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800196c:	f000 f83a 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001970:	2318      	movs	r3, #24
 8001972:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001978:	2301      	movs	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001984:	2302      	movs	r3, #2
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001988:	2301      	movs	r3, #1
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800198c:	2301      	movs	r3, #1
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001990:	2328      	movs	r3, #40	; 0x28
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001994:	2307      	movs	r3, #7
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001998:	2304      	movs	r3, #4
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800199c:	2302      	movs	r3, #2
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fb13 	bl	8003fd0 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019b0:	f000 f818 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	2303      	movs	r3, #3
 80019ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	2104      	movs	r1, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fedb 	bl	8004788 <HAL_RCC_ClockConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80019d8:	f000 f804 	bl	80019e4 <Error_Handler>
  }
}
 80019dc:	bf00      	nop
 80019de:	3758      	adds	r7, #88	; 0x58
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <delay_us>:
};
static uint8_t retry_measure = 0;
static uint8_t cannot_read_attempt = 0;


static void delay_us(uint32_t delay) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&OW_Tim, 0);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <delay_us+0x2c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&OW_Tim) < delay) {
 8001a00:	bf00      	nop
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <delay_us+0x2c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d8f9      	bhi.n	8001a02 <delay_us+0x12>

	}
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	2000a360 	.word	0x2000a360

08001a20 <set_baudrate>:


static void set_baudrate(uint32_t baudrate)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  OW_UART.Init.BaudRate = baudrate;
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <set_baudrate+0x28>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6053      	str	r3, [r2, #4]

  if (HAL_HalfDuplex_Init(&OW_UART) != HAL_OK)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <set_baudrate+0x28>)
 8001a30:	f006 ff88 	bl	8008944 <HAL_HalfDuplex_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <set_baudrate+0x1e>
  {
    Error_Handler();
 8001a3a:	f7ff ffd3 	bl	80019e4 <Error_Handler>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000a3ac 	.word	0x2000a3ac

08001a4c <wire_init>:


static HAL_StatusTypeDef wire_init() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 8001a52:	23f0      	movs	r3, #240	; 0xf0
 8001a54:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8001a5a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001a5e:	f7ff ffdf 	bl	8001a20 <set_baudrate>
	HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 8001a62:	1df9      	adds	r1, r7, #7
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	2201      	movs	r2, #1
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <wire_init+0x50>)
 8001a6c:	f006 ffc0 	bl	80089f0 <HAL_UART_Transmit>
	HAL_UART_Receive(&OW_UART, &data_in, 1, HAL_MAX_DELAY);
 8001a70:	1db9      	adds	r1, r7, #6
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	2201      	movs	r2, #1
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <wire_init+0x50>)
 8001a7a:	f007 f843 	bl	8008b04 <HAL_UART_Receive>
	set_baudrate(115200);
 8001a7e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001a82:	f7ff ffcd 	bl	8001a20 <set_baudrate>

	if (data_in != 0xf0) return HAL_OK;
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	2bf0      	cmp	r3, #240	; 0xf0
 8001a8a:	d001      	beq.n	8001a90 <wire_init+0x44>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <wire_init+0x46>
	else return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000a3ac 	.word	0x2000a3ac

08001aa0 <Write_DQ>:


static void Write_DQ(int value) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if (value) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <Write_DQ+0x24>
		uint8_t data_out = 0xff;
 8001aae:	23ff      	movs	r3, #255	; 0xff
 8001ab0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 8001ab2:	f107 010f 	add.w	r1, r7, #15
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	2201      	movs	r2, #1
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <Write_DQ+0x40>)
 8001abe:	f006 ff97 	bl	80089f0 <HAL_UART_Transmit>
	}
	else {
		uint8_t data_out = 0x0;
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
	}
}
 8001ac2:	e009      	b.n	8001ad8 <Write_DQ+0x38>
		uint8_t data_out = 0x0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 8001ac8:	f107 010e 	add.w	r1, r7, #14
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <Write_DQ+0x40>)
 8001ad4:	f006 ff8c 	bl	80089f0 <HAL_UART_Transmit>
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000a3ac 	.word	0x2000a3ac

08001ae4 <Read_DQ>:


static uint8_t Read_DQ(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xFF;
 8001aea:	23ff      	movs	r3, #255	; 0xff
 8001aec:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 8001af2:	1df9      	adds	r1, r7, #7
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	2201      	movs	r2, #1
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <Read_DQ+0x3c>)
 8001afc:	f006 ff78 	bl	80089f0 <HAL_UART_Transmit>
	HAL_UART_Receive(&OW_UART, &data_in, 1, HAL_MAX_DELAY);
 8001b00:	1db9      	adds	r1, r7, #6
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	2201      	movs	r2, #1
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <Read_DQ+0x3c>)
 8001b0a:	f006 fffb 	bl	8008b04 <HAL_UART_Receive>

	return data_in & 0x01;
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000a3ac 	.word	0x2000a3ac

08001b24 <Write_byte>:


static void Write_byte(uint8_t byte) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e00b      	b.n	8001b4c <Write_byte+0x28>
		Write_DQ(byte & 0x01);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ffb0 	bl	8001aa0 <Write_DQ>
		byte >>= 1;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d9f0      	bls.n	8001b34 <Write_byte+0x10>
	}
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <Read_byte>:


static uint8_t Read_byte() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < 8; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	71bb      	strb	r3, [r7, #6]
 8001b6a:	e00e      	b.n	8001b8a <Read_byte+0x2e>
		byte >>= 1;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
		if (Read_DQ() == 1)
 8001b72:	f7ff ffb7 	bl	8001ae4 <Read_DQ>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d103      	bne.n	8001b84 <Read_byte+0x28>
			byte |= 0x80;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b82:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71bb      	strb	r3, [r7, #6]
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d9ed      	bls.n	8001b6c <Read_byte+0x10>
		else
			byte |= 0x00;
	}

	return byte;
 8001b90:	79fb      	ldrb	r3, [r7, #7]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <byte_crc>:


static uint8_t byte_crc(uint8_t crc, uint8_t byte) {
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e016      	b.n	8001bde <byte_crc+0x44>
		uint8_t b = crc ^ byte;
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	4053      	eors	r3, r2
 8001bb6:	73bb      	strb	r3, [r7, #14]
		crc >>= 1;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
		if (b & 0x01)
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <byte_crc+0x38>
			crc ^= 0x8c;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	71fb      	strb	r3, [r7, #7]
		byte >>= 1;
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9e5      	bls.n	8001bb0 <byte_crc+0x16>
	}
	return crc;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <Wire_calculate_crc>:


static uint8_t Wire_calculate_crc(const uint8_t* data, uint8_t lenght) {
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < lenght; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	73bb      	strb	r3, [r7, #14]
 8001c06:	e00d      	b.n	8001c24 <Wire_calculate_crc+0x32>
    	crc = byte_crc(crc, data[i]);
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffc0 	bl	8001b9a <byte_crc>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < lenght; i++)
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	3301      	adds	r3, #1
 8001c22:	73bb      	strb	r3, [r7, #14]
 8001c24:	7bba      	ldrb	r2, [r7, #14]
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3ed      	bcc.n	8001c08 <Wire_calculate_crc+0x16>

    return crc;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <DS18B20_convert_temperature>:


static HAL_StatusTypeDef DS18B20_convert_temperature(uint8_t* ROM) {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	if (wire_init() != HAL_OK) {
 8001c3e:	f7ff ff05 	bl	8001a4c <wire_init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <DS18B20_convert_temperature+0x16>
			return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e01a      	b.n	8001c82 <DS18B20_convert_temperature+0x4c>
	}
	Write_byte(DS18B20_MATCH_ROM);
 8001c4c:	2055      	movs	r0, #85	; 0x55
 8001c4e:	f7ff ff69 	bl	8001b24 <Write_byte>

	for (uint8_t i = 0; i < 8; i++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e009      	b.n	8001c6c <DS18B20_convert_temperature+0x36>
		Write_byte(*(ROM + i));
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5f 	bl	8001b24 <Write_byte>
	for (uint8_t i = 0; i < 8; i++) {
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b07      	cmp	r3, #7
 8001c70:	d9f2      	bls.n	8001c58 <DS18B20_convert_temperature+0x22>
	}

	Write_byte(DS18B20_CONVERT_T);
 8001c72:	2044      	movs	r0, #68	; 0x44
 8001c74:	f7ff ff56 	bl	8001b24 <Write_byte>

	delay_us(800);
 8001c78:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001c7c:	f7ff feb8 	bl	80019f0 <delay_us>

	return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <DS18B20_read_scrachpad>:


static HAL_StatusTypeDef DS18B20_read_scrachpad(uint8_t* ROM, uint16_t* temperature, uint8_t* sign) {
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b089      	sub	sp, #36	; 0x24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	uint8_t crc;
	uint8_t data[9];

	if (wire_init() != HAL_OK)
 8001c96:	f7ff fed9 	bl	8001a4c <wire_init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <DS18B20_read_scrachpad+0x1a>
		return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e046      	b.n	8001d32 <DS18B20_read_scrachpad+0xa8>

	Write_byte(DS18B20_MATCH_ROM);
 8001ca4:	2055      	movs	r0, #85	; 0x55
 8001ca6:	f7ff ff3d 	bl	8001b24 <Write_byte>

	for (uint8_t i = 0; i < 8; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	77fb      	strb	r3, [r7, #31]
 8001cae:	e009      	b.n	8001cc4 <DS18B20_read_scrachpad+0x3a>
		Write_byte(*(ROM + i));
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <Write_byte>
	for (uint8_t i = 0; i < 8; i++) {
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	77fb      	strb	r3, [r7, #31]
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d9f2      	bls.n	8001cb0 <DS18B20_read_scrachpad+0x26>
	}
	Write_byte(DS18B20_READ_SCRATCHPAD);
 8001cca:	20be      	movs	r0, #190	; 0xbe
 8001ccc:	f7ff ff2a 	bl	8001b24 <Write_byte>

	for (uint8_t i = 0; i < 9; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	77bb      	strb	r3, [r7, #30]
 8001cd4:	e00c      	b.n	8001cf0 <DS18B20_read_scrachpad+0x66>
		data[i] = Read_byte();
 8001cd6:	7fbc      	ldrb	r4, [r7, #30]
 8001cd8:	f7ff ff40 	bl	8001b5c <Read_byte>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f104 0320 	add.w	r3, r4, #32
 8001ce4:	443b      	add	r3, r7
 8001ce6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 9; i++) {
 8001cea:	7fbb      	ldrb	r3, [r7, #30]
 8001cec:	3301      	adds	r3, #1
 8001cee:	77bb      	strb	r3, [r7, #30]
 8001cf0:	7fbb      	ldrb	r3, [r7, #30]
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d9ef      	bls.n	8001cd6 <DS18B20_read_scrachpad+0x4c>
	}
	crc = Wire_calculate_crc(data, 8);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2108      	movs	r1, #8
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff78 	bl	8001bf2 <Wire_calculate_crc>
 8001d02:	4603      	mov	r3, r0
 8001d04:	777b      	strb	r3, [r7, #29]

	if (crc != data[8])
 8001d06:	7f3b      	ldrb	r3, [r7, #28]
 8001d08:	7f7a      	ldrb	r2, [r7, #29]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <DS18B20_read_scrachpad+0x88>
		return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <DS18B20_read_scrachpad+0xa8>

	*temperature = ((data[1] << 13) | (data[0] << 5)) >> 5;
 8001d12:	7d7b      	ldrb	r3, [r7, #21]
 8001d14:	035a      	lsls	r2, r3, #13
 8001d16:	7d3b      	ldrb	r3, [r7, #20]
 8001d18:	015b      	lsls	r3, r3, #5
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	115b      	asrs	r3, r3, #5
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	801a      	strh	r2, [r3, #0]
	*sign = data[1] & 0xf8;
 8001d24:	7d7b      	ldrb	r3, [r7, #21]
 8001d26:	f023 0307 	bic.w	r3, r3, #7
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}
	...

08001d3c <OW_init>:




void OW_init(UART_HandleTypeDef *one_wire_UART, TIM_HandleTypeDef *one_wire_TIM) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	OW_UART = *one_wire_UART;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <OW_init+0x34>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2388      	movs	r3, #136	; 0x88
 8001d50:	461a      	mov	r2, r3
 8001d52:	f009 fa7c 	bl	800b24e <memcpy>
	OW_Tim = *one_wire_TIM;
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <OW_init+0x38>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	234c      	movs	r3, #76	; 0x4c
 8001d60:	461a      	mov	r2, r3
 8001d62:	f009 fa74 	bl	800b24e <memcpy>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000a3ac 	.word	0x2000a3ac
 8001d74:	2000a360 	.word	0x2000a360

08001d78 <DS18B20_get_temperature>:

	return HAL_OK;
}


HAL_StatusTypeDef DS18B20_get_temperature(uint8_t* ROM, float* temperature, uint8_t user_offset) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	71fb      	strb	r3, [r7, #7]
	uint16_t raw_temperature;
	uint8_t sign;

	if (DS18B20_convert_temperature(ROM) != HAL_OK)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ff55 	bl	8001c36 <DS18B20_convert_temperature>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <DS18B20_get_temperature+0x1e>
		return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e061      	b.n	8001e5a <DS18B20_get_temperature+0xe2>

	if (DS18B20_read_scrachpad(ROM, &raw_temperature, &sign) != HAL_OK)
 8001d96:	f107 0215 	add.w	r2, r7, #21
 8001d9a:	f107 0316 	add.w	r3, r7, #22
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff ff72 	bl	8001c8a <DS18B20_read_scrachpad>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <DS18B20_get_temperature+0x38>
		return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e054      	b.n	8001e5a <DS18B20_get_temperature+0xe2>

	if (sign) {
 8001db0:	7d7b      	ldrb	r3, [r7, #21]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <DS18B20_get_temperature+0x46>
		raw_temperature = (~(raw_temperature)) + 1;
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	425b      	negs	r3, r3
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	82fb      	strh	r3, [r7, #22]
	}

	*temperature = (raw_temperature / 16.0);
 8001dbe:	8afb      	ldrh	r3, [r7, #22]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <DS18B20_get_temperature+0xec>)
 8001dcc:	f7fe fd3e 	bl	800084c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fee6 	bl	8000ba8 <__aeabi_d2f>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	601a      	str	r2, [r3, #0]

	if (*temperature == 85.0 && retry_measure < 3) {
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001e68 <DS18B20_get_temperature+0xf0>
 8001dec:	eef4 7a47 	vcmp.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	d10f      	bne.n	8001e16 <DS18B20_get_temperature+0x9e>
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <DS18B20_get_temperature+0xf4>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d80b      	bhi.n	8001e16 <DS18B20_get_temperature+0x9e>
		retry_measure++;
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <DS18B20_get_temperature+0xf4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <DS18B20_get_temperature+0xf4>)
 8001e08:	701a      	strb	r2, [r3, #0]
		DS18B20_get_temperature(ROM, temperature, user_offset);
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff ffb1 	bl	8001d78 <DS18B20_get_temperature>
	}
	retry_measure = 0;
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <DS18B20_get_temperature+0xf4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

	if (sign){
 8001e1c:	7d7b      	ldrb	r3, [r7, #21]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00d      	beq.n	8001e3e <DS18B20_get_temperature+0xc6>
		*temperature += (float)(OFFSET + user_offset);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	edc3 7a00 	vstr	s15, [r3]
 8001e3c:	e00c      	b.n	8001e58 <DS18B20_get_temperature+0xe0>
	}
	else {
		*temperature -= (float)(OFFSET + user_offset);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	edc3 7a00 	vstr	s15, [r3]
	}

	return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40300000 	.word	0x40300000
 8001e68:	42aa0000 	.word	0x42aa0000
 8001e6c:	2000a434 	.word	0x2000a434

08001e70 <get_all_temperature>:


void get_all_temperature(float* temperature_array, uint8_t user_offset) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < NO_SENSORS; i++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e028      	b.n	8001ed4 <get_all_temperature+0x64>
		while(DS18B20_get_temperature(ROM_array[i], (temperature_array + i), user_offset) != HAL_OK && cannot_read_attempt < 10) {
			cannot_read_attempt++;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <get_all_temperature+0x74>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <get_all_temperature+0x74>)
 8001e8c:	701a      	strb	r2, [r3, #0]
		while(DS18B20_get_temperature(ROM_array[i], (temperature_array + i), user_offset) != HAL_OK && cannot_read_attempt < 10) {
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <get_all_temperature+0x78>)
 8001e94:	1898      	adds	r0, r3, r2
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7ff ff69 	bl	8001d78 <DS18B20_get_temperature>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <get_all_temperature+0x44>
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <get_all_temperature+0x74>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	d9e6      	bls.n	8001e82 <get_all_temperature+0x12>
		}
		if (cannot_read_attempt == 10) {
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <get_all_temperature+0x74>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d105      	bne.n	8001ec8 <get_all_temperature+0x58>
			*(temperature_array + i) = 500.0;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <get_all_temperature+0x7c>)
 8001ec6:	601a      	str	r2, [r3, #0]
		}
		cannot_read_attempt = 0;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <get_all_temperature+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NO_SENSORS; i++) {
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d9d9      	bls.n	8001e8e <get_all_temperature+0x1e>
	}
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000a435 	.word	0x2000a435
 8001ee8:	20000018 	.word	0x20000018
 8001eec:	43fa0000 	.word	0x43fa0000

08001ef0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f0a:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <MX_RTC_Init+0xb4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f16:	227f      	movs	r2, #127	; 0x7f
 8001f18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f1c:	22ff      	movs	r2, #255	; 0xff
 8001f1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f38:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f3a:	f004 f963 	bl	8006204 <HAL_RTC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001f44:	f7ff fd4e 	bl	80019e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8001f48:	2321      	movs	r3, #33	; 0x21
 8001f4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x37;
 8001f4c:	2337      	movs	r3, #55	; 0x37
 8001f4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 8001f50:	2325      	movs	r3, #37	; 0x25
 8001f52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4619      	mov	r1, r3
 8001f62:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f64:	f004 f9d6 	bl	8006314 <HAL_RTC_SetTime>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001f6e:	f7ff fd39 	bl	80019e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001f76:	2307      	movs	r3, #7
 8001f78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001f7a:	2316      	movs	r3, #22
 8001f7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001f7e:	2324      	movs	r3, #36	; 0x24
 8001f80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	2201      	movs	r2, #1
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_RTC_Init+0xb0>)
 8001f8a:	f004 fa60 	bl	800644e <HAL_RTC_SetDate>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001f94:	f7ff fd26 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000a438 	.word	0x2000a438
 8001fa4:	40002800 	.word	0x40002800

08001fa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0a4      	sub	sp, #144	; 0x90
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	2288      	movs	r2, #136	; 0x88
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f009 f8c9 	bl	800b150 <memset>
  if(rtcHandle->Instance==RTC)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_RTC_MspInit+0x5c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d118      	bne.n	8001ffa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fdf8 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fe6:	f7ff fcfd 	bl	80019e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RTC_MspInit+0x60>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_RTC_MspInit+0x60>)
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3790      	adds	r7, #144	; 0x90
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40002800 	.word	0x40002800
 8002008:	40021000 	.word	0x40021000

0800200c <set_rtc_datatime>:

	strcpy(buffer, str);
}


HAL_StatusTypeDef set_rtc_datatime() {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
	sTime.Hours = 11;
 8002020:	230b      	movs	r3, #11
 8002022:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 59;
 8002024:	233b      	movs	r3, #59	; 0x3b
 8002026:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 55;
 8002028:	2337      	movs	r3, #55	; 0x37
 800202a:	71bb      	strb	r3, [r7, #6]
	sTime.TimeFormat = RTC_HOURFORMAT_24;
 800202c:	2300      	movs	r3, #0
 800202e:	71fb      	strb	r3, [r7, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

	RTC_DateTypeDef sDate = {0};
 8002038:	2300      	movs	r3, #0
 800203a:	603b      	str	r3, [r7, #0]
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800203c:	2302      	movs	r3, #2
 800203e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JULY;
 8002040:	2307      	movs	r3, #7
 8002042:	707b      	strb	r3, [r7, #1]
	sDate.Date = 16;
 8002044:	2310      	movs	r3, #16
 8002046:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 24;
 8002048:	2318      	movs	r3, #24
 800204a:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <set_rtc_datatime+0x78>)
 8002054:	f004 f95e 	bl	8006314 <HAL_RTC_SetTime>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <set_rtc_datatime+0x56>
		return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00b      	b.n	800207a <set_rtc_datatime+0x6e>

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	2201      	movs	r2, #1
 8002066:	4619      	mov	r1, r3
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <set_rtc_datatime+0x78>)
 800206a:	f004 f9f0 	bl	800644e <HAL_RTC_SetDate>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <set_rtc_datatime+0x6c>
		return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <set_rtc_datatime+0x6e>

	return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000a438 	.word	0x2000a438

08002088 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 800208e:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <MX_SDMMC1_SD_Init+0x3c>)
 8002090:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <MX_SDMMC1_SD_Init+0x38>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	2000a45c 	.word	0x2000a45c
 80020c4:	40012800 	.word	0x40012800

080020c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0ac      	sub	sp, #176	; 0xb0
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2288      	movs	r2, #136	; 0x88
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 f831 	bl	800b150 <memset>
  if(sdHandle->Instance==SDMMC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_SD_MspInit+0x118>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d16e      	bne.n	80021d6 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80020f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80020fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800210e:	2314      	movs	r3, #20
 8002110:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002112:	2307      	movs	r3, #7
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800211a:	2302      	movs	r3, #2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800211e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fd51 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8002134:	f7ff fc56 	bl	80019e4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 800213a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6613      	str	r3, [r2, #96]	; 0x60
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 8002146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_SD_MspInit+0x11c>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002180:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800219a:	230c      	movs	r3, #12
 800219c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021a4:	4619      	mov	r1, r3
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_SD_MspInit+0x120>)
 80021a8:	f001 f822 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ac:	2304      	movs	r3, #4
 80021ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021c4:	230c      	movs	r3, #12
 80021c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ce:	4619      	mov	r1, r3
 80021d0:	4806      	ldr	r0, [pc, #24]	; (80021ec <HAL_SD_MspInit+0x124>)
 80021d2:	f001 f80d 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80021d6:	bf00      	nop
 80021d8:	37b0      	adds	r7, #176	; 0xb0
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40012800 	.word	0x40012800
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00

080021f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_SPI1_Init+0x74>)
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <MX_SPI1_Init+0x78>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <MX_SPI1_Init+0x74>)
 80021fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_SPI1_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_SPI1_Init+0x74>)
 800220a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800220e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_SPI1_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_SPI1_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_SPI1_Init+0x74>)
 800221e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_SPI1_Init+0x74>)
 8002226:	2210      	movs	r2, #16
 8002228:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_SPI1_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_SPI1_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_SPI1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_SPI1_Init+0x74>)
 800223e:	2207      	movs	r2, #7
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_SPI1_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_SPI1_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_SPI1_Init+0x74>)
 8002250:	f005 f9e8 	bl	8007624 <HAL_SPI_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800225a:	f7ff fbc3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000a4e0 	.word	0x2000a4e0
 8002268:	40013000 	.word	0x40013000

0800226c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2c      	ldr	r2, [pc, #176]	; (800233c <HAL_SPI_MspInit+0xd0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d152      	bne.n	8002334 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 8002294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002298:	6613      	str	r3, [r2, #96]	; 0x60
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_SPI_MspInit+0xd4>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022be:	23a0      	movs	r3, #160	; 0xa0
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ce:	2305      	movs	r3, #5
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f000 ff88 	bl	80031f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 80022e2:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_SPI_MspInit+0xdc>)
 80022e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 80022ee:	2210      	movs	r2, #16
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 8002312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002318:	480a      	ldr	r0, [pc, #40]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 800231a:	f000 fd71 	bl	8002e00 <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002324:	f7ff fb5e 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_SPI_MspInit+0xd8>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013000 	.word	0x40013000
 8002340:	40021000 	.word	0x40021000
 8002344:	2000a544 	.word	0x2000a544
 8002348:	40020030 	.word	0x40020030

0800234c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_MspInit+0x44>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_MspInit+0x44>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x44>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x44>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e0:	f000 fbb8 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA1_Channel3_IRQHandler+0x10>)
 80023ee:	f000 fe1f 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000a544 	.word	0x2000a544

080023fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TIM7_IRQHandler+0x10>)
 8002402:	f005 ffe7 	bl	80083d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000a5dc 	.word	0x2000a5dc

08002410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_kill>:

int _kill(int pid, int sig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800242a:	f008 fee3 	bl	800b1f4 <__errno>
 800242e:	4603      	mov	r3, r0
 8002430:	2216      	movs	r2, #22
 8002432:	601a      	str	r2, [r3, #0]
  return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_exit>:

void _exit (int status)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ffe7 	bl	8002420 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002452:	e7fe      	b.n	8002452 <_exit+0x12>

08002454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e00a      	b.n	800247c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002466:	f3af 8000 	nop.w
 800246a:	4601      	mov	r1, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	b2ca      	uxtb	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf0      	blt.n	8002466 <_read+0x12>
  }

  return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e009      	b.n	80024b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f981 	bl	80017b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbf1      	blt.n	80024a0 <_write+0x12>
  }
  return len;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_close>:

int _close(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ee:	605a      	str	r2, [r3, #4]
  return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_isatty>:

int _isatty(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f008 fe48 	bl	800b1f4 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20018000 	.word	0x20018000
 8002590:	00002000 	.word	0x00002000
 8002594:	2000a58c 	.word	0x2000a58c
 8002598:	2000a8e8 	.word	0x2000a8e8

0800259c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_TIM6_Init+0x64>)
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <MX_TIM6_Init+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <MX_TIM6_Init+0x64>)
 80025d8:	224f      	movs	r2, #79	; 0x4f
 80025da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_TIM6_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <MX_TIM6_Init+0x64>)
 80025e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_TIM6_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM6_Init+0x64>)
 80025f2:	f005 fd19 	bl	8008028 <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025fc:	f7ff f9f2 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM6_Init+0x64>)
 800260e:	f006 f8a5 	bl	800875c <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002618:	f7ff f9e4 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000a590 	.word	0x2000a590
 8002628:	40001000 	.word	0x40001000

0800262c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_TIM7_Init+0x68>)
 800263e:	4a16      	ldr	r2, [pc, #88]	; (8002698 <MX_TIM7_Init+0x6c>)
 8002640:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_TIM7_Init+0x68>)
 8002644:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002648:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_TIM7_Init+0x68>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_TIM7_Init+0x68>)
 8002652:	f242 720f 	movw	r2, #9999	; 0x270f
 8002656:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_TIM7_Init+0x68>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_TIM7_Init+0x68>)
 8002660:	f005 fce2 	bl	8008028 <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800266a:	f7ff f9bb 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <MX_TIM7_Init+0x68>)
 800267c:	f006 f86e 	bl	800875c <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002686:	f7ff f9ad 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000a5dc 	.word	0x2000a5dc
 8002698:	40001400 	.word	0x40001400

0800269c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f008 fd50 	bl	800b150 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	463b      	mov	r3, r7
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <MX_TIM8_Init+0xac>)
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <MX_TIM8_Init+0xb0>)
 80026be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <MX_TIM8_Init+0xac>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <MX_TIM8_Init+0xac>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <MX_TIM8_Init+0xac>)
 80026ce:	2227      	movs	r2, #39	; 0x27
 80026d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_TIM8_Init+0xac>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_TIM8_Init+0xac>)
 80026da:	2200      	movs	r2, #0
 80026dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_TIM8_Init+0xac>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80026e8:	2302      	movs	r3, #2
 80026ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ec:	2301      	movs	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80026f8:	2302      	movs	r3, #2
 80026fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4619      	mov	r1, r3
 800270e:	480e      	ldr	r0, [pc, #56]	; (8002748 <MX_TIM8_Init+0xac>)
 8002710:	f005 fdba 	bl	8008288 <HAL_TIM_Encoder_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800271a:	f7ff f963 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <MX_TIM8_Init+0xac>)
 8002730:	f006 f814 	bl	800875c <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800273a:	f7ff f953 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3730      	adds	r7, #48	; 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000a628 	.word	0x2000a628
 800274c:	40013400 	.word	0x40013400

08002750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_TIM_Base_MspInit+0x68>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10c      	bne.n	800277c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800277a:	e018      	b.n	80027ae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_TIM_Base_MspInit+0x70>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d113      	bne.n	80027ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_TIM_Base_MspInit+0x6c>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	210a      	movs	r1, #10
 80027a2:	2037      	movs	r0, #55	; 0x37
 80027a4:	f000 faf5 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027a8:	2037      	movs	r0, #55	; 0x37
 80027aa:	f000 fb0e 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40001000 	.word	0x40001000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40001400 	.word	0x40001400

080027c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d127      	bne.n	8002836 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 80027ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f0:	6613      	str	r3, [r2, #96]	; 0x60
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_TIM_Encoder_MspInit+0x80>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002826:	2303      	movs	r3, #3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <HAL_TIM_Encoder_MspInit+0x84>)
 8002832:	f000 fcdd 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40013400 	.word	0x40013400
 8002844:	40021000 	.word	0x40021000
 8002848:	48000800 	.word	0x48000800

0800284c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <MX_USART2_UART_Init+0x5c>)
 8002854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART2_UART_Init+0x58>)
 8002890:	f006 f80a 	bl	80088a8 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800289a:	f7ff f8a3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000a674 	.word	0x2000a674
 80028a8:	40004400 	.word	0x40004400

080028ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <MX_USART3_UART_Init+0x64>)
 80028b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028d2:	220c      	movs	r2, #12
 80028d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028ea:	2210      	movs	r2, #16
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_USART3_UART_Init+0x60>)
 80028f8:	f006 f824 	bl	8008944 <HAL_HalfDuplex_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8002902:	f7ff f86f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000a6fc 	.word	0x2000a6fc
 8002910:	40004800 	.word	0x40004800

08002914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0ae      	sub	sp, #184	; 0xb8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	2288      	movs	r2, #136	; 0x88
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f008 fc0b 	bl	800b150 <memset>
  if(uartHandle->Instance==USART2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_UART_MspInit+0x134>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d13c      	bne.n	80029be <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002944:	2302      	movs	r3, #2
 8002946:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002948:	2304      	movs	r3, #4
 800294a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4618      	mov	r0, r3
 8002952:	f002 f93d 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800295c:	f7ff f842 	bl	80019e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_UART_MspInit+0x138>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <HAL_UART_MspInit+0x138>)
 8002966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296a:	6593      	str	r3, [r2, #88]	; 0x58
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_UART_MspInit+0x138>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_UART_MspInit+0x138>)
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <HAL_UART_MspInit+0x138>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002984:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_UART_MspInit+0x138>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002990:	230c      	movs	r3, #12
 8002992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a8:	2307      	movs	r3, #7
 80029aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b8:	f000 fc1a 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029bc:	e03f      	b.n	8002a3e <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_UART_MspInit+0x13c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d13a      	bne.n	8002a3e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029c8:	2304      	movs	r3, #4
 80029ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 f8fb 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80029e0:	f7ff f800 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_UART_MspInit+0x138>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_UART_MspInit+0x138>)
 80029ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_MspInit+0x138>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_UART_MspInit+0x138>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_UART_MspInit+0x138>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_UART_MspInit+0x138>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a14:	2310      	movs	r3, #16
 8002a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1a:	2312      	movs	r3, #18
 8002a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4806      	ldr	r0, [pc, #24]	; (8002a54 <HAL_UART_MspInit+0x140>)
 8002a3a:	f000 fbd9 	bl	80031f0 <HAL_GPIO_Init>
}
 8002a3e:	bf00      	nop
 8002a40:	37b8      	adds	r7, #184	; 0xb8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40004400 	.word	0x40004400
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40004800 	.word	0x40004800
 8002a54:	48000800 	.word	0x48000800

08002a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a5c:	f7ff fd9e 	bl	800259c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a62:	490d      	ldr	r1, [pc, #52]	; (8002a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <LoopForever+0xe>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a78:	4c0a      	ldr	r4, [pc, #40]	; (8002aa4 <LoopForever+0x16>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a86:	f008 fbbb 	bl	800b200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a8a:	f7fe fed1 	bl	8001830 <main>

08002a8e <LoopForever>:

LoopForever:
    b LoopForever
 8002a8e:	e7fe      	b.n	8002a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a98:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002a9c:	0800d394 	.word	0x0800d394
  ldr r2, =_sbss
 8002aa0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002aa4:	2000a8e8 	.word	0x2000a8e8

08002aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC1_2_IRQHandler>

08002aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f961 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aba:	200f      	movs	r0, #15
 8002abc:	f000 f80e 	bl	8002adc <HAL_InitTick>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	71fb      	strb	r3, [r7, #7]
 8002aca:	e001      	b.n	8002ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002acc:	f7ff fc3e 	bl	800234c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_InitTick+0x6c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_InitTick+0x70>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_InitTick+0x6c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f96d 	bl	8002de6 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d809      	bhi.n	8002b2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f000 f937 	bl	8002d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_InitTick+0x74>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e007      	b.n	8002b3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e004      	b.n	8002b3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e001      	b.n	8002b3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000030 	.word	0x20000030
 8002b4c:	20000028 	.word	0x20000028
 8002b50:	2000002c 	.word	0x2000002c

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000030 	.word	0x20000030
 8002b78:	2000a784 	.word	0x2000a784

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000a784 	.word	0x2000a784

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000030 	.word	0x20000030

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff8e 	bl	8002c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff29 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff3e 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff8e 	bl	8002cd0 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff5d 	bl	8002c7c <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff31 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffa2 	bl	8002d38 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e098      	b.n	8002f44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_DMA_Init+0x150>)
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d80f      	bhi.n	8002e3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <HAL_DMA_Init+0x154>)
 8002e26:	4413      	add	r3, r2
 8002e28:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <HAL_DMA_Init+0x158>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a48      	ldr	r2, [pc, #288]	; (8002f5c <HAL_DMA_Init+0x15c>)
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e3c:	e00e      	b.n	8002e5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <HAL_DMA_Init+0x160>)
 8002e46:	4413      	add	r3, r2
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_DMA_Init+0x158>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a42      	ldr	r2, [pc, #264]	; (8002f64 <HAL_DMA_Init+0x164>)
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb6:	d039      	beq.n	8002f2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_DMA_Init+0x15c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d11a      	bne.n	8002ef8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_DMA_Init+0x168>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f003 031c 	and.w	r3, r3, #28
 8002ece:	210f      	movs	r1, #15
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4924      	ldr	r1, [pc, #144]	; (8002f68 <HAL_DMA_Init+0x168>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_DMA_Init+0x168>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 031c 	and.w	r3, r3, #28
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	491d      	ldr	r1, [pc, #116]	; (8002f68 <HAL_DMA_Init+0x168>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
 8002ef6:	e019      	b.n	8002f2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_DMA_Init+0x16c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	f003 031c 	and.w	r3, r3, #28
 8002f04:	210f      	movs	r1, #15
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4917      	ldr	r1, [pc, #92]	; (8002f6c <HAL_DMA_Init+0x16c>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_DMA_Init+0x16c>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 031c 	and.w	r3, r3, #28
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	4911      	ldr	r1, [pc, #68]	; (8002f6c <HAL_DMA_Init+0x16c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40020407 	.word	0x40020407
 8002f54:	bffdfff8 	.word	0xbffdfff8
 8002f58:	cccccccd 	.word	0xcccccccd
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	bffdfbf8 	.word	0xbffdfbf8
 8002f64:	40020400 	.word	0x40020400
 8002f68:	400200a8 	.word	0x400200a8
 8002f6c:	400204a8 	.word	0x400204a8

08002f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Start_IT+0x20>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e04b      	b.n	8003028 <HAL_DMA_Start_IT+0xb8>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d13a      	bne.n	800301a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f8e0 	bl	800318e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 020e 	orr.w	r2, r2, #14
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e00f      	b.n	8003008 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 020a 	orr.w	r2, r2, #10
 8003006:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e005      	b.n	8003026 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f003 031c 	and.w	r3, r3, #28
 8003050:	2204      	movs	r2, #4
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d026      	beq.n	80030aa <HAL_DMA_IRQHandler+0x7a>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d021      	beq.n	80030aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f003 021c 	and.w	r2, r3, #28
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2104      	movs	r1, #4
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	d071      	beq.n	8003184 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030a8:	e06c      	b.n	8003184 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 031c 	and.w	r3, r3, #28
 80030b2:	2202      	movs	r2, #2
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02e      	beq.n	800311c <HAL_DMA_IRQHandler+0xec>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d029      	beq.n	800311c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 020a 	bic.w	r2, r2, #10
 80030e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f003 021c 	and.w	r2, r3, #28
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2102      	movs	r1, #2
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d038      	beq.n	8003184 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800311a:	e033      	b.n	8003184 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f003 031c 	and.w	r3, r3, #28
 8003124:	2208      	movs	r2, #8
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02a      	beq.n	8003186 <HAL_DMA_IRQHandler+0x156>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d025      	beq.n	8003186 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 020e 	bic.w	r2, r2, #14
 8003148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 021c 	and.w	r2, r3, #28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003184:	bf00      	nop
 8003186:	bf00      	nop
}
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f003 021c 	and.w	r2, r3, #28
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d108      	bne.n	80031d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031d0:	e007      	b.n	80031e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fe:	e17f      	b.n	8003500 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8171 	beq.w	80034fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d005      	beq.n	8003230 <HAL_GPIO_Init+0x40>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d130      	bne.n	8003292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003266:	2201      	movs	r2, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0201 	and.w	r2, r3, #1
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d118      	bne.n	80032d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032a4:	2201      	movs	r2, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	f003 0201 	and.w	r2, r3, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d017      	beq.n	800330c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	6939      	ldr	r1, [r7, #16]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80ac 	beq.w	80034fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_GPIO_Init+0x330>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_GPIO_Init+0x330>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6613      	str	r3, [r2, #96]	; 0x60
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_GPIO_Init+0x330>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033ba:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_GPIO_Init+0x334>)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x242>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_GPIO_Init+0x338>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x23e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	; (800352c <HAL_GPIO_Init+0x33c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x23a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	; (8003530 <HAL_GPIO_Init+0x340>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x236>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_GPIO_Init+0x344>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x232>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4b      	ldr	r2, [pc, #300]	; (8003538 <HAL_GPIO_Init+0x348>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x22e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4a      	ldr	r2, [pc, #296]	; (800353c <HAL_GPIO_Init+0x34c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x22a>
 8003416:	2306      	movs	r3, #6
 8003418:	e00c      	b.n	8003434 <HAL_GPIO_Init+0x244>
 800341a:	2307      	movs	r3, #7
 800341c:	e00a      	b.n	8003434 <HAL_GPIO_Init+0x244>
 800341e:	2305      	movs	r3, #5
 8003420:	e008      	b.n	8003434 <HAL_GPIO_Init+0x244>
 8003422:	2304      	movs	r3, #4
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x244>
 8003426:	2303      	movs	r3, #3
 8003428:	e004      	b.n	8003434 <HAL_GPIO_Init+0x244>
 800342a:	2302      	movs	r3, #2
 800342c:	e002      	b.n	8003434 <HAL_GPIO_Init+0x244>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_GPIO_Init+0x244>
 8003432:	2300      	movs	r3, #0
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	f002 0203 	and.w	r2, r2, #3
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	4093      	lsls	r3, r2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003444:	4937      	ldr	r1, [pc, #220]	; (8003524 <HAL_GPIO_Init+0x334>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_GPIO_Init+0x350>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003476:	4a32      	ldr	r2, [pc, #200]	; (8003540 <HAL_GPIO_Init+0x350>)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800347c:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_GPIO_Init+0x350>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ca:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034f4:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3301      	adds	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	f47f ae78 	bne.w	8003200 <HAL_GPIO_Init+0x10>
  }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40010000 	.word	0x40010000
 8003528:	48000400 	.word	0x48000400
 800352c:	48000800 	.word	0x48000800
 8003530:	48000c00 	.word	0x48000c00
 8003534:	48001000 	.word	0x48001000
 8003538:	48001400 	.word	0x48001400
 800353c:	48001800 	.word	0x48001800
 8003540:	40010400 	.word	0x40010400

08003544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e001      	b.n	8003566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003590:	e002      	b.n	8003598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e08d      	b.n	80036d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fe40 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	e006      	b.n	800362c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800362a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d108      	bne.n	8003646 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e007      	b.n	8003656 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003668:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003678:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	817b      	strh	r3, [r7, #10]
 80036ee:	460b      	mov	r3, r1
 80036f0:	813b      	strh	r3, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	f040 80fd 	bne.w	80038fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_I2C_Mem_Read+0x34>
 800370a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0f1      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_I2C_Mem_Read+0x4e>
 8003726:	2302      	movs	r3, #2
 8003728:	e0ea      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003732:	f7ff fa23 	bl	8002b7c <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2319      	movs	r3, #25
 800373e:	2201      	movs	r2, #1
 8003740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f95b 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0d5      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2222      	movs	r2, #34	; 0x22
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2240      	movs	r2, #64	; 0x40
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a3a      	ldr	r2, [r7, #32]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377c:	88f8      	ldrh	r0, [r7, #6]
 800377e:	893a      	ldrh	r2, [r7, #8]
 8003780:	8979      	ldrh	r1, [r7, #10]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4603      	mov	r3, r0
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f8bf 	bl	8003910 <I2C_RequestMemoryRead>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ad      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d90e      	bls.n	80037cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	4b52      	ldr	r3, [pc, #328]	; (8003908 <HAL_I2C_Mem_Read+0x22c>)
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fad5 	bl	8003d74 <I2C_TransferConfig>
 80037ca:	e00f      	b.n	80037ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_I2C_Mem_Read+0x22c>)
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fac4 	bl	8003d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2200      	movs	r2, #0
 80037f4:	2104      	movs	r1, #4
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f902 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07c      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d034      	beq.n	80038ac <HAL_I2C_Mem_Read+0x1d0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d130      	bne.n	80038ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	2200      	movs	r2, #0
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f8d3 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e04d      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	d90e      	bls.n	800388c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fa75 	bl	8003d74 <I2C_TransferConfig>
 800388a:	e00f      	b.n	80038ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	b2da      	uxtb	r2, r3
 800389c:	8979      	ldrh	r1, [r7, #10]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa64 	bl	8003d74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d19a      	bne.n	80037ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f936 	bl	8003b2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e01a      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2220      	movs	r2, #32
 80038d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_I2C_Mem_Read+0x230>)
 80038de:	400b      	ands	r3, r1
 80038e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	80002400 	.word	0x80002400
 800390c:	fe00e800 	.word	0xfe00e800

08003910 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	461a      	mov	r2, r3
 800391e:	4603      	mov	r3, r0
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	460b      	mov	r3, r1
 8003924:	813b      	strh	r3, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <I2C_RequestMemoryRead+0xa4>)
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa1c 	bl	8003d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8ac 	bl	8003a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e02c      	b.n	80039aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
 8003960:	e015      	b.n	800398e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003962:	893b      	ldrh	r3, [r7, #8]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	b29b      	uxth	r3, r3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f892 	bl	8003a9e <I2C_WaitOnTXISFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e012      	b.n	80039aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f831 	bl	8003a00 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	80002000 	.word	0x80002000

080039b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d103      	bne.n	80039d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d007      	beq.n	80039f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	619a      	str	r2, [r3, #24]
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a10:	e031      	b.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d02d      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7ff f8af 	bl	8002b7c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d122      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d113      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d0be      	beq.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aaa:	e033      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f87f 	bl	8003bb4 <I2C_IsErrorOccurred>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e031      	b.n	8003b24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d025      	beq.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7ff f858 	bl	8002b7c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11a      	bne.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d013      	beq.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d1c4      	bne.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b38:	e02f      	b.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f838 	bl	8003bb4 <I2C_IsErrorOccurred>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e02d      	b.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7ff f815 	bl	8002b7c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11a      	bne.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d013      	beq.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d1c8      	bne.n	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d068      	beq.n	8003cb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2210      	movs	r2, #16
 8003be6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be8:	e049      	b.n	8003c7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d045      	beq.n	8003c7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe ffc3 	bl	8002b7c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_IsErrorOccurred+0x54>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13a      	bne.n	8003c7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2a:	d121      	bne.n	8003c70 <I2C_IsErrorOccurred+0xbc>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c32:	d01d      	beq.n	8003c70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d01a      	beq.n	8003c70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c4a:	f7fe ff97 	bl	8002b7c <HAL_GetTick>
 8003c4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c50:	e00e      	b.n	8003c70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c52:	f7fe ff93 	bl	8002b7c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b19      	cmp	r3, #25
 8003c5e:	d907      	bls.n	8003c70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f043 0320 	orr.w	r3, r3, #32
 8003c66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c6e:	e006      	b.n	8003c7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d1e9      	bne.n	8003c52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d003      	beq.n	8003c94 <I2C_IsErrorOccurred+0xe0>
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0aa      	beq.n	8003bea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01c      	beq.n	8003d62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fe45 	bl	80039b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <I2C_IsErrorOccurred+0x1bc>)
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3728      	adds	r7, #40	; 0x28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	4613      	mov	r3, r2
 8003d84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d8c:	7a7b      	ldrb	r3, [r7, #9]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	0d5b      	lsrs	r3, r3, #21
 8003dae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <I2C_TransferConfig+0x60>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	43db      	mvns	r3, r3
 8003db8:	ea02 0103 	and.w	r1, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	03ff63ff 	.word	0x03ff63ff

08003dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d138      	bne.n	8003e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e032      	b.n	8003e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d139      	bne.n	8003ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e033      	b.n	8003efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2224      	movs	r2, #36	; 0x24
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40007000 	.word	0x40007000

08003f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f32:	d130      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d038      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2232      	movs	r2, #50	; 0x32
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f68:	e002      	b.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7c:	d102      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f2      	bne.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d110      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d007      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	20000028 	.word	0x20000028
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e3ca      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe2:	4b97      	ldr	r3, [pc, #604]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fec:	4b94      	ldr	r3, [pc, #592]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80e4 	beq.w	80041cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_RCC_OscConfig+0x4a>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	f040 808b 	bne.w	8004128 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 8087 	bne.w	8004128 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800401a:	4b89      	ldr	r3, [pc, #548]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x62>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e3a2      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	4b82      	ldr	r3, [pc, #520]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_RCC_OscConfig+0x7c>
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404a:	e005      	b.n	8004058 <HAL_RCC_OscConfig+0x88>
 800404c:	4b7c      	ldr	r3, [pc, #496]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	4293      	cmp	r3, r2
 800405a:	d223      	bcs.n	80040a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fd55 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e383      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004070:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a72      	ldr	r2, [pc, #456]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b70      	ldr	r3, [pc, #448]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	496d      	ldr	r1, [pc, #436]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408e:	4b6c      	ldr	r3, [pc, #432]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	4968      	ldr	r1, [pc, #416]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
 80040a2:	e025      	b.n	80040f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4960      	ldr	r1, [pc, #384]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c2:	4b5f      	ldr	r3, [pc, #380]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	495b      	ldr	r1, [pc, #364]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd15 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e343      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f0:	f000 fc4a 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b52      	ldr	r3, [pc, #328]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	4950      	ldr	r1, [pc, #320]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	4a4e      	ldr	r2, [pc, #312]	; (8004248 <HAL_RCC_OscConfig+0x278>)
 800410e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004110:	4b4e      	ldr	r3, [pc, #312]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fce1 	bl	8002adc <HAL_InitTick>
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d052      	beq.n	80041ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	e327      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d032      	beq.n	8004196 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004130:	4b43      	ldr	r3, [pc, #268]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a42      	ldr	r2, [pc, #264]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800413c:	f7fe fd1e 	bl	8002b7c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004144:	f7fe fd1a 	bl	8002b7c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e310      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004156:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a36      	ldr	r2, [pc, #216]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004168:	f043 0308 	orr.w	r3, r3, #8
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4931      	ldr	r1, [pc, #196]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004180:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	492c      	ldr	r1, [pc, #176]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	e01a      	b.n	80041cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a29      	ldr	r2, [pc, #164]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041a2:	f7fe fceb 	bl	8002b7c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041aa:	f7fe fce7 	bl	8002b7c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e2dd      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x1da>
 80041c8:	e000      	b.n	80041cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d074      	beq.n	80042c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x21a>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d10e      	bne.n	8004202 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d10b      	bne.n	8004202 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d064      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2f0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d160      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e2ba      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x24a>
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e026      	b.n	8004268 <HAL_RCC_OscConfig+0x298>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004222:	d115      	bne.n	8004250 <HAL_RCC_OscConfig+0x280>
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 800422a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a02      	ldr	r2, [pc, #8]	; (8004240 <HAL_RCC_OscConfig+0x270>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x298>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	0800cfb4 	.word	0x0800cfb4
 8004248:	20000028 	.word	0x20000028
 800424c:	2000002c 	.word	0x2000002c
 8004250:	4ba0      	ldr	r3, [pc, #640]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a9f      	ldr	r2, [pc, #636]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a9c      	ldr	r2, [pc, #624]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe fc84 	bl	8002b7c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fe fc80 	bl	8002b7c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e276      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	4b92      	ldr	r3, [pc, #584]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x2a8>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fe fc70 	bl	8002b7c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fe fc6c 	bl	8002b7c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e262      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2d0>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d060      	beq.n	8004390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x310>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d119      	bne.n	800430e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d116      	bne.n	800430e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e0:	4b7c      	ldr	r3, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_OscConfig+0x328>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e23f      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	4973      	ldr	r1, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800430c:	e040      	b.n	8004390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d023      	beq.n	800435e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004316:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fe fc2b 	bl	8002b7c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432a:	f7fe fc27 	bl	8002b7c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e21d      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433c:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b62      	ldr	r3, [pc, #392]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	495f      	ldr	r1, [pc, #380]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	e018      	b.n	8004390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5c      	ldr	r2, [pc, #368]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fe fc07 	bl	8002b7c <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004372:	f7fe fc03 	bl	8002b7c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1f9      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d03c      	beq.n	8004416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01c      	beq.n	80043de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	4a4a      	ldr	r2, [pc, #296]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7fe fbe2 	bl	8002b7c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043bc:	f7fe fbde 	bl	8002b7c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e1d4      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ef      	beq.n	80043bc <HAL_RCC_OscConfig+0x3ec>
 80043dc:	e01b      	b.n	8004416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80043e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e4:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ee:	f7fe fbc5 	bl	8002b7c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fe fbc1 	bl	8002b7c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e1b7      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004408:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ef      	bne.n	80043f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80a6 	beq.w	8004570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004424:	2300      	movs	r3, #0
 8004426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004428:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	6593      	str	r3, [r2, #88]	; 0x58
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_RCC_OscConfig+0x508>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d118      	bne.n	800448e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_OscConfig+0x508>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x508>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004468:	f7fe fb88 	bl	8002b7c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fe fb84 	bl	8002b7c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e17a      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_RCC_OscConfig+0x508>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4d8>
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a6:	e029      	b.n	80044fc <HAL_RCC_OscConfig+0x52c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d115      	bne.n	80044dc <HAL_RCC_OscConfig+0x50c>
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <HAL_RCC_OscConfig+0x504>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d0:	e014      	b.n	80044fc <HAL_RCC_OscConfig+0x52c>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
 80044dc:	4b9c      	ldr	r3, [pc, #624]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a9b      	ldr	r2, [pc, #620]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ec:	4b98      	ldr	r3, [pc, #608]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4a97      	ldr	r2, [pc, #604]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d016      	beq.n	8004532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fe fb3a 	bl	8002b7c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fe fb36 	bl	8002b7c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e12a      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004522:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ed      	beq.n	800450c <HAL_RCC_OscConfig+0x53c>
 8004530:	e015      	b.n	800455e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fe fb23 	bl	8002b7c <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fe fb1f 	bl	8002b7c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e113      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004550:	4b7f      	ldr	r3, [pc, #508]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ed      	bne.n	800453a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004564:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	4a79      	ldr	r2, [pc, #484]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 800456a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80fe 	beq.w	8004776 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	2b02      	cmp	r3, #2
 8004580:	f040 80d0 	bne.w	8004724 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004584:	4b72      	ldr	r3, [pc, #456]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0203 	and.w	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d130      	bne.n	80045fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	3b01      	subs	r3, #1
 80045a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d127      	bne.n	80045fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d11f      	bne.n	80045fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c4:	2a07      	cmp	r2, #7
 80045c6:	bf14      	ite	ne
 80045c8:	2201      	movne	r2, #1
 80045ca:	2200      	moveq	r2, #0
 80045cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d113      	bne.n	80045fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	3b01      	subs	r3, #1
 80045f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d06e      	beq.n	80046d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d069      	beq.n	80046d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0ad      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a4b      	ldr	r2, [pc, #300]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004628:	f7fe faa8 	bl	8002b7c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fe faa4 	bl	8002b7c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e09a      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004642:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800464e:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	4b40      	ldr	r3, [pc, #256]	; (8004754 <HAL_RCC_OscConfig+0x784>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800465e:	3a01      	subs	r2, #1
 8004660:	0112      	lsls	r2, r2, #4
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004668:	0212      	lsls	r2, r2, #8
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004670:	0852      	lsrs	r2, r2, #1
 8004672:	3a01      	subs	r2, #1
 8004674:	0552      	lsls	r2, r2, #21
 8004676:	4311      	orrs	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467c:	0852      	lsrs	r2, r2, #1
 800467e:	3a01      	subs	r2, #1
 8004680:	0652      	lsls	r2, r2, #25
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004688:	0912      	lsrs	r2, r2, #4
 800468a:	0452      	lsls	r2, r2, #17
 800468c:	430a      	orrs	r2, r1
 800468e:	4930      	ldr	r1, [pc, #192]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004690:	4313      	orrs	r3, r2
 8004692:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a2a      	ldr	r2, [pc, #168]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ac:	f7fe fa66 	bl	8002b7c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fa62 	bl	8002b7c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e058      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d2:	e050      	b.n	8004776 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e04f      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d148      	bne.n	8004776 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f0:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 80046f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046fc:	f7fe fa3e 	bl	8002b7c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fe fa3a 	bl	8002b7c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e030      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x734>
 8004722:	e028      	b.n	8004776 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d023      	beq.n	8004772 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a08      	ldr	r2, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x780>)
 8004730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe fa21 	bl	8002b7c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	e00c      	b.n	8004758 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473e:	f7fe fa1d 	bl	8002b7c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d905      	bls.n	8004758 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e013      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
 8004750:	40021000 	.word	0x40021000
 8004754:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_OscConfig+0x7b0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ec      	bne.n	800473e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_OscConfig+0x7b0>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4905      	ldr	r1, [pc, #20]	; (8004780 <HAL_RCC_OscConfig+0x7b0>)
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCC_OscConfig+0x7b4>)
 800476c:	4013      	ands	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
 8004770:	e001      	b.n	8004776 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	feeefffc 	.word	0xfeeefffc

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0e7      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b75      	ldr	r3, [pc, #468]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b72      	ldr	r3, [pc, #456]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4970      	ldr	r1, [pc, #448]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0cf      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	4b66      	ldr	r3, [pc, #408]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d908      	bls.n	80047fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4960      	ldr	r1, [pc, #384]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04c      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	4b5a      	ldr	r3, [pc, #360]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d121      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0a6      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d115      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e09a      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e08e      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484e:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e086      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4943      	ldr	r1, [pc, #268]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fe f984 	bl	8002b7c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fe f980 	bl	8002b7c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e06e      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d208      	bcs.n	80048ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	492b      	ldr	r1, [pc, #172]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d210      	bcs.n	80048fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 0207 	bic.w	r2, r3, #7
 80048e4:	4923      	ldr	r1, [pc, #140]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_RCC_ClockConfig+0x1ec>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e036      	b.n	800496c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	4918      	ldr	r1, [pc, #96]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4910      	ldr	r1, [pc, #64]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800493c:	f000 f824 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	490b      	ldr	r1, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x1f4>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1fc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe f8bb 	bl	8002adc <HAL_InitTick>
 8004966:	4603      	mov	r3, r0
 8004968:	72fb      	strb	r3, [r7, #11]

  return status;
 800496a:	7afb      	ldrb	r3, [r7, #11]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40022000 	.word	0x40022000
 8004978:	40021000 	.word	0x40021000
 800497c:	0800cfb4 	.word	0x0800cfb4
 8004980:	20000028 	.word	0x20000028
 8004984:	2000002c 	.word	0x2000002c

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	4b3e      	ldr	r3, [pc, #248]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a0:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x34>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d121      	bne.n	80049fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d11e      	bne.n	80049fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049bc:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e005      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049d8:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049e4:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e004      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a0c:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d134      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xac>
 8004a2c:	e005      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a30:	617b      	str	r3, [r7, #20]
      break;
 8004a32:	e005      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a36:	617b      	str	r3, [r7, #20]
      break;
 8004a38:	e002      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	617b      	str	r3, [r7, #20]
      break;
 8004a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	0e5b      	lsrs	r3, r3, #25
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	3301      	adds	r3, #1
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a80:	69bb      	ldr	r3, [r7, #24]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3724      	adds	r7, #36	; 0x24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800cfcc 	.word	0x0800cfcc
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	007a1200 	.word	0x007a1200

08004aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000028 	.word	0x20000028

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800cfc4 	.word	0x0800cfc4

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ae8:	f7ff ffda 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0adb      	lsrs	r3, r3, #11
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4904      	ldr	r1, [pc, #16]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	0800cfc4 	.word	0x0800cfc4

08004b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b28:	f7ff f9ee 	bl	8003f08 <HAL_PWREx_GetVoltageRange>
 8004b2c:	6178      	str	r0, [r7, #20]
 8004b2e:	e014      	b.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b30:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b48:	f7ff f9de 	bl	8003f08 <HAL_PWREx_GetVoltageRange>
 8004b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d10b      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d919      	bls.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2ba0      	cmp	r3, #160	; 0xa0
 8004b6c:	d902      	bls.n	8004b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b6e:	2302      	movs	r3, #2
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e013      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b74:	2301      	movs	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e010      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d902      	bls.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b80:	2303      	movs	r3, #3
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e00a      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d102      	bne.n	8004b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e004      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b70      	cmp	r3, #112	; 0x70
 8004b96:	d101      	bne.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b98:	2301      	movs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 0207 	bic.w	r2, r3, #7
 8004ba4:	4909      	ldr	r1, [pc, #36]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d041      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bf4:	d02a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bfa:	d824      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c00:	d008      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c06:	d81e      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c10:	d010      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c12:	e018      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c14:	4b86      	ldr	r3, [pc, #536]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a85      	ldr	r2, [pc, #532]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c20:	e015      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3304      	adds	r3, #4
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f829 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c32:	e00c      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3320      	adds	r3, #32
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f914 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	74fb      	strb	r3, [r7, #19]
      break;
 8004c4a:	e000      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c54:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c62:	4973      	ldr	r1, [pc, #460]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c6a:	e001      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d041      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c84:	d02a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c8a:	d824      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c96:	d81e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca0:	d010      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ca2:	e018      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ca4:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a61      	ldr	r2, [pc, #388]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cb0:	e015      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ffe1 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cc2:	e00c      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3320      	adds	r3, #32
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 f8cc 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	74fb      	strb	r3, [r7, #19]
      break;
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ce4:	4b52      	ldr	r3, [pc, #328]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf2:	494f      	ldr	r1, [pc, #316]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cfa:	e001      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	7cfb      	ldrb	r3, [r7, #19]
 8004cfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a0 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d12:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58
 8004d34:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d50:	f7fd ff14 	bl	8002b7c <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d56:	e009      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d58:	f7fd ff10 	bl	8002b7c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d902      	bls.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	74fb      	strb	r3, [r7, #19]
        break;
 8004d6a:	e005      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ef      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d15c      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d019      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004da8:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fd fecf 	bl	8002b7c <HAL_GetTick>
 8004dde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de0:	e00b      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fd fecb 	bl	8002b7c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d902      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	74fb      	strb	r3, [r7, #19]
            break;
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ec      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1e:	4904      	ldr	r1, [pc, #16]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e26:	e009      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	74bb      	strb	r3, [r7, #18]
 8004e2c:	e006      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3c:	7c7b      	ldrb	r3, [r7, #17]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b9e      	ldr	r3, [pc, #632]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4a9d      	ldr	r2, [pc, #628]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5a:	4b98      	ldr	r3, [pc, #608]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	4994      	ldr	r1, [pc, #592]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7c:	4b8f      	ldr	r3, [pc, #572]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 020c 	bic.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	498c      	ldr	r1, [pc, #560]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e9e:	4b87      	ldr	r3, [pc, #540]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	4983      	ldr	r1, [pc, #524]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec0:	4b7e      	ldr	r3, [pc, #504]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	497b      	ldr	r1, [pc, #492]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	4972      	ldr	r1, [pc, #456]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f04:	4b6d      	ldr	r3, [pc, #436]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	496a      	ldr	r1, [pc, #424]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	4961      	ldr	r1, [pc, #388]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f48:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	4959      	ldr	r1, [pc, #356]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6a:	4b54      	ldr	r3, [pc, #336]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	4950      	ldr	r1, [pc, #320]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	4948      	ldr	r1, [pc, #288]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fae:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	493f      	ldr	r1, [pc, #252]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d028      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	4937      	ldr	r1, [pc, #220]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fee:	d106      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	4b32      	ldr	r3, [pc, #200]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a31      	ldr	r2, [pc, #196]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffa:	60d3      	str	r3, [r2, #12]
 8004ffc:	e011      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005006:	d10c      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	2101      	movs	r1, #1
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fe36 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d028      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	491f      	ldr	r1, [pc, #124]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504c:	d106      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005058:	60d3      	str	r3, [r2, #12]
 800505a:	e011      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005064:	d10c      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fe07 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005076:	7cfb      	ldrb	r3, [r7, #19]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509a:	4908      	ldr	r1, [pc, #32]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050aa:	d109      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a02      	ldr	r2, [pc, #8]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b6:	60d3      	str	r3, [r2, #12]
 80050b8:	e014      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	2101      	movs	r1, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fdd5 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02f      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fe:	4928      	ldr	r1, [pc, #160]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510e:	d10d      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fdb2 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d014      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	74bb      	strb	r3, [r7, #18]
 800512a:	e011      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005134:	d10c      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3320      	adds	r3, #32
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fe93 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800515c:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516a:	490d      	ldr	r1, [pc, #52]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800518e:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005196:	7cbb      	ldrb	r3, [r7, #18]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000

080051a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b6:	d13e      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80051b8:	4bb2      	ldr	r3, [pc, #712]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ca:	d028      	beq.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d2:	f200 8542 	bhi.w	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d005      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e4:	d00e      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80051e6:	f000 bd38 	b.w	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051ea:	4ba6      	ldr	r3, [pc, #664]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f040 8532 	bne.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80051fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fe:	61fb      	str	r3, [r7, #28]
      break;
 8005200:	f000 bd2d 	b.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005204:	4b9f      	ldr	r3, [pc, #636]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	f040 8527 	bne.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8005214:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005218:	61fb      	str	r3, [r7, #28]
      break;
 800521a:	f000 bd22 	b.w	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800521e:	4b99      	ldr	r3, [pc, #612]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522a:	f040 851c 	bne.w	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800522e:	4b96      	ldr	r3, [pc, #600]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005230:	61fb      	str	r3, [r7, #28]
      break;
 8005232:	f000 bd18 	b.w	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005236:	4b93      	ldr	r3, [pc, #588]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d036      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d840      	bhi.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d003      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d020      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005258:	e039      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800525a:	4b8a      	ldr	r3, [pc, #552]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d116      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005266:	4b87      	ldr	r3, [pc, #540]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005272:	4b84      	ldr	r3, [pc, #528]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	e005      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800527e:	4b81      	ldr	r3, [pc, #516]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	4a80      	ldr	r2, [pc, #512]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005292:	e01f      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	61bb      	str	r3, [r7, #24]
      break;
 8005298:	e01c      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800529a:	4b7a      	ldr	r3, [pc, #488]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d102      	bne.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80052a8:	4b79      	ldr	r3, [pc, #484]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80052aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80052ac:	e012      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
      break;
 80052b2:	e00f      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052b4:	4b73      	ldr	r3, [pc, #460]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c0:	d102      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80052c2:	4b74      	ldr	r3, [pc, #464]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
      break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
      break;
 80052d2:	bf00      	nop
    }

    switch(PeriphClk)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052da:	f000 80dd 	beq.w	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052e4:	f200 84c1 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ee:	f000 80d3 	beq.w	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052f8:	f200 84b7 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	f000 835f 	beq.w	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530c:	f200 84ad 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	f000 847e 	beq.w	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005320:	f200 84a3 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532a:	f000 82cd 	beq.w	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005334:	f200 8499 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	f000 80ab 	beq.w	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005348:	f200 848f 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	f000 8090 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535c:	f200 8485 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005366:	d07f      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536e:	f200 847c 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005378:	f000 8403 	beq.w	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005382:	f200 8472 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538c:	f000 83af 	beq.w	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005396:	f200 8468 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a0:	f000 8379 	beq.w	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	f200 845e 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	f000 8344 	beq.w	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	f200 8456 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d84b      	bhi.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 844f 	beq.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	2b1f      	cmp	r3, #31
 80053d2:	f200 844a 	bhi.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080055c5 	.word	0x080055c5
 80053e0:	08005633 	.word	0x08005633
 80053e4:	08005c6b 	.word	0x08005c6b
 80053e8:	080056c7 	.word	0x080056c7
 80053ec:	08005c6b 	.word	0x08005c6b
 80053f0:	08005c6b 	.word	0x08005c6b
 80053f4:	08005c6b 	.word	0x08005c6b
 80053f8:	0800574d 	.word	0x0800574d
 80053fc:	08005c6b 	.word	0x08005c6b
 8005400:	08005c6b 	.word	0x08005c6b
 8005404:	08005c6b 	.word	0x08005c6b
 8005408:	08005c6b 	.word	0x08005c6b
 800540c:	08005c6b 	.word	0x08005c6b
 8005410:	08005c6b 	.word	0x08005c6b
 8005414:	08005c6b 	.word	0x08005c6b
 8005418:	080057c5 	.word	0x080057c5
 800541c:	08005c6b 	.word	0x08005c6b
 8005420:	08005c6b 	.word	0x08005c6b
 8005424:	08005c6b 	.word	0x08005c6b
 8005428:	08005c6b 	.word	0x08005c6b
 800542c:	08005c6b 	.word	0x08005c6b
 8005430:	08005c6b 	.word	0x08005c6b
 8005434:	08005c6b 	.word	0x08005c6b
 8005438:	08005c6b 	.word	0x08005c6b
 800543c:	08005c6b 	.word	0x08005c6b
 8005440:	08005c6b 	.word	0x08005c6b
 8005444:	08005c6b 	.word	0x08005c6b
 8005448:	08005c6b 	.word	0x08005c6b
 800544c:	08005c6b 	.word	0x08005c6b
 8005450:	08005c6b 	.word	0x08005c6b
 8005454:	08005c6b 	.word	0x08005c6b
 8005458:	08005847 	.word	0x08005847
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	f000 82c1 	beq.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005464:	f000 bc01 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005468:	69b9      	ldr	r1, [r7, #24]
 800546a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800546e:	f000 fdd9 	bl	8006024 <RCCEx_GetSAIxPeriphCLKFreq>
 8005472:	61f8      	str	r0, [r7, #28]
      break;
 8005474:	e3fa      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800547c:	f000 fdd2 	bl	8006024 <RCCEx_GetSAIxPeriphCLKFreq>
 8005480:	61f8      	str	r0, [r7, #28]
      break;
 8005482:	e3f3      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005484:	40021000 	.word	0x40021000
 8005488:	0003d090 	.word	0x0003d090
 800548c:	0800cfcc 	.word	0x0800cfcc
 8005490:	00f42400 	.word	0x00f42400
 8005494:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005498:	4ba9      	ldr	r3, [pc, #676]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054aa:	d00c      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054b2:	d87f      	bhi.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ba:	d04e      	beq.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c2:	d01d      	beq.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80054c4:	e076      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054c6:	4b9e      	ldr	r3, [pc, #632]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d172      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80054d2:	4b9b      	ldr	r3, [pc, #620]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80054de:	4b98      	ldr	r3, [pc, #608]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	e005      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80054ea:	4b95      	ldr	r3, [pc, #596]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	4a93      	ldr	r2, [pc, #588]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	61fb      	str	r3, [r7, #28]
          break;
 80054fe:	e05b      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005500:	4b8f      	ldr	r3, [pc, #572]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800550c:	d156      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800550e:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d14f      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800551c:	4b88      	ldr	r3, [pc, #544]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	fb03 f202 	mul.w	r2, r3, r2
 8005530:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	3301      	adds	r3, #1
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005542:	4b7f      	ldr	r3, [pc, #508]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	0d5b      	lsrs	r3, r3, #21
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	3301      	adds	r3, #1
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	61fb      	str	r3, [r7, #28]
          break;
 8005558:	e030      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800555a:	4b79      	ldr	r3, [pc, #484]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005566:	d12b      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005568:	4b75      	ldr	r3, [pc, #468]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005574:	d124      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005576:	4b72      	ldr	r3, [pc, #456]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	4b6d      	ldr	r3, [pc, #436]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	3301      	adds	r3, #1
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800559c:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	0d5b      	lsrs	r3, r3, #21
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	3301      	adds	r3, #1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	61fb      	str	r3, [r7, #28]
          break;
 80055b2:	e005      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80055b4:	bf00      	nop
 80055b6:	e359      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055b8:	bf00      	nop
 80055ba:	e357      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055bc:	bf00      	nop
 80055be:	e355      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055c0:	bf00      	nop
        break;
 80055c2:	e353      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80055c4:	4b5e      	ldr	r3, [pc, #376]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d827      	bhi.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055f5 	.word	0x080055f5
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005611 	.word	0x08005611
          frequency = HAL_RCC_GetPCLK2Freq();
 80055ec:	f7ff fa7a 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 80055f0:	61f8      	str	r0, [r7, #28]
          break;
 80055f2:	e01d      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80055f4:	f7ff f9c8 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80055f8:	61f8      	str	r0, [r7, #28]
          break;
 80055fa:	e019      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055fc:	4b50      	ldr	r3, [pc, #320]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d10f      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800560a:	4b4f      	ldr	r3, [pc, #316]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800560c:	61fb      	str	r3, [r7, #28]
          break;
 800560e:	e00c      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d107      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	61fb      	str	r3, [r7, #28]
          break;
 8005624:	e003      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005626:	bf00      	nop
 8005628:	e320      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800562a:	bf00      	nop
 800562c:	e31e      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800562e:	bf00      	nop
        break;
 8005630:	e31c      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005632:	4b43      	ldr	r3, [pc, #268]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d83a      	bhi.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005681 	.word	0x08005681
 8005650:	080056bb 	.word	0x080056bb
 8005654:	080056bb 	.word	0x080056bb
 8005658:	080056bb 	.word	0x080056bb
 800565c:	08005689 	.word	0x08005689
 8005660:	080056bb 	.word	0x080056bb
 8005664:	080056bb 	.word	0x080056bb
 8005668:	080056bb 	.word	0x080056bb
 800566c:	08005691 	.word	0x08005691
 8005670:	080056bb 	.word	0x080056bb
 8005674:	080056bb 	.word	0x080056bb
 8005678:	080056bb 	.word	0x080056bb
 800567c:	080056a5 	.word	0x080056a5
          frequency = HAL_RCC_GetPCLK1Freq();
 8005680:	f7ff fa1a 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005684:	61f8      	str	r0, [r7, #28]
          break;
 8005686:	e01d      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005688:	f7ff f97e 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800568c:	61f8      	str	r0, [r7, #28]
          break;
 800568e:	e019      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005690:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d10f      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800569e:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80056a0:	61fb      	str	r3, [r7, #28]
          break;
 80056a2:	e00c      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d107      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61fb      	str	r3, [r7, #28]
          break;
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80056ba:	bf00      	nop
 80056bc:	e2d6      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056be:	bf00      	nop
 80056c0:	e2d4      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056c2:	bf00      	nop
        break;
 80056c4:	e2d2      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b30      	cmp	r3, #48	; 0x30
 80056d6:	d021      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b30      	cmp	r3, #48	; 0x30
 80056dc:	d829      	bhi.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d011      	beq.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d823      	bhi.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d004      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80056f6:	e01c      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7ff f9de 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80056fc:	61f8      	str	r0, [r7, #28]
          break;
 80056fe:	e01d      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005700:	f7ff f942 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8005704:	61f8      	str	r0, [r7, #28]
          break;
 8005706:	e019      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005714:	d10f      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005718:	61fb      	str	r3, [r7, #28]
          break;
 800571a:	e00c      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d107      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	61fb      	str	r3, [r7, #28]
          break;
 8005730:	e003      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8005732:	bf00      	nop
 8005734:	e29a      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005736:	bf00      	nop
 8005738:	e298      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800573a:	bf00      	nop
        break;
 800573c:	e296      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	0800cfcc 	.word	0x0800cfcc
 8005748:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800574c:	4b9b      	ldr	r3, [pc, #620]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2bc0      	cmp	r3, #192	; 0xc0
 800575c:	d021      	beq.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2bc0      	cmp	r3, #192	; 0xc0
 8005762:	d829      	bhi.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d011      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d823      	bhi.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d004      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800577c:	e01c      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800577e:	f7ff f99b 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005782:	61f8      	str	r0, [r7, #28]
          break;
 8005784:	e01d      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005786:	f7ff f8ff 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800578a:	61f8      	str	r0, [r7, #28]
          break;
 800578c:	e019      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800578e:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579a:	d10f      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 800579c:	4b88      	ldr	r3, [pc, #544]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800579e:	61fb      	str	r3, [r7, #28]
          break;
 80057a0:	e00c      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057a2:	4b86      	ldr	r3, [pc, #536]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d107      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80057b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b4:	61fb      	str	r3, [r7, #28]
          break;
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80057b8:	bf00      	nop
 80057ba:	e257      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057bc:	bf00      	nop
 80057be:	e255      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057c0:	bf00      	nop
        break;
 80057c2:	e253      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80057c4:	4b7d      	ldr	r3, [pc, #500]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d6:	d025      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057de:	d82c      	bhi.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e6:	d013      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ee:	d824      	bhi.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d004      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80057fe:	e01c      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005800:	f7ff f95a 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
          break;
 8005806:	e01d      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005808:	f7ff f8be 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800580c:	61f8      	str	r0, [r7, #28]
          break;
 800580e:	e019      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005810:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581c:	d10f      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800581e:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005820:	61fb      	str	r3, [r7, #28]
          break;
 8005822:	e00c      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d107      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	61fb      	str	r3, [r7, #28]
          break;
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800583a:	bf00      	nop
 800583c:	e216      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800583e:	bf00      	nop
 8005840:	e214      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005842:	bf00      	nop
        break;
 8005844:	e212      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005858:	d025      	beq.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005860:	d82c      	bhi.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d013      	beq.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005870:	d824      	bhi.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d004      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005880:	e01c      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005882:	f7ff f919 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005886:	61f8      	str	r0, [r7, #28]
          break;
 8005888:	e01d      	b.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800588a:	f7ff f87d 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800588e:	61f8      	str	r0, [r7, #28]
          break;
 8005890:	e019      	b.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d10f      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80058a0:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80058a2:	61fb      	str	r3, [r7, #28]
          break;
 80058a4:	e00c      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058a6:	4b45      	ldr	r3, [pc, #276]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d107      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80058b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b8:	61fb      	str	r3, [r7, #28]
          break;
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80058bc:	bf00      	nop
 80058be:	e1d5      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80058c0:	bf00      	nop
 80058c2:	e1d3      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80058c4:	bf00      	nop
        break;
 80058c6:	e1d1      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80058c8:	4b3c      	ldr	r3, [pc, #240]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058da:	d00c      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058e2:	d864      	bhi.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ea:	d008      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f2:	d030      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80058f4:	e05b      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80058f6:	f7ff f847 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80058fa:	61f8      	str	r0, [r7, #28]
          break;
 80058fc:	e05c      	b.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590a:	d152      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d04c      	beq.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	fb03 f202 	mul.w	r2, r3, r2
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	3301      	adds	r3, #1
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800593e:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	0e5b      	lsrs	r3, r3, #25
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	3301      	adds	r3, #1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	61fb      	str	r3, [r7, #28]
          break;
 8005954:	e02d      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005956:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005962:	d128      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005964:	4b15      	ldr	r3, [pc, #84]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d022      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	fb03 f202 	mul.w	r2, r3, r2
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	3301      	adds	r3, #1
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	0e5b      	lsrs	r3, r3, #25
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	3301      	adds	r3, #1
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61fb      	str	r3, [r7, #28]
          break;
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80059ae:	bf00      	nop
 80059b0:	e15c      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80059b2:	bf00      	nop
 80059b4:	e15a      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80059b6:	bf00      	nop
        break;
 80059b8:	e158      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80059c4:	4b9d      	ldr	r3, [pc, #628]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80059d6:	f7ff f885 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 80059da:	61f8      	str	r0, [r7, #28]
        break;
 80059dc:	e146      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80059de:	f7fe ffd3 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80059e2:	61f8      	str	r0, [r7, #28]
        break;
 80059e4:	e142      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80059e6:	4b95      	ldr	r3, [pc, #596]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d013      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a00:	d819      	bhi.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d004      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005a10:	e011      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a12:	f7ff f851 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005a16:	61f8      	str	r0, [r7, #28]
          break;
 8005a18:	e010      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a1a:	f7fe ffb5 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8005a1e:	61f8      	str	r0, [r7, #28]
          break;
 8005a20:	e00c      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a22:	4b86      	ldr	r3, [pc, #536]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2e:	d104      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005a30:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005a32:	61fb      	str	r3, [r7, #28]
          break;
 8005a34:	e001      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005a36:	bf00      	nop
 8005a38:	e118      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a3a:	bf00      	nop
        break;
 8005a3c:	e116      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a3e:	4b7f      	ldr	r3, [pc, #508]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a50:	d013      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a58:	d819      	bhi.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a66:	d004      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005a68:	e011      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a6a:	f7ff f825 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005a6e:	61f8      	str	r0, [r7, #28]
          break;
 8005a70:	e010      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a72:	f7fe ff89 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8005a76:	61f8      	str	r0, [r7, #28]
          break;
 8005a78:	e00c      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a7a:	4b70      	ldr	r3, [pc, #448]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d104      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005a88:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005a8a:	61fb      	str	r3, [r7, #28]
          break;
 8005a8c:	e001      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005a8e:	bf00      	nop
 8005a90:	e0ec      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a92:	bf00      	nop
        break;
 8005a94:	e0ea      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005a96:	4b69      	ldr	r3, [pc, #420]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa8:	d013      	beq.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ab0:	d819      	bhi.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abe:	d004      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005ac0:	e011      	b.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ac2:	f7fe fff9 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005ac6:	61f8      	str	r0, [r7, #28]
          break;
 8005ac8:	e010      	b.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005aca:	f7fe ff5d 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8005ace:	61f8      	str	r0, [r7, #28]
          break;
 8005ad0:	e00c      	b.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad2:	4b5a      	ldr	r3, [pc, #360]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ade:	d104      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005ae0:	4b57      	ldr	r3, [pc, #348]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005ae2:	61fb      	str	r3, [r7, #28]
          break;
 8005ae4:	e001      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005ae6:	bf00      	nop
 8005ae8:	e0c0      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005aea:	bf00      	nop
        break;
 8005aec:	e0be      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005aee:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b00:	d02c      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b08:	d833      	bhi.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b10:	d01a      	beq.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b18:	d82b      	bhi.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005b28:	e023      	b.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7fe ffc5 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005b2e:	61f8      	str	r0, [r7, #28]
          break;
 8005b30:	e026      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005b32:	4b42      	ldr	r3, [pc, #264]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11a      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005b40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b44:	61fb      	str	r3, [r7, #28]
          break;
 8005b46:	e016      	b.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b48:	4b3c      	ldr	r3, [pc, #240]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b54:	d111      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8005b56:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005b58:	61fb      	str	r3, [r7, #28]
          break;
 8005b5a:	e00e      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b5c:	4b37      	ldr	r3, [pc, #220]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d109      	bne.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	61fb      	str	r3, [r7, #28]
          break;
 8005b70:	e005      	b.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005b72:	bf00      	nop
 8005b74:	e07a      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b76:	bf00      	nop
 8005b78:	e078      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b7a:	bf00      	nop
 8005b7c:	e076      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b7e:	bf00      	nop
        break;
 8005b80:	e074      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005b82:	4b2e      	ldr	r3, [pc, #184]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b94:	d02c      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b9c:	d833      	bhi.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba4:	d01a      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bac:	d82b      	bhi.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bba:	d004      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005bbc:	e023      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bbe:	f7fe ff7b 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005bc2:	61f8      	str	r0, [r7, #28]
          break;
 8005bc4:	e026      	b.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11a      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005bd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005bd8:	61fb      	str	r3, [r7, #28]
          break;
 8005bda:	e016      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bdc:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d111      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005bec:	61fb      	str	r3, [r7, #28]
          break;
 8005bee:	e00e      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bf0:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d109      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	61fb      	str	r3, [r7, #28]
          break;
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005c06:	bf00      	nop
 8005c08:	e030      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c0a:	bf00      	nop
 8005c0c:	e02e      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c0e:	bf00      	nop
 8005c10:	e02c      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c12:	bf00      	nop
        break;
 8005c14:	e02a      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d009      	beq.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005c30:	e012      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c32:	f7fe ff41 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8005c36:	61f8      	str	r0, [r7, #28]
          break;
 8005c38:	e00e      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d101      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c54:	61fb      	str	r3, [r7, #28]
          break;
 8005c56:	bf00      	nop
        break;
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005c6a:	bf00      	nop
    }
  }

  return(frequency);
 8005c6c:	69fb      	ldr	r3, [r7, #28]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	00f42400 	.word	0x00f42400

08005c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c8e:	4b75      	ldr	r3, [pc, #468]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c9a:	4b72      	ldr	r3, [pc, #456]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10d      	bne.n	8005cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
       ||
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cb2:	4b6c      	ldr	r3, [pc, #432]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d047      	beq.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	e044      	b.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d018      	beq.n	8005d06 <RCCEx_PLLSAI1_Config+0x86>
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d825      	bhi.n	8005d24 <RCCEx_PLLSAI1_Config+0xa4>
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d002      	beq.n	8005ce2 <RCCEx_PLLSAI1_Config+0x62>
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d009      	beq.n	8005cf4 <RCCEx_PLLSAI1_Config+0x74>
 8005ce0:	e020      	b.n	8005d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ce2:	4b60      	ldr	r3, [pc, #384]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11d      	bne.n	8005d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf2:	e01a      	b.n	8005d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d116      	bne.n	8005d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d04:	e013      	b.n	8005d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10f      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d12:	4b54      	ldr	r3, [pc, #336]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d22:	e006      	b.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
      break;
 8005d28:	e004      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d3a:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	4944      	ldr	r1, [pc, #272]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d17d      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d5c:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a40      	ldr	r2, [pc, #256]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fc ff08 	bl	8002b7c <HAL_GetTick>
 8005d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d6e:	e009      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d70:	f7fc ff04 	bl	8002b7c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d902      	bls.n	8005d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	73fb      	strb	r3, [r7, #15]
        break;
 8005d82:	e005      	b.n	8005d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d84:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ef      	bne.n	8005d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d160      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d111      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d9c:	4b31      	ldr	r3, [pc, #196]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	0211      	lsls	r1, r2, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68d2      	ldr	r2, [r2, #12]
 8005db2:	0912      	lsrs	r2, r2, #4
 8005db4:	0452      	lsls	r2, r2, #17
 8005db6:	430a      	orrs	r2, r1
 8005db8:	492a      	ldr	r1, [pc, #168]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]
 8005dbe:	e027      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d112      	bne.n	8005dec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dc6:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005dce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6892      	ldr	r2, [r2, #8]
 8005dd6:	0211      	lsls	r1, r2, #8
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6912      	ldr	r2, [r2, #16]
 8005ddc:	0852      	lsrs	r2, r2, #1
 8005dde:	3a01      	subs	r2, #1
 8005de0:	0552      	lsls	r2, r2, #21
 8005de2:	430a      	orrs	r2, r1
 8005de4:	491f      	ldr	r1, [pc, #124]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	610b      	str	r3, [r1, #16]
 8005dea:	e011      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005df4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6892      	ldr	r2, [r2, #8]
 8005dfc:	0211      	lsls	r1, r2, #8
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6952      	ldr	r2, [r2, #20]
 8005e02:	0852      	lsrs	r2, r2, #1
 8005e04:	3a01      	subs	r2, #1
 8005e06:	0652      	lsls	r2, r2, #25
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	4916      	ldr	r1, [pc, #88]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1c:	f7fc feae 	bl	8002b7c <HAL_GetTick>
 8005e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e22:	e009      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e24:	f7fc feaa 	bl	8002b7c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d902      	bls.n	8005e38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	73fb      	strb	r3, [r7, #15]
          break;
 8005e36:	e005      	b.n	8005e44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0ef      	beq.n	8005e24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	4904      	ldr	r1, [pc, #16]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000

08005e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e76:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d018      	beq.n	8005eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e82:	4b67      	ldr	r3, [pc, #412]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0203 	and.w	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d10d      	bne.n	8005eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
       ||
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e9a:	4b61      	ldr	r3, [pc, #388]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d047      	beq.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	e044      	b.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d018      	beq.n	8005eee <RCCEx_PLLSAI2_Config+0x86>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d825      	bhi.n	8005f0c <RCCEx_PLLSAI2_Config+0xa4>
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d002      	beq.n	8005eca <RCCEx_PLLSAI2_Config+0x62>
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d009      	beq.n	8005edc <RCCEx_PLLSAI2_Config+0x74>
 8005ec8:	e020      	b.n	8005f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eca:	4b55      	ldr	r3, [pc, #340]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11d      	bne.n	8005f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eda:	e01a      	b.n	8005f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005edc:	4b50      	ldr	r3, [pc, #320]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d116      	bne.n	8005f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eec:	e013      	b.n	8005f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005efa:	4b49      	ldr	r3, [pc, #292]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f0a:	e006      	b.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e004      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10d      	bne.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6819      	ldr	r1, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	430b      	orrs	r3, r1
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d167      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f44:	4b36      	ldr	r3, [pc, #216]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a35      	ldr	r2, [pc, #212]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f50:	f7fc fe14 	bl	8002b7c <HAL_GetTick>
 8005f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f56:	e009      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f58:	f7fc fe10 	bl	8002b7c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d902      	bls.n	8005f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6a:	e005      	b.n	8005f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ef      	bne.n	8005f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d14a      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d111      	bne.n	8005fa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6892      	ldr	r2, [r2, #8]
 8005f94:	0211      	lsls	r1, r2, #8
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	0912      	lsrs	r2, r2, #4
 8005f9c:	0452      	lsls	r2, r2, #17
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	491f      	ldr	r1, [pc, #124]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	614b      	str	r3, [r1, #20]
 8005fa6:	e011      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6892      	ldr	r2, [r2, #8]
 8005fb8:	0211      	lsls	r1, r2, #8
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6912      	ldr	r2, [r2, #16]
 8005fbe:	0852      	lsrs	r2, r2, #1
 8005fc0:	3a01      	subs	r2, #1
 8005fc2:	0652      	lsls	r2, r2, #25
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	4916      	ldr	r1, [pc, #88]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fc fdd0 	bl	8002b7c <HAL_GetTick>
 8005fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fde:	e009      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fe0:	f7fc fdcc 	bl	8002b7c <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d902      	bls.n	8005ff4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ff2:	e005      	b.n	8006000 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0ef      	beq.n	8005fe0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4904      	ldr	r1, [pc, #16]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006010:	4313      	orrs	r3, r2
 8006012:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	; 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006040:	d10c      	bne.n	800605c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006042:	4b6e      	ldr	r3, [pc, #440]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800604c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006054:	d112      	bne.n	800607c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006056:	4b6a      	ldr	r3, [pc, #424]	; (8006200 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e00f      	b.n	800607c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d10b      	bne.n	800607c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006064:	4b65      	ldr	r3, [pc, #404]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800606e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006076:	d101      	bne.n	800607c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006078:	4b61      	ldr	r3, [pc, #388]	; (8006200 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800607a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 80b4 	bne.w	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800608e:	d003      	beq.n	8006098 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006096:	d135      	bne.n	8006104 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006098:	4b58      	ldr	r3, [pc, #352]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a4:	f040 80a1 	bne.w	80061ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80060a8:	4b54      	ldr	r3, [pc, #336]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809a 	beq.w	80061ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060b6:	4b51      	ldr	r3, [pc, #324]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	3301      	adds	r3, #1
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060ca:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80060dc:	4b47      	ldr	r3, [pc, #284]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80060e8:	2311      	movs	r3, #17
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e001      	b.n	80060f2 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80060ee:	2307      	movs	r3, #7
 80060f0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	fb03 f202 	mul.w	r2, r3, r2
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006102:	e072      	b.n	80061ea <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d133      	bne.n	8006172 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800610a:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006116:	d169      	bne.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006118:	4b38      	ldr	r3, [pc, #224]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d063      	beq.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006124:	4b35      	ldr	r3, [pc, #212]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	3301      	adds	r3, #1
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006138:	4b30      	ldr	r3, [pc, #192]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006142:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800614a:	4b2c      	ldr	r3, [pc, #176]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8006156:	2311      	movs	r3, #17
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e001      	b.n	8006160 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800615c:	2307      	movs	r3, #7
 800615e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	fb03 f202 	mul.w	r2, r3, r2
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e03c      	b.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006178:	d003      	beq.n	8006182 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006180:	d134      	bne.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800618a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618e:	d12d      	bne.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006190:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d027      	beq.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800619c:	4b17      	ldr	r3, [pc, #92]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	3301      	adds	r3, #1
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	0a1b      	lsrs	r3, r3, #8
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80061c2:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80061ce:	2311      	movs	r3, #17
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e001      	b.n	80061d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80061d4:	2307      	movs	r3, #7
 80061d6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	fb03 f202 	mul.w	r2, r3, r2
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e000      	b.n	80061ec <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80061ea:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80061ec:	69fb      	ldr	r3, [r7, #28]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3724      	adds	r7, #36	; 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40021000 	.word	0x40021000
 8006200:	001fff68 	.word	0x001fff68

08006204 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d079      	beq.n	800630a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb febc 	bl	8001fa8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d058      	beq.n	80062f8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	22ca      	movs	r2, #202	; 0xca
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2253      	movs	r2, #83	; 0x53
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9a4 	bl	80065a4 <RTC_EnterInitMode>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d127      	bne.n	80062b6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006278:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6899      	ldr	r1, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68d2      	ldr	r2, [r2, #12]
 80062a0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6919      	ldr	r1, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	041a      	lsls	r2, r3, #16
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f9a8 	bl	800660c <RTC_ExitInitMode>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d113      	bne.n	80062ee <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0203 	bic.w	r2, r2, #3
 80062d4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	22ff      	movs	r2, #255	; 0xff
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
 80062f6:	e001      	b.n	80062fc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_RTC_SetTime+0x1a>
 800632a:	2302      	movs	r3, #2
 800632c:	e08b      	b.n	8006446 <HAL_RTC_SetTime+0x132>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	22ca      	movs	r2, #202	; 0xca
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2253      	movs	r2, #83	; 0x53
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f928 	bl	80065a4 <RTC_EnterInitMode>
 8006354:	4603      	mov	r3, r0
 8006356:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d163      	bne.n	8006426 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d126      	bne.n	80063b2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f983 	bl	8006688 <RTC_ByteToBcd2>
 8006382:	4603      	mov	r3, r0
 8006384:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f97c 	bl	8006688 <RTC_ByteToBcd2>
 8006390:	4603      	mov	r3, r0
 8006392:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006394:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	789b      	ldrb	r3, [r3, #2]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f974 	bl	8006688 <RTC_ByteToBcd2>
 80063a0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063a2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e018      	b.n	80063e4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063d2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063d8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80063ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006402:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	431a      	orrs	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f8f5 	bl	800660c <RTC_ExitInitMode>
 8006422:	4603      	mov	r3, r0
 8006424:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	22ff      	movs	r2, #255	; 0xff
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006444:	7cfb      	ldrb	r3, [r7, #19]
}
 8006446:	4618      	mov	r0, r3
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}

0800644e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800644e:	b590      	push	{r4, r7, lr}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_RTC_SetDate+0x1a>
 8006464:	2302      	movs	r3, #2
 8006466:	e075      	b.n	8006554 <HAL_RTC_SetDate+0x106>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10e      	bne.n	800649c <HAL_RTC_SetDate+0x4e>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	f023 0310 	bic.w	r3, r3, #16
 8006492:	b2db      	uxtb	r3, r3
 8006494:	330a      	adds	r3, #10
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11c      	bne.n	80064dc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	78db      	ldrb	r3, [r3, #3]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f8ee 	bl	8006688 <RTC_ByteToBcd2>
 80064ac:	4603      	mov	r3, r0
 80064ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f8e7 	bl	8006688 <RTC_ByteToBcd2>
 80064ba:	4603      	mov	r3, r0
 80064bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	789b      	ldrb	r3, [r3, #2]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f8df 	bl	8006688 <RTC_ByteToBcd2>
 80064ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e00e      	b.n	80064fa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064e8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	22ca      	movs	r2, #202	; 0xca
 8006500:	625a      	str	r2, [r3, #36]	; 0x24
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2253      	movs	r2, #83	; 0x53
 8006508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f84a 	bl	80065a4 <RTC_EnterInitMode>
 8006510:	4603      	mov	r3, r0
 8006512:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10c      	bne.n	8006534 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006524:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006528:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f86e 	bl	800660c <RTC_ExitInitMode>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006552:	7cfb      	ldrb	r3, [r7, #19]
}
 8006554:	4618      	mov	r0, r3
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}

0800655c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <HAL_RTC_WaitForSynchro+0x44>)
 800656a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800656c:	f7fc fb06 	bl	8002b7c <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006572:	e009      	b.n	8006588 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006574:	f7fc fb02 	bl	8002b7c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006582:	d901      	bls.n	8006588 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e007      	b.n	8006598 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ee      	beq.n	8006574 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	0003ff5f 	.word	0x0003ff5f

080065a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d120      	bne.n	8006600 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295
 80065c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065c8:	f7fc fad8 	bl	8002b7c <HAL_GetTick>
 80065cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065ce:	e00d      	b.n	80065ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80065d0:	f7fc fad4 	bl	8002b7c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065de:	d905      	bls.n	80065ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2203      	movs	r2, #3
 80065e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <RTC_EnterInitMode+0x5c>
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d1e7      	bne.n	80065d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <RTC_ExitInitMode+0x78>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <RTC_ExitInitMode+0x78>)
 800661e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006622:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <RTC_ExitInitMode+0x78>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff93 	bl	800655c <HAL_RTC_WaitForSynchro>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01e      	beq.n	800667a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2203      	movs	r2, #3
 8006640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e017      	b.n	800667a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800664a:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <RTC_ExitInitMode+0x78>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <RTC_ExitInitMode+0x78>)
 8006650:	f023 0320 	bic.w	r3, r3, #32
 8006654:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff ff80 	bl	800655c <HAL_RTC_WaitForSynchro>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <RTC_ExitInitMode+0x78>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	4a04      	ldr	r2, [pc, #16]	; (8006684 <RTC_ExitInitMode+0x78>)
 8006674:	f043 0320 	orr.w	r3, r3, #32
 8006678:	6093      	str	r3, [r2, #8]
  }

  return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40002800 	.word	0x40002800

08006688 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800669a:	e005      	b.n	80066a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	3b0a      	subs	r3, #10
 80066a6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d8f6      	bhi.n	800669c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e022      	b.n	8006720 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fb fceb 	bl	80020c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2203      	movs	r2, #3
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f814 	bl	8006728 <HAL_SD_InitCard>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e00a      	b.n	8006720 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006728:	b5b0      	push	{r4, r5, r7, lr}
 800672a:	b08e      	sub	sp, #56	; 0x38
 800672c:	af04      	add	r7, sp, #16
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006730:	2300      	movs	r3, #0
 8006732:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006744:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006748:	f7fe fd2c 	bl	80051a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800674c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e07b      	b.n	8006860 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	09db      	lsrs	r3, r3, #7
 800676c:	4a3e      	ldr	r2, [pc, #248]	; (8006868 <HAL_SD_InitCard+0x140>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	3b02      	subs	r3, #2
 8006776:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681d      	ldr	r5, [r3, #0]
 800677c:	466c      	mov	r4, sp
 800677e:	f107 0314 	add.w	r3, r7, #20
 8006782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006790:	4628      	mov	r0, r5
 8006792:	f002 ff4e 	bl	8009632 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 ff8c 	bl	80096c8 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067be:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3302      	adds	r3, #2
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80067cc:	4a27      	ldr	r2, [pc, #156]	; (800686c <HAL_SD_InitCard+0x144>)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	3301      	adds	r3, #1
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fc f9dc 	bl	8002b94 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fe6b 	bl	80074b8 <SD_PowerON>
 80067e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e02e      	b.n	8006860 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fd8a 	bl	800731c <SD_InitCard>
 8006808:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e01b      	b.n	8006860 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006830:	4618      	mov	r0, r3
 8006832:	f002 ffdc 	bl	80097ee <SDMMC_CmdBlockLength>
 8006836:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00f      	beq.n	800685e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <HAL_SD_InitCard+0x148>)
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3728      	adds	r7, #40	; 0x28
 8006864:	46bd      	mov	sp, r7
 8006866:	bdb0      	pop	{r4, r5, r7, pc}
 8006868:	014f8b59 	.word	0x014f8b59
 800686c:	00012110 	.word	0x00012110
 8006870:	004005ff 	.word	0x004005ff

08006874 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b092      	sub	sp, #72	; 0x48
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006882:	f7fc f97b 	bl	8002b7c <HAL_GetTick>
 8006886:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e1bd      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	f040 81b0 	bne.w	8006c14 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	441a      	add	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d907      	bls.n	80068d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e1a4      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2203      	movs	r2, #3
 80068dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2200      	movs	r2, #0
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d002      	beq.n	80068f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	025b      	lsls	r3, r3, #9
 80068f4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006902:	2390      	movs	r3, #144	; 0x90
 8006904:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006906:	2302      	movs	r3, #2
 8006908:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800690e:	2301      	movs	r3, #1
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f107 0214 	add.w	r2, r7, #20
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f002 ff3a 	bl	8009796 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d90a      	bls.n	800693e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2202      	movs	r2, #2
 800692c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006934:	4618      	mov	r0, r3
 8006936:	f002 ff9e 	bl	8009876 <SDMMC_CmdReadMultiBlock>
 800693a:	6478      	str	r0, [r7, #68]	; 0x44
 800693c:	e009      	b.n	8006952 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800694a:	4618      	mov	r0, r3
 800694c:	f002 ff71 	bl	8009832 <SDMMC_CmdReadSingleBlock>
 8006950:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006954:	2b00      	cmp	r3, #0
 8006956:	d012      	beq.n	800697e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a7a      	ldr	r2, [pc, #488]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006966:	431a      	orrs	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e151      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006982:	e061      	b.n	8006a48 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d03c      	beq.n	8006a0c <HAL_SD_ReadBlocks+0x198>
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d039      	beq.n	8006a0c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006998:	2300      	movs	r3, #0
 800699a:	643b      	str	r3, [r7, #64]	; 0x40
 800699c:	e033      	b.n	8006a06 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f002 fe72 	bl	800968c <SDMMC_ReadFIFO>
 80069a8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	3301      	adds	r3, #1
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ba:	3b01      	subs	r3, #1
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	3301      	adds	r3, #1
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	3b01      	subs	r3, #1
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	3301      	adds	r3, #1
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e6:	3b01      	subs	r3, #1
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	0e1b      	lsrs	r3, r3, #24
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	3301      	adds	r3, #1
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	3b01      	subs	r3, #1
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a02:	3301      	adds	r3, #1
 8006a04:	643b      	str	r3, [r7, #64]	; 0x40
 8006a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a08:	2b07      	cmp	r3, #7
 8006a0a:	d9c8      	bls.n	800699e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a0c:	f7fc f8b6 	bl	8002b7c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <HAL_SD_ReadBlocks+0x1ae>
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d112      	bne.n	8006a48 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a48      	ldr	r2, [pc, #288]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e0ec      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d096      	beq.n	8006984 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d022      	beq.n	8006aaa <HAL_SD_ReadBlocks+0x236>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d91f      	bls.n	8006aaa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d01b      	beq.n	8006aaa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 ff64 	bl	8009944 <SDMMC_CmdStopTransfer>
 8006a7c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d012      	beq.n	8006aaa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0bb      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	f043 0208 	orr.w	r2, r3, #8
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0a1      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d012      	beq.n	8006b12 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	f043 0202 	orr.w	r2, r3, #2
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e087      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d064      	beq.n	8006bea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <HAL_SD_ReadBlocks+0x2d4>)
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e06d      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
 8006b46:	bf00      	nop
 8006b48:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f002 fd9b 	bl	800968c <SDMMC_ReadFIFO>
 8006b56:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b62:	3301      	adds	r3, #1
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	3301      	adds	r3, #1
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8e:	3301      	adds	r3, #1
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	3b01      	subs	r3, #1
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	0e1b      	lsrs	r3, r3, #24
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	3b01      	subs	r3, #1
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006bae:	f7fb ffe5 	bl	8002b7c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d902      	bls.n	8006bc4 <HAL_SD_ReadBlocks+0x350>
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d112      	bne.n	8006bea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <HAL_SD_ReadBlocks+0x3b8>)
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e01b      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_SD_ReadBlocks+0x38a>
 8006bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1a6      	bne.n	8006b4c <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e006      	b.n	8006c22 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3748      	adds	r7, #72	; 0x48
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	004005ff 	.word	0x004005ff

08006c30 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b092      	sub	sp, #72	; 0x48
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c3e:	f7fb ff9d 	bl	8002b7c <HAL_GetTick>
 8006c42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e165      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	f040 8158 	bne.w	8006f20 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	441a      	add	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d907      	bls.n	8006c94 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e14c      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2203      	movs	r2, #3
 8006c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d002      	beq.n	8006cb2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	025b      	lsls	r3, r3, #9
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cbe:	2390      	movs	r3, #144	; 0x90
 8006cc0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f107 0218 	add.w	r2, r7, #24
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f002 fd5c 	bl	8009796 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d90a      	bls.n	8006cfa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fe04 	bl	80098fe <SDMMC_CmdWriteMultiBlock>
 8006cf6:	6478      	str	r0, [r7, #68]	; 0x44
 8006cf8:	e009      	b.n	8006d0e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d06:	4618      	mov	r0, r3
 8006d08:	f002 fdd7 	bl	80098ba <SDMMC_CmdWriteSingleBlock>
 8006d0c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a87      	ldr	r2, [pc, #540]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0f9      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d3e:	e065      	b.n	8006e0c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d040      	beq.n	8006dd0 <HAL_SD_WriteBlocks+0x1a0>
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d03d      	beq.n	8006dd0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	643b      	str	r3, [r7, #64]	; 0x40
 8006d58:	e037      	b.n	8006dca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	3301      	adds	r3, #1
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	021a      	lsls	r2, r3, #8
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d80:	3b01      	subs	r3, #1
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	041a      	lsls	r2, r3, #16
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	3301      	adds	r3, #1
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	061a      	lsls	r2, r3, #24
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	3301      	adds	r3, #1
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db0:	3b01      	subs	r3, #1
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f107 0214 	add.w	r2, r7, #20
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fc71 	bl	80096a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	2b07      	cmp	r3, #7
 8006dce:	d9c4      	bls.n	8006d5a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006dd0:	f7fb fed4 	bl	8002b7c <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d902      	bls.n	8006de6 <HAL_SD_WriteBlocks+0x1b6>
 8006de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d112      	bne.n	8006e0c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a53      	ldr	r2, [pc, #332]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e090      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d092      	beq.n	8006d40 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <HAL_SD_WriteBlocks+0x23e>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d91f      	bls.n	8006e6e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d01b      	beq.n	8006e6e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 fd82 	bl	8009944 <SDMMC_CmdStopTransfer>
 8006e40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d012      	beq.n	8006e6e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3a      	ldr	r2, [pc, #232]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e56:	431a      	orrs	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e05f      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d012      	beq.n	8006ea2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2d      	ldr	r2, [pc, #180]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	f043 0208 	orr.w	r2, r3, #8
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e045      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f043 0202 	orr.w	r2, r3, #2
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e02b      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d012      	beq.n	8006f0a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <HAL_SD_WriteBlocks+0x308>)
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e011      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e006      	b.n	8006f2e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3748      	adds	r7, #72	; 0x48
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	004005ff 	.word	0x004005ff

08006f3c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f4a:	0f9b      	lsrs	r3, r3, #30
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f56:	0e9b      	lsrs	r3, r3, #26
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f68:	0e1b      	lsrs	r3, r3, #24
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fba:	0bdb      	lsrs	r3, r3, #15
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fcc:	0b9b      	lsrs	r3, r3, #14
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fde:	0b5b      	lsrs	r3, r3, #13
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	0b1b      	lsrs	r3, r3, #12
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2200      	movs	r2, #0
 8007002:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	2b00      	cmp	r3, #0
 800700a:	d163      	bne.n	80070d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007010:	009a      	lsls	r2, r3, #2
 8007012:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007016:	4013      	ands	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800701c:	0f92      	lsrs	r2, r2, #30
 800701e:	431a      	orrs	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007028:	0edb      	lsrs	r3, r3, #27
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	b2da      	uxtb	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703a:	0e1b      	lsrs	r3, r3, #24
 800703c:	b2db      	uxtb	r3, r3
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	b2da      	uxtb	r2, r3
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704c:	0d5b      	lsrs	r3, r3, #21
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	b2da      	uxtb	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705e:	0c9b      	lsrs	r3, r3, #18
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007070:	0bdb      	lsrs	r3, r3, #15
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	b2da      	uxtb	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	7e1b      	ldrb	r3, [r3, #24]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	3302      	adds	r3, #2
 8007094:	2201      	movs	r2, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800709e:	fb03 f202 	mul.w	r2, r3, r2
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	7a1b      	ldrb	r3, [r3, #8]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	2201      	movs	r2, #1
 80070b2:	409a      	lsls	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80070c0:	0a52      	lsrs	r2, r2, #9
 80070c2:	fb03 f202 	mul.w	r2, r3, r2
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d0:	661a      	str	r2, [r3, #96]	; 0x60
 80070d2:	e031      	b.n	8007138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d11d      	bne.n	8007118 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ea:	0c1b      	lsrs	r3, r3, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	3301      	adds	r3, #1
 80070f8:	029a      	lsls	r2, r3, #10
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800710c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	661a      	str	r2, [r3, #96]	; 0x60
 8007116:	e00f      	b.n	8007138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a58      	ldr	r2, [pc, #352]	; (8007280 <HAL_SD_GetCardCSD+0x344>)
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e09d      	b.n	8007274 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800713c:	0b9b      	lsrs	r3, r3, #14
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	b2da      	uxtb	r2, r3
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800714e:	09db      	lsrs	r3, r3, #7
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	b2da      	uxtb	r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007166:	b2da      	uxtb	r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007170:	0fdb      	lsrs	r3, r3, #31
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	0f5b      	lsrs	r3, r3, #29
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	0e9b      	lsrs	r3, r3, #26
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	b2da      	uxtb	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a0:	0d9b      	lsrs	r3, r3, #22
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	0d5b      	lsrs	r3, r3, #21
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	0bdb      	lsrs	r3, r3, #15
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	0b9b      	lsrs	r3, r3, #14
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	0b5b      	lsrs	r3, r3, #13
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	0b1b      	lsrs	r3, r3, #12
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	0a9b      	lsrs	r3, r3, #10
 8007234:	b2db      	uxtb	r3, r3
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	b2da      	uxtb	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	b2da      	uxtb	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	b2da      	uxtb	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	004005ff 	.word	0x004005ff

08007284 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f970 	bl	80075d4 <SD_SendStatus>
 80072f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0a5b      	lsrs	r3, r3, #9
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007312:	693b      	ldr	r3, [r7, #16]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b094      	sub	sp, #80	; 0x50
 8007320:	af04      	add	r7, sp, #16
 8007322:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007324:	2301      	movs	r3, #1
 8007326:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f002 f9da 	bl	80096e6 <SDMMC_GetPowerState>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007338:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800733c:	e0b8      	b.n	80074b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	2b03      	cmp	r3, #3
 8007344:	d02f      	beq.n	80073a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f002 fbc1 	bl	8009ad2 <SDMMC_CmdSendCID>
 8007350:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <SD_InitCard+0x40>
    {
      return errorstate;
 8007358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735a:	e0a9      	b.n	80074b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f002 fa04 	bl	8009770 <SDMMC_GetResponse>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2104      	movs	r1, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f9fb 	bl	8009770 <SDMMC_GetResponse>
 800737a:	4602      	mov	r2, r0
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2108      	movs	r1, #8
 8007386:	4618      	mov	r0, r3
 8007388:	f002 f9f2 	bl	8009770 <SDMMC_GetResponse>
 800738c:	4602      	mov	r2, r0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	210c      	movs	r1, #12
 8007398:	4618      	mov	r0, r3
 800739a:	f002 f9e9 	bl	8009770 <SDMMC_GetResponse>
 800739e:	4602      	mov	r2, r0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d00d      	beq.n	80073ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f107 020e 	add.w	r2, r7, #14
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f002 fbc7 	bl	8009b4c <SDMMC_CmdSetRelAdd>
 80073be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <SD_InitCard+0xae>
    {
      return errorstate;
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	e072      	b.n	80074b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d036      	beq.n	8007440 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80073d2:	89fb      	ldrh	r3, [r7, #14]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f002 fb91 	bl	8009b0e <SDMMC_CmdSendCSD>
 80073ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80073f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f6:	e05b      	b.n	80074b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 f9b6 	bl	8009770 <SDMMC_GetResponse>
 8007404:	4602      	mov	r2, r0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2104      	movs	r1, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f002 f9ad 	bl	8009770 <SDMMC_GetResponse>
 8007416:	4602      	mov	r2, r0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2108      	movs	r1, #8
 8007422:	4618      	mov	r0, r3
 8007424:	f002 f9a4 	bl	8009770 <SDMMC_GetResponse>
 8007428:	4602      	mov	r2, r0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	210c      	movs	r1, #12
 8007434:	4618      	mov	r0, r3
 8007436:	f002 f99b 	bl	8009770 <SDMMC_GetResponse>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2104      	movs	r1, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f992 	bl	8009770 <SDMMC_GetResponse>
 800744c:	4603      	mov	r3, r0
 800744e:	0d1a      	lsrs	r2, r3, #20
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fd6e 	bl	8006f3c <HAL_SD_GetCardCSD>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007466:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800746a:	e021      	b.n	80074b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	2200      	movs	r2, #0
 8007478:	461c      	mov	r4, r3
 800747a:	4615      	mov	r5, r2
 800747c:	4622      	mov	r2, r4
 800747e:	462b      	mov	r3, r5
 8007480:	4608      	mov	r0, r1
 8007482:	f002 fa81 	bl	8009988 <SDMMC_CmdSelDesel>
 8007486:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <SD_InitCard+0x176>
  {
    return errorstate;
 800748e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007490:	e00e      	b.n	80074b0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	466c      	mov	r4, sp
 800749a:	f103 0210 	add.w	r2, r3, #16
 800749e:	ca07      	ldmia	r2, {r0, r1, r2}
 80074a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074a4:	3304      	adds	r3, #4
 80074a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074a8:	4628      	mov	r0, r5
 80074aa:	f002 f8c2 	bl	8009632 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3740      	adds	r7, #64	; 0x40
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bdb0      	pop	{r4, r5, r7, pc}

080074b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fa7c 	bl	80099ce <SDMMC_CmdGoIdleState>
 80074d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	e072      	b.n	80075c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f002 fa8f 	bl	8009a0a <SDMMC_CmdOperCond>
 80074ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00d      	beq.n	8007510 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 fa65 	bl	80099ce <SDMMC_CmdGoIdleState>
 8007504:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <SD_PowerON+0x5e>
    {
      return errorstate;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	e05b      	b.n	80075c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	2b01      	cmp	r3, #1
 800751c:	d137      	bne.n	800758e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f002 fa8f 	bl	8009a48 <SDMMC_CmdAppCommand>
 800752a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02d      	beq.n	800758e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007536:	e047      	b.n	80075c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f002 fa82 	bl	8009a48 <SDMMC_CmdAppCommand>
 8007544:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <SD_PowerON+0x98>
    {
      return errorstate;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	e03b      	b.n	80075c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	491e      	ldr	r1, [pc, #120]	; (80075d0 <SD_PowerON+0x118>)
 8007556:	4618      	mov	r0, r3
 8007558:	f002 fa98 	bl	8009a8c <SDMMC_CmdAppOperCommand>
 800755c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007564:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007568:	e02e      	b.n	80075c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f002 f8fd 	bl	8009770 <SDMMC_GetResponse>
 8007576:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	0fdb      	lsrs	r3, r3, #31
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <SD_PowerON+0xcc>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <SD_PowerON+0xce>
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]

    count++;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3301      	adds	r3, #1
 800758c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007594:	4293      	cmp	r3, r2
 8007596:	d802      	bhi.n	800759e <SD_PowerON+0xe6>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0cc      	beq.n	8007538 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d902      	bls.n	80075ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ac:	e00c      	b.n	80075c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	645a      	str	r2, [r3, #68]	; 0x44
 80075be:	e002      	b.n	80075c6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	c1100000 	.word	0xc1100000

080075d4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80075e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e8:	e018      	b.n	800761c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f002 fac9 	bl	8009b8e <SDMMC_CmdSendStatus>
 80075fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	e009      	b.n	800761c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f002 f8ae 	bl	8009770 <SDMMC_GetResponse>
 8007614:	4602      	mov	r2, r0
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e095      	b.n	8007762 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d108      	bne.n	8007650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007646:	d009      	beq.n	800765c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	61da      	str	r2, [r3, #28]
 800764e:	e005      	b.n	800765c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fa fdf8 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800769c:	d902      	bls.n	80076a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e002      	b.n	80076aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80076b2:	d007      	beq.n	80076c4 <HAL_SPI_Init+0xa0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	ea42 0103 	orr.w	r1, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	0c1b      	lsrs	r3, r3, #16
 8007720:	f003 0204 	and.w	r2, r3, #4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007740:	ea42 0103 	orr.w	r1, r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b088      	sub	sp, #32
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_SPI_Transmit+0x22>
 8007788:	2302      	movs	r3, #2
 800778a:	e15f      	b.n	8007a4c <HAL_SPI_Transmit+0x2e2>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007794:	f7fb f9f2 	bl	8002b7c <HAL_GetTick>
 8007798:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
 80077ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077ae:	e148      	b.n	8007a42 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_Transmit+0x52>
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077c0:	e13f      	b.n	8007a42 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2203      	movs	r2, #3
 80077c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88fa      	ldrh	r2, [r7, #6]
 80077da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	88fa      	ldrh	r2, [r7, #6]
 80077e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800780c:	d10f      	bne.n	800782e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800782c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b40      	cmp	r3, #64	; 0x40
 800783a:	d007      	beq.n	800784c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007854:	d94f      	bls.n	80078f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_SPI_Transmit+0xfa>
 800785e:	8afb      	ldrh	r3, [r7, #22]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d142      	bne.n	80078ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007888:	e02f      	b.n	80078ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d112      	bne.n	80078be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	881a      	ldrh	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078bc:	e015      	b.n	80078ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078be:	f7fb f95d 	bl	8002b7c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d803      	bhi.n	80078d6 <HAL_SPI_Transmit+0x16c>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Transmit+0x172>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80078e8:	e0ab      	b.n	8007a42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ca      	bne.n	800788a <HAL_SPI_Transmit+0x120>
 80078f4:	e080      	b.n	80079f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_SPI_Transmit+0x19a>
 80078fe:	8afb      	ldrh	r3, [r7, #22]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d174      	bne.n	80079ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	d912      	bls.n	8007934 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	881a      	ldrh	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	1c9a      	adds	r2, r3, #2
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b02      	subs	r3, #2
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007932:	e05c      	b.n	80079ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800795a:	e048      	b.n	80079ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	d12b      	bne.n	80079c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	d912      	bls.n	800799a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	881a      	ldrh	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	1c9a      	adds	r2, r3, #2
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b02      	subs	r3, #2
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007998:	e029      	b.n	80079ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	330c      	adds	r3, #12
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c0:	e015      	b.n	80079ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c2:	f7fb f8db 	bl	8002b7c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d803      	bhi.n	80079da <HAL_SPI_Transmit+0x270>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d102      	bne.n	80079e0 <HAL_SPI_Transmit+0x276>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d106      	bne.n	80079ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80079ec:	e029      	b.n	8007a42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1b1      	bne.n	800795c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 facd 	bl	8007f9c <SPI_EndRxTxTransaction>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e003      	b.n	8007a42 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3720      	adds	r7, #32
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_SPI_Transmit_DMA+0x20>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e0d4      	b.n	8007c1e <HAL_SPI_Transmit_DMA+0x1ca>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d002      	beq.n	8007a8e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
 8007a8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a8c:	e0c2      	b.n	8007c14 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_SPI_Transmit_DMA+0x46>
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a9e:	e0b9      	b.n	8007c14 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	88fa      	ldrh	r2, [r7, #6]
 8007ab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	88fa      	ldrh	r2, [r7, #6]
 8007abe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aea:	d10f      	bne.n	8007b0c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	4a45      	ldr	r2, [pc, #276]	; (8007c28 <HAL_SPI_Transmit_DMA+0x1d4>)
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	4a44      	ldr	r2, [pc, #272]	; (8007c2c <HAL_SPI_Transmit_DMA+0x1d8>)
 8007b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	4a43      	ldr	r2, [pc, #268]	; (8007c30 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	2200      	movs	r2, #0
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b3a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b44:	d82d      	bhi.n	8007ba2 <HAL_SPI_Transmit_DMA+0x14e>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b50:	d127      	bne.n	8007ba2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10f      	bne.n	8007b80 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b6e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b7e:	e010      	b.n	8007ba2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	4619      	mov	r1, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007bba:	f7fb f9d9 	bl	8002f70 <HAL_DMA_Start_IT>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	f043 0210 	orr.w	r2, r3, #16
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007bd4:	e01e      	b.n	8007c14 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d007      	beq.n	8007bf4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0220 	orr.w	r2, r2, #32
 8007c02:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0202 	orr.w	r2, r2, #2
 8007c12:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08007d03 	.word	0x08007d03
 8007c2c:	08007c5d 	.word	0x08007c5d
 8007c30:	08007d1f 	.word	0x08007d1f

08007c34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c6a:	f7fa ff87 	bl	8002b7c <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d03b      	beq.n	8007cf6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0220 	bic.w	r2, r2, #32
 8007c8c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0202 	bic.w	r2, r2, #2
 8007c9c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	2164      	movs	r1, #100	; 0x64
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f000 f97a 	bl	8007f9c <SPI_EndRxTxTransaction>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f7ff ffaa 	bl	8007c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cf4:	e002      	b.n	8007cfc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7f9 fd72 	bl	80017e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff ff8f 	bl	8007c34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0203 	bic.w	r2, r2, #3
 8007d3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d40:	f043 0210 	orr.w	r2, r3, #16
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff ff79 	bl	8007c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d70:	f7fa ff04 	bl	8002b7c <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d80:	f7fa fefc 	bl	8002b7c <HAL_GetTick>
 8007d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d86:	4b39      	ldr	r3, [pc, #228]	; (8007e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	015b      	lsls	r3, r3, #5
 8007d8c:	0d1b      	lsrs	r3, r3, #20
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	fb02 f303 	mul.w	r3, r2, r3
 8007d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d96:	e054      	b.n	8007e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d050      	beq.n	8007e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007da0:	f7fa feec 	bl	8002b7c <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d902      	bls.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d13d      	bne.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dce:	d111      	bne.n	8007df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd8:	d004      	beq.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de2:	d107      	bne.n	8007df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfc:	d10f      	bne.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e017      	b.n	8007e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d19b      	bne.n	8007d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000028 	.word	0x20000028

08007e70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e82:	f7fa fe7b 	bl	8002b7c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	4413      	add	r3, r2
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007e92:	f7fa fe73 	bl	8002b7c <HAL_GetTick>
 8007e96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ea0:	4b3d      	ldr	r3, [pc, #244]	; (8007f98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	00da      	lsls	r2, r3, #3
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	0d1b      	lsrs	r3, r3, #20
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007eb8:	e060      	b.n	8007f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ec0:	d107      	bne.n	8007ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d050      	beq.n	8007f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eda:	f7fa fe4f 	bl	8002b7c <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d902      	bls.n	8007ef0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d13d      	bne.n	8007f6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007efe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f08:	d111      	bne.n	8007f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f12:	d004      	beq.n	8007f1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d107      	bne.n	8007f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f36:	d10f      	bne.n	8007f58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e010      	b.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4013      	ands	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d196      	bne.n	8007eba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000028 	.word	0x20000028

08007f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff ff5b 	bl	8007e70 <SPI_WaitFifoStateUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e027      	b.n	8008020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fec0 	bl	8007d60 <SPI_WaitFlagStateUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fea:	f043 0220 	orr.w	r2, r3, #32
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e014      	b.n	8008020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff ff34 	bl	8007e70 <SPI_WaitFifoStateUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e000      	b.n	8008020 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e049      	b.n	80080ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fa fb7e 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	4619      	mov	r1, r3
 8008066:	4610      	mov	r0, r2
 8008068:	f000 fade 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d001      	beq.n	80080f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e047      	b.n	8008180 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a23      	ldr	r2, [pc, #140]	; (800818c <HAL_TIM_Base_Start+0xb4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01d      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810a:	d018      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1f      	ldr	r2, [pc, #124]	; (8008190 <HAL_TIM_Base_Start+0xb8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1e      	ldr	r2, [pc, #120]	; (8008194 <HAL_TIM_Base_Start+0xbc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <HAL_TIM_Base_Start+0xc0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1b      	ldr	r2, [pc, #108]	; (800819c <HAL_TIM_Base_Start+0xc4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_TIM_Base_Start+0x66>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <HAL_TIM_Base_Start+0xc8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d115      	bne.n	800816a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <HAL_TIM_Base_Start+0xcc>)
 8008146:	4013      	ands	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b06      	cmp	r3, #6
 800814e:	d015      	beq.n	800817c <HAL_TIM_Base_Start+0xa4>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008156:	d011      	beq.n	800817c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008168:	e008      	b.n	800817c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	e000      	b.n	800817e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40013400 	.word	0x40013400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	00010007 	.word	0x00010007

080081a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d001      	beq.n	80081c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e04f      	b.n	8008260 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a23      	ldr	r2, [pc, #140]	; (800826c <HAL_TIM_Base_Start_IT+0xc4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01d      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d018      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <HAL_TIM_Base_Start_IT+0xc8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <HAL_TIM_Base_Start_IT+0xcc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00e      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1c      	ldr	r2, [pc, #112]	; (8008278 <HAL_TIM_Base_Start_IT+0xd0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d009      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1b      	ldr	r2, [pc, #108]	; (800827c <HAL_TIM_Base_Start_IT+0xd4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d004      	beq.n	800821e <HAL_TIM_Base_Start_IT+0x76>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a19      	ldr	r2, [pc, #100]	; (8008280 <HAL_TIM_Base_Start_IT+0xd8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d115      	bne.n	800824a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <HAL_TIM_Base_Start_IT+0xdc>)
 8008226:	4013      	ands	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b06      	cmp	r3, #6
 800822e:	d015      	beq.n	800825c <HAL_TIM_Base_Start_IT+0xb4>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008236:	d011      	beq.n	800825c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008248:	e008      	b.n	800825c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e000      	b.n	800825e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40014000 	.word	0x40014000
 8008284:	00010007 	.word	0x00010007

08008288 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e097      	b.n	80083cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d106      	bne.n	80082b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7fa fa87 	bl	80027c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80082cc:	f023 0307 	bic.w	r3, r3, #7
 80082d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f000 f9a3 	bl	8008628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	4313      	orrs	r3, r2
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008328:	f023 030c 	bic.w	r3, r3, #12
 800832c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	4313      	orrs	r3, r2
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	011a      	lsls	r2, r3, #4
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	031b      	lsls	r3, r3, #12
 8008358:	4313      	orrs	r3, r2
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4313      	orrs	r3, r2
 800835e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	4313      	orrs	r3, r2
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d020      	beq.n	8008438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01b      	beq.n	8008438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f06f 0202 	mvn.w	r2, #2
 8008408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8e4 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 8008424:	e005      	b.n	8008432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8d6 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f8e7 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d020      	beq.n	8008484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0204 	mvn.w	r2, #4
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f8be 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8b0 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8c1 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0208 	mvn.w	r2, #8
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2204      	movs	r2, #4
 80084a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f898 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 80084bc:	e005      	b.n	80084ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f88a 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f89b 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d020      	beq.n	800851c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0210 	mvn.w	r2, #16
 80084ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2208      	movs	r2, #8
 80084f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f872 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 8008508:	e005      	b.n	8008516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f864 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f875 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f06f 0201 	mvn.w	r2, #1
 8008538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7f9 f960 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00c      	beq.n	8008564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800855c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f98e 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f986 	bl	8008894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f834 	bl	8008614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00c      	beq.n	80085d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0220 	mvn.w	r2, #32
 80085c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f94e 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a40      	ldr	r2, [pc, #256]	; (800873c <TIM_Base_SetConfig+0x114>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a3d      	ldr	r2, [pc, #244]	; (8008740 <TIM_Base_SetConfig+0x118>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a3c      	ldr	r2, [pc, #240]	; (8008744 <TIM_Base_SetConfig+0x11c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a3b      	ldr	r2, [pc, #236]	; (8008748 <TIM_Base_SetConfig+0x120>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a3a      	ldr	r2, [pc, #232]	; (800874c <TIM_Base_SetConfig+0x124>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d108      	bne.n	800867a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2f      	ldr	r2, [pc, #188]	; (800873c <TIM_Base_SetConfig+0x114>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008688:	d01b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2c      	ldr	r2, [pc, #176]	; (8008740 <TIM_Base_SetConfig+0x118>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d017      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a2b      	ldr	r2, [pc, #172]	; (8008744 <TIM_Base_SetConfig+0x11c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <TIM_Base_SetConfig+0x120>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a29      	ldr	r2, [pc, #164]	; (800874c <TIM_Base_SetConfig+0x124>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a28      	ldr	r2, [pc, #160]	; (8008750 <TIM_Base_SetConfig+0x128>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a27      	ldr	r2, [pc, #156]	; (8008754 <TIM_Base_SetConfig+0x12c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a26      	ldr	r2, [pc, #152]	; (8008758 <TIM_Base_SetConfig+0x130>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d108      	bne.n	80086d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a10      	ldr	r2, [pc, #64]	; (800873c <TIM_Base_SetConfig+0x114>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00f      	beq.n	8008720 <TIM_Base_SetConfig+0xf8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a12      	ldr	r2, [pc, #72]	; (800874c <TIM_Base_SetConfig+0x124>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00b      	beq.n	8008720 <TIM_Base_SetConfig+0xf8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a11      	ldr	r2, [pc, #68]	; (8008750 <TIM_Base_SetConfig+0x128>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d007      	beq.n	8008720 <TIM_Base_SetConfig+0xf8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <TIM_Base_SetConfig+0x12c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d003      	beq.n	8008720 <TIM_Base_SetConfig+0xf8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a0f      	ldr	r2, [pc, #60]	; (8008758 <TIM_Base_SetConfig+0x130>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d103      	bne.n	8008728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	615a      	str	r2, [r3, #20]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40012c00 	.word	0x40012c00
 8008740:	40000400 	.word	0x40000400
 8008744:	40000800 	.word	0x40000800
 8008748:	40000c00 	.word	0x40000c00
 800874c:	40013400 	.word	0x40013400
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800

0800875c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008770:	2302      	movs	r3, #2
 8008772:	e068      	b.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a2e      	ldr	r2, [pc, #184]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d108      	bne.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d01d      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e6:	d018      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1b      	ldr	r2, [pc, #108]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d013      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00e      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a13      	ldr	r2, [pc, #76]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d004      	beq.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a14      	ldr	r2, [pc, #80]	; (8008868 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d10c      	bne.n	8008834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	4313      	orrs	r3, r2
 800882a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40013400 	.word	0x40013400
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40014000 	.word	0x40014000

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e040      	b.n	800893c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fa f822 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fc8a 	bl	8009208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9cf 	bl	8008c98 <UART_SetConfig>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e01b      	b.n	800893c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fd09 	bl	800934c <UART_CheckIdleState>
 800893a:	4603      	mov	r3, r0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e048      	b.n	80089e8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7f9 ffd4 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2224      	movs	r2, #36	; 0x24
 8008970:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fc3c 	bl	8009208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f981 	bl	8008c98 <UART_SetConfig>
 8008996:	4603      	mov	r3, r0
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e023      	b.n	80089e8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80089be:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0208 	orr.w	r2, r2, #8
 80089ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0201 	orr.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fcb3 	bl	800934c <UART_CheckIdleState>
 80089e6:	4603      	mov	r3, r0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d178      	bne.n	8008afa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_UART_Transmit+0x24>
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e071      	b.n	8008afc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2221      	movs	r2, #33	; 0x21
 8008a24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a26:	f7fa f8a9 	bl	8002b7c <HAL_GetTick>
 8008a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88fa      	ldrh	r2, [r7, #6]
 8008a30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a44:	d108      	bne.n	8008a58 <HAL_UART_Transmit+0x68>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e003      	b.n	8008a60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a60:	e030      	b.n	8008ac4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fd15 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d004      	beq.n	8008a82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e03c      	b.n	8008afc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a94:	b292      	uxth	r2, r2
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e008      	b.n	8008ab2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	b292      	uxth	r2, r2
 8008aaa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	3b01      	subs	r3, #1
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1c8      	bne.n	8008a62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 fcde 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e005      	b.n	8008afc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e000      	b.n	8008afc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008afa:	2302      	movs	r3, #2
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	; 0x28
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	f040 80b6 	bne.w	8008c8c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_UART_Receive+0x28>
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0ae      	b.n	8008c8e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2222      	movs	r2, #34	; 0x22
 8008b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b46:	f7fa f819 	bl	8002b7c <HAL_GetTick>
 8008b4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b64:	d10e      	bne.n	8008b84 <HAL_UART_Receive+0x80>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <HAL_UART_Receive+0x76>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b78:	e02d      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	22ff      	movs	r2, #255	; 0xff
 8008b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b82:	e028      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10d      	bne.n	8008ba8 <HAL_UART_Receive+0xa4>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <HAL_UART_Receive+0x9a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	22ff      	movs	r2, #255	; 0xff
 8008b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b9c:	e01b      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	227f      	movs	r2, #127	; 0x7f
 8008ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ba6:	e016      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb0:	d10d      	bne.n	8008bce <HAL_UART_Receive+0xca>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <HAL_UART_Receive+0xc0>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	227f      	movs	r2, #127	; 0x7f
 8008bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bc2:	e008      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	223f      	movs	r2, #63	; 0x3f
 8008bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bcc:	e003      	b.n	8008bd6 <HAL_UART_Receive+0xd2>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bdc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be6:	d108      	bne.n	8008bfa <HAL_UART_Receive+0xf6>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e003      	b.n	8008c02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008c02:	e037      	b.n	8008c74 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2120      	movs	r1, #32
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 fc44 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e033      	b.n	8008c8e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	8a7b      	ldrh	r3, [r7, #18]
 8008c36:	4013      	ands	r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	3302      	adds	r3, #2
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e00d      	b.n	8008c62 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	8a7b      	ldrh	r3, [r7, #18]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	4013      	ands	r3, r2
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1c1      	bne.n	8008c04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e000      	b.n	8008c8e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
  }
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c9c:	b08a      	sub	sp, #40	; 0x28
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4ba4      	ldr	r3, [pc, #656]	; (8008f58 <UART_SetConfig+0x2c0>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	6812      	ldr	r2, [r2, #0]
 8008cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a99      	ldr	r2, [pc, #612]	; (8008f5c <UART_SetConfig+0x2c4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d00:	4313      	orrs	r3, r2
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d14:	430a      	orrs	r2, r1
 8008d16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a90      	ldr	r2, [pc, #576]	; (8008f60 <UART_SetConfig+0x2c8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d126      	bne.n	8008d70 <UART_SetConfig+0xd8>
 8008d22:	4b90      	ldr	r3, [pc, #576]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d81b      	bhi.n	8008d68 <UART_SetConfig+0xd0>
 8008d30:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <UART_SetConfig+0xa0>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d49 	.word	0x08008d49
 8008d3c:	08008d59 	.word	0x08008d59
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d61 	.word	0x08008d61
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d4e:	e116      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008d50:	2302      	movs	r3, #2
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d56:	e112      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d5e:	e10e      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008d60:	2308      	movs	r3, #8
 8008d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d66:	e10a      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d6e:	e106      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a7c      	ldr	r2, [pc, #496]	; (8008f68 <UART_SetConfig+0x2d0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d138      	bne.n	8008dec <UART_SetConfig+0x154>
 8008d7a:	4b7a      	ldr	r3, [pc, #488]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d80:	f003 030c 	and.w	r3, r3, #12
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d82d      	bhi.n	8008de4 <UART_SetConfig+0x14c>
 8008d88:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <UART_SetConfig+0xf8>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008dc5 	.word	0x08008dc5
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	08008de5 	.word	0x08008de5
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008dd5 	.word	0x08008dd5
 8008da4:	08008de5 	.word	0x08008de5
 8008da8:	08008de5 	.word	0x08008de5
 8008dac:	08008de5 	.word	0x08008de5
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008de5 	.word	0x08008de5
 8008dbc:	08008de5 	.word	0x08008de5
 8008dc0:	08008ddd 	.word	0x08008ddd
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dca:	e0d8      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd2:	e0d4      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dda:	e0d0      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de2:	e0cc      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008de4:	2310      	movs	r3, #16
 8008de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dea:	e0c8      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a5e      	ldr	r2, [pc, #376]	; (8008f6c <UART_SetConfig+0x2d4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d125      	bne.n	8008e42 <UART_SetConfig+0x1aa>
 8008df6:	4b5b      	ldr	r3, [pc, #364]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e00:	2b30      	cmp	r3, #48	; 0x30
 8008e02:	d016      	beq.n	8008e32 <UART_SetConfig+0x19a>
 8008e04:	2b30      	cmp	r3, #48	; 0x30
 8008e06:	d818      	bhi.n	8008e3a <UART_SetConfig+0x1a2>
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d00a      	beq.n	8008e22 <UART_SetConfig+0x18a>
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d814      	bhi.n	8008e3a <UART_SetConfig+0x1a2>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <UART_SetConfig+0x182>
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d008      	beq.n	8008e2a <UART_SetConfig+0x192>
 8008e18:	e00f      	b.n	8008e3a <UART_SetConfig+0x1a2>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e20:	e0ad      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e22:	2302      	movs	r3, #2
 8008e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e28:	e0a9      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e30:	e0a5      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e32:	2308      	movs	r3, #8
 8008e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e38:	e0a1      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e40:	e09d      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a4a      	ldr	r2, [pc, #296]	; (8008f70 <UART_SetConfig+0x2d8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d125      	bne.n	8008e98 <UART_SetConfig+0x200>
 8008e4c:	4b45      	ldr	r3, [pc, #276]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e56:	2bc0      	cmp	r3, #192	; 0xc0
 8008e58:	d016      	beq.n	8008e88 <UART_SetConfig+0x1f0>
 8008e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e5c:	d818      	bhi.n	8008e90 <UART_SetConfig+0x1f8>
 8008e5e:	2b80      	cmp	r3, #128	; 0x80
 8008e60:	d00a      	beq.n	8008e78 <UART_SetConfig+0x1e0>
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d814      	bhi.n	8008e90 <UART_SetConfig+0x1f8>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <UART_SetConfig+0x1d8>
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d008      	beq.n	8008e80 <UART_SetConfig+0x1e8>
 8008e6e:	e00f      	b.n	8008e90 <UART_SetConfig+0x1f8>
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e76:	e082      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e7e:	e07e      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e80:	2304      	movs	r3, #4
 8008e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e86:	e07a      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e8e:	e076      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e96:	e072      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a35      	ldr	r2, [pc, #212]	; (8008f74 <UART_SetConfig+0x2dc>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d12a      	bne.n	8008ef8 <UART_SetConfig+0x260>
 8008ea2:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb0:	d01a      	beq.n	8008ee8 <UART_SetConfig+0x250>
 8008eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb6:	d81b      	bhi.n	8008ef0 <UART_SetConfig+0x258>
 8008eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebc:	d00c      	beq.n	8008ed8 <UART_SetConfig+0x240>
 8008ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec2:	d815      	bhi.n	8008ef0 <UART_SetConfig+0x258>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <UART_SetConfig+0x238>
 8008ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ecc:	d008      	beq.n	8008ee0 <UART_SetConfig+0x248>
 8008ece:	e00f      	b.n	8008ef0 <UART_SetConfig+0x258>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ed6:	e052      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ede:	e04e      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ee6:	e04a      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ee8:	2308      	movs	r3, #8
 8008eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eee:	e046      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ef6:	e042      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a17      	ldr	r2, [pc, #92]	; (8008f5c <UART_SetConfig+0x2c4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d13a      	bne.n	8008f78 <UART_SetConfig+0x2e0>
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <UART_SetConfig+0x2cc>)
 8008f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f10:	d01a      	beq.n	8008f48 <UART_SetConfig+0x2b0>
 8008f12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f16:	d81b      	bhi.n	8008f50 <UART_SetConfig+0x2b8>
 8008f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1c:	d00c      	beq.n	8008f38 <UART_SetConfig+0x2a0>
 8008f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f22:	d815      	bhi.n	8008f50 <UART_SetConfig+0x2b8>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <UART_SetConfig+0x298>
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2c:	d008      	beq.n	8008f40 <UART_SetConfig+0x2a8>
 8008f2e:	e00f      	b.n	8008f50 <UART_SetConfig+0x2b8>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f36:	e022      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f3e:	e01e      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f46:	e01a      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f4e:	e016      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f56:	e012      	b.n	8008f7e <UART_SetConfig+0x2e6>
 8008f58:	efff69f3 	.word	0xefff69f3
 8008f5c:	40008000 	.word	0x40008000
 8008f60:	40013800 	.word	0x40013800
 8008f64:	40021000 	.word	0x40021000
 8008f68:	40004400 	.word	0x40004400
 8008f6c:	40004800 	.word	0x40004800
 8008f70:	40004c00 	.word	0x40004c00
 8008f74:	40005000 	.word	0x40005000
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a9f      	ldr	r2, [pc, #636]	; (8009200 <UART_SetConfig+0x568>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d17a      	bne.n	800907e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d824      	bhi.n	8008fda <UART_SetConfig+0x342>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <UART_SetConfig+0x300>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fdb 	.word	0x08008fdb
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fdb 	.word	0x08008fdb
 8008fa8:	08008fcb 	.word	0x08008fcb
 8008fac:	08008fdb 	.word	0x08008fdb
 8008fb0:	08008fdb 	.word	0x08008fdb
 8008fb4:	08008fdb 	.word	0x08008fdb
 8008fb8:	08008fd3 	.word	0x08008fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fb fd7c 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8008fc0:	61f8      	str	r0, [r7, #28]
        break;
 8008fc2:	e010      	b.n	8008fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fc4:	4b8f      	ldr	r3, [pc, #572]	; (8009204 <UART_SetConfig+0x56c>)
 8008fc6:	61fb      	str	r3, [r7, #28]
        break;
 8008fc8:	e00d      	b.n	8008fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fca:	f7fb fcdd 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8008fce:	61f8      	str	r0, [r7, #28]
        break;
 8008fd0:	e009      	b.n	8008fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fd6:	61fb      	str	r3, [r7, #28]
        break;
 8008fd8:	e005      	b.n	8008fe6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008fe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80fb 	beq.w	80091e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4413      	add	r3, r2
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d305      	bcc.n	800900a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	429a      	cmp	r2, r3
 8009008:	d903      	bls.n	8009012 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009010:	e0e8      	b.n	80091e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2200      	movs	r2, #0
 8009016:	461c      	mov	r4, r3
 8009018:	4615      	mov	r5, r2
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	022b      	lsls	r3, r5, #8
 8009024:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009028:	0222      	lsls	r2, r4, #8
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	6849      	ldr	r1, [r1, #4]
 800902e:	0849      	lsrs	r1, r1, #1
 8009030:	2000      	movs	r0, #0
 8009032:	4688      	mov	r8, r1
 8009034:	4681      	mov	r9, r0
 8009036:	eb12 0a08 	adds.w	sl, r2, r8
 800903a:	eb43 0b09 	adc.w	fp, r3, r9
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	603b      	str	r3, [r7, #0]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904c:	4650      	mov	r0, sl
 800904e:	4659      	mov	r1, fp
 8009050:	f7f7 fdfa 	bl	8000c48 <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4613      	mov	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009062:	d308      	bcc.n	8009076 <UART_SetConfig+0x3de>
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800906a:	d204      	bcs.n	8009076 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	60da      	str	r2, [r3, #12]
 8009074:	e0b6      	b.n	80091e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800907c:	e0b2      	b.n	80091e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009086:	d15e      	bne.n	8009146 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800908c:	2b08      	cmp	r3, #8
 800908e:	d828      	bhi.n	80090e2 <UART_SetConfig+0x44a>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <UART_SetConfig+0x400>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090bd 	.word	0x080090bd
 800909c:	080090c5 	.word	0x080090c5
 80090a0:	080090cd 	.word	0x080090cd
 80090a4:	080090e3 	.word	0x080090e3
 80090a8:	080090d3 	.word	0x080090d3
 80090ac:	080090e3 	.word	0x080090e3
 80090b0:	080090e3 	.word	0x080090e3
 80090b4:	080090e3 	.word	0x080090e3
 80090b8:	080090db 	.word	0x080090db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090bc:	f7fb fcfc 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80090c0:	61f8      	str	r0, [r7, #28]
        break;
 80090c2:	e014      	b.n	80090ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090c4:	f7fb fd0e 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 80090c8:	61f8      	str	r0, [r7, #28]
        break;
 80090ca:	e010      	b.n	80090ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090cc:	4b4d      	ldr	r3, [pc, #308]	; (8009204 <UART_SetConfig+0x56c>)
 80090ce:	61fb      	str	r3, [r7, #28]
        break;
 80090d0:	e00d      	b.n	80090ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090d2:	f7fb fc59 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 80090d6:	61f8      	str	r0, [r7, #28]
        break;
 80090d8:	e009      	b.n	80090ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090de:	61fb      	str	r3, [r7, #28]
        break;
 80090e0:	e005      	b.n	80090ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d077      	beq.n	80091e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	005a      	lsls	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	441a      	add	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	fbb2 f3f3 	udiv	r3, r2, r3
 8009108:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b0f      	cmp	r3, #15
 800910e:	d916      	bls.n	800913e <UART_SetConfig+0x4a6>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009116:	d212      	bcs.n	800913e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	b29b      	uxth	r3, r3
 800911c:	f023 030f 	bic.w	r3, r3, #15
 8009120:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	085b      	lsrs	r3, r3, #1
 8009126:	b29b      	uxth	r3, r3
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	b29a      	uxth	r2, r3
 800912e:	8afb      	ldrh	r3, [r7, #22]
 8009130:	4313      	orrs	r3, r2
 8009132:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	8afa      	ldrh	r2, [r7, #22]
 800913a:	60da      	str	r2, [r3, #12]
 800913c:	e052      	b.n	80091e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009144:	e04e      	b.n	80091e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800914a:	2b08      	cmp	r3, #8
 800914c:	d827      	bhi.n	800919e <UART_SetConfig+0x506>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <UART_SetConfig+0x4bc>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	0800919f 	.word	0x0800919f
 8009164:	0800918f 	.word	0x0800918f
 8009168:	0800919f 	.word	0x0800919f
 800916c:	0800919f 	.word	0x0800919f
 8009170:	0800919f 	.word	0x0800919f
 8009174:	08009197 	.word	0x08009197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009178:	f7fb fc9e 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800917c:	61f8      	str	r0, [r7, #28]
        break;
 800917e:	e014      	b.n	80091aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fb fcb0 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8009184:	61f8      	str	r0, [r7, #28]
        break;
 8009186:	e010      	b.n	80091aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009188:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <UART_SetConfig+0x56c>)
 800918a:	61fb      	str	r3, [r7, #28]
        break;
 800918c:	e00d      	b.n	80091aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fb fbfb 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8009192:	61f8      	str	r0, [r7, #28]
        break;
 8009194:	e009      	b.n	80091aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800919a:	61fb      	str	r3, [r7, #28]
        break;
 800919c:	e005      	b.n	80091aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80091a8:	bf00      	nop
    }

    if (pclk != 0U)
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d019      	beq.n	80091e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	085a      	lsrs	r2, r3, #1
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	441a      	add	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d909      	bls.n	80091de <UART_SetConfig+0x546>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d205      	bcs.n	80091de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60da      	str	r2, [r3, #12]
 80091dc:	e002      	b.n	80091e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80091f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3728      	adds	r7, #40	; 0x28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091fe:	bf00      	nop
 8009200:	40008000 	.word	0x40008000
 8009204:	00f42400 	.word	0x00f42400

08009208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01a      	beq.n	800931e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009306:	d10a      	bne.n	800931e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b098      	sub	sp, #96	; 0x60
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800935c:	f7f9 fc0e 	bl	8002b7c <HAL_GetTick>
 8009360:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d12e      	bne.n	80093ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009378:	2200      	movs	r2, #0
 800937a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f88c 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d021      	beq.n	80093ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939e:	653b      	str	r3, [r7, #80]	; 0x50
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a8:	647b      	str	r3, [r7, #68]	; 0x44
 80093aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e6      	bne.n	800938a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e062      	b.n	8009494 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d149      	bne.n	8009470 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093e4:	2200      	movs	r2, #0
 80093e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f856 	bl	800949c <UART_WaitOnFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d03c      	beq.n	8009470 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	623b      	str	r3, [r7, #32]
   return(result);
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800940a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009414:	633b      	str	r3, [r7, #48]	; 0x30
 8009416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	60fb      	str	r3, [r7, #12]
   return(result);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0301 	bic.w	r3, r3, #1
 800943e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009448:	61fa      	str	r2, [r7, #28]
 800944a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	69b9      	ldr	r1, [r7, #24]
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	617b      	str	r3, [r7, #20]
   return(result);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e011      	b.n	8009494 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3758      	adds	r7, #88	; 0x58
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ac:	e049      	b.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d045      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b6:	f7f9 fb61 	bl	8002b7c <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <UART_WaitOnFlagUntilTimeout+0x30>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e048      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0304 	and.w	r3, r3, #4
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d031      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d110      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2208      	movs	r2, #8
 80094f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f838 	bl	800956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2208      	movs	r2, #8
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e029      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951c:	d111      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f81e 	bl	800956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e00f      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4013      	ands	r3, r2
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	429a      	cmp	r2, r3
 8009550:	bf0c      	ite	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	2300      	movne	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	429a      	cmp	r2, r3
 800955e:	d0a6      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800956a:	b480      	push	{r7}
 800956c:	b095      	sub	sp, #84	; 0x54
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009590:	643b      	str	r3, [r7, #64]	; 0x40
 8009592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e6      	bne.n	8009572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3308      	adds	r3, #8
 80095c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e5      	bne.n	80095a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d118      	bne.n	8009612 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	647b      	str	r3, [r7, #68]	; 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fe:	61bb      	str	r3, [r7, #24]
 8009600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6979      	ldr	r1, [r7, #20]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	613b      	str	r3, [r7, #16]
   return(result);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e6      	bne.n	80095e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009626:	bf00      	nop
 8009628:	3754      	adds	r7, #84	; 0x54
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009632:	b084      	sub	sp, #16
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	f107 001c 	add.w	r0, r7, #28
 8009640:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009650:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8009654:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009658:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800965c:	431a      	orrs	r2, r3
             Init.ClockDiv
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009660:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4313      	orrs	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009670:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr

0800968c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2203      	movs	r2, #3
 80096d4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80096d6:	2002      	movs	r0, #2
 80096d8:	f7f9 fa5c 	bl	8002b94 <HAL_Delay>

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0303 	and.w	r3, r3, #3
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009702:	b480      	push	{r7}
 8009704:	b085      	sub	sp, #20
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009720:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009726:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800972c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800973c:	f023 030f 	bic.w	r3, r3, #15
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	b2db      	uxtb	r3, r3
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3314      	adds	r3, #20
 800977e:	461a      	mov	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	4413      	add	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80097c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0

}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b088      	sub	sp, #32
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097fc:	2310      	movs	r3, #16
 80097fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009800:	2340      	movs	r3, #64	; 0x40
 8009802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800980e:	f107 0308 	add.w	r3, r7, #8
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff ff74 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800981a:	f241 3288 	movw	r2, #5000	; 0x1388
 800981e:	2110      	movs	r1, #16
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f9d7 	bl	8009bd4 <SDMMC_GetCmdResp1>
 8009826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009828:	69fb      	ldr	r3, [r7, #28]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3720      	adds	r7, #32
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b088      	sub	sp, #32
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009840:	2311      	movs	r3, #17
 8009842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009844:	2340      	movs	r3, #64	; 0x40
 8009846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800984c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ff52 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800985e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009862:	2111      	movs	r1, #17
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f9b5 	bl	8009bd4 <SDMMC_GetCmdResp1>
 800986a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800986c:	69fb      	ldr	r3, [r7, #28]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3720      	adds	r7, #32
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009884:	2312      	movs	r3, #18
 8009886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff ff30 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80098a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a6:	2112      	movs	r1, #18
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f993 	bl	8009bd4 <SDMMC_GetCmdResp1>
 80098ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098b0:	69fb      	ldr	r3, [r7, #28]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3720      	adds	r7, #32
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b088      	sub	sp, #32
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80098c8:	2318      	movs	r3, #24
 80098ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098cc:	2340      	movs	r3, #64	; 0x40
 80098ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098da:	f107 0308 	add.w	r3, r7, #8
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff ff0e 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ea:	2118      	movs	r1, #24
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f971 	bl	8009bd4 <SDMMC_GetCmdResp1>
 80098f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098f4:	69fb      	ldr	r3, [r7, #28]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3720      	adds	r7, #32
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b088      	sub	sp, #32
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800990c:	2319      	movs	r3, #25
 800990e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff feec 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800992a:	f241 3288 	movw	r2, #5000	; 0x1388
 800992e:	2119      	movs	r1, #25
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f94f 	bl	8009bd4 <SDMMC_GetCmdResp1>
 8009936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009938:	69fb      	ldr	r3, [r7, #28]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3720      	adds	r7, #32
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009950:	230c      	movs	r3, #12
 8009952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800995c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009960:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009962:	f107 0308 	add.w	r3, r7, #8
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff feca 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800996e:	4a05      	ldr	r2, [pc, #20]	; (8009984 <SDMMC_CmdStopTransfer+0x40>)
 8009970:	210c      	movs	r1, #12
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f92e 	bl	8009bd4 <SDMMC_GetCmdResp1>
 8009978:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800997a:	69fb      	ldr	r3, [r7, #28]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3720      	adds	r7, #32
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	05f5e100 	.word	0x05f5e100

08009988 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	; 0x28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009998:	2307      	movs	r3, #7
 800999a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099aa:	f107 0310 	add.w	r3, r7, #16
 80099ae:	4619      	mov	r1, r3
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fea6 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80099b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ba:	2107      	movs	r1, #7
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f909 	bl	8009bd4 <SDMMC_GetCmdResp1>
 80099c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3728      	adds	r7, #40	; 0x28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ec:	f107 0308 	add.w	r3, r7, #8
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff fe85 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb23 	bl	800a044 <SDMMC_GetCmdError>
 80099fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a00:	69fb      	ldr	r3, [r7, #28]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a12:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a18:	2308      	movs	r3, #8
 8009a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff fe66 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fab6 	bl	8009fa8 <SDMMC_GetCmdResp7>
 8009a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3e:	69fb      	ldr	r3, [r7, #28]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3720      	adds	r7, #32
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a56:	2337      	movs	r3, #55	; 0x37
 8009a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fe47 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a78:	2137      	movs	r1, #55	; 0x37
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f8aa 	bl	8009bd4 <SDMMC_GetCmdResp1>
 8009a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a82:	69fb      	ldr	r3, [r7, #28]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa0:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009aa2:	2329      	movs	r3, #41	; 0x29
 8009aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa6:	2340      	movs	r3, #64	; 0x40
 8009aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fe21 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f9bd 	bl	8009e40 <SDMMC_GetCmdResp3>
 8009ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b088      	sub	sp, #32
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ae2:	23c0      	movs	r3, #192	; 0xc0
 8009ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af0:	f107 0308 	add.w	r3, r7, #8
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fe03 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f957 	bl	8009db0 <SDMMC_GetCmdResp2>
 8009b02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b04:	69fb      	ldr	r3, [r7, #28]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3720      	adds	r7, #32
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b088      	sub	sp, #32
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b1c:	2309      	movs	r3, #9
 8009b1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b20:	23c0      	movs	r3, #192	; 0xc0
 8009b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fde4 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f938 	bl	8009db0 <SDMMC_GetCmdResp2>
 8009b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b42:	69fb      	ldr	r3, [r7, #28]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3720      	adds	r7, #32
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b5e:	2340      	movs	r3, #64	; 0x40
 8009b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff fdc5 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	2103      	movs	r1, #3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f99d 	bl	8009ebc <SDMMC_GetCmdResp6>
 8009b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b84:	69fb      	ldr	r3, [r7, #28]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b088      	sub	sp, #32
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b9c:	230d      	movs	r3, #13
 8009b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bae:	f107 0308 	add.w	r3, r7, #8
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fda4 	bl	8009702 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbe:	210d      	movs	r1, #13
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f807 	bl	8009bd4 <SDMMC_GetCmdResp1>
 8009bc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3720      	adds	r7, #32
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009be2:	4b70      	ldr	r3, [pc, #448]	; (8009da4 <SDMMC_GetCmdResp1+0x1d0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a70      	ldr	r2, [pc, #448]	; (8009da8 <SDMMC_GetCmdResp1+0x1d4>)
 8009be8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bec:	0a5a      	lsrs	r2, r3, #9
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	1e5a      	subs	r2, r3, #1
 8009bfa:	61fa      	str	r2, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c04:	e0c9      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0ef      	beq.n	8009bf6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1ea      	bne.n	8009bf6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c32:	2304      	movs	r3, #4
 8009c34:	e0b1      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0a6      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	22c5      	movs	r2, #197	; 0xc5
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff fd7f 	bl	8009756 <SDMMC_GetCommandResponse>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d001      	beq.n	8009c66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e099      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009c66:	2100      	movs	r1, #0
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fd81 	bl	8009770 <SDMMC_GetResponse>
 8009c6e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	4b4e      	ldr	r3, [pc, #312]	; (8009dac <SDMMC_GetCmdResp1+0x1d8>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e08d      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da02      	bge.n	8009c8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c88:	e087      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	e080      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ca2:	2380      	movs	r3, #128	; 0x80
 8009ca4:	e079      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb4:	e071      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc4:	e069      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd4:	e061      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ce4:	e059      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf4:	e051      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d04:	e049      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d14:	e041      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d24:	e039      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d34:	e031      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d44:	e029      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d54:	e021      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d64:	e019      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d74:	e011      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d84:	e009      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d94:	e001      	b.n	8009d9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3720      	adds	r7, #32
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000028 	.word	0x20000028
 8009da8:	10624dd3 	.word	0x10624dd3
 8009dac:	fdffe008 	.word	0xfdffe008

08009db0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009db8:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <SDMMC_GetCmdResp2+0x88>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1f      	ldr	r2, [pc, #124]	; (8009e3c <SDMMC_GetCmdResp2+0x8c>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	0a5b      	lsrs	r3, r3, #9
 8009dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc8:	fb02 f303 	mul.w	r3, r2, r3
 8009dcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1e5a      	subs	r2, r3, #1
 8009dd2:	60fa      	str	r2, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ddc:	e026      	b.n	8009e2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0ef      	beq.n	8009dce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ea      	bne.n	8009dce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d004      	beq.n	8009e0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2204      	movs	r2, #4
 8009e08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	e00e      	b.n	8009e2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e003      	b.n	8009e2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	22c5      	movs	r2, #197	; 0xc5
 8009e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	20000028 	.word	0x20000028
 8009e3c:	10624dd3 	.word	0x10624dd3

08009e40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e48:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <SDMMC_GetCmdResp3+0x74>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1a      	ldr	r2, [pc, #104]	; (8009eb8 <SDMMC_GetCmdResp3+0x78>)
 8009e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e52:	0a5b      	lsrs	r3, r3, #9
 8009e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e58:	fb02 f303 	mul.w	r3, r2, r3
 8009e5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1e5a      	subs	r2, r3, #1
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e6c:	e01b      	b.n	8009ea6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0ef      	beq.n	8009e5e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1ea      	bne.n	8009e5e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2204      	movs	r2, #4
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	e003      	b.n	8009ea6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	22c5      	movs	r2, #197	; 0xc5
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000028 	.word	0x20000028
 8009eb8:	10624dd3 	.word	0x10624dd3

08009ebc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009eca:	4b35      	ldr	r3, [pc, #212]	; (8009fa0 <SDMMC_GetCmdResp6+0xe4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a35      	ldr	r2, [pc, #212]	; (8009fa4 <SDMMC_GetCmdResp6+0xe8>)
 8009ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	1e5a      	subs	r2, r3, #1
 8009ee4:	61fa      	str	r2, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eee:	e052      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0ef      	beq.n	8009ee0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1ea      	bne.n	8009ee0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2204      	movs	r2, #4
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f1c:	2304      	movs	r3, #4
 8009f1e:	e03a      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e02f      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff fc0d 	bl	8009756 <SDMMC_GetCommandResponse>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	7afb      	ldrb	r3, [r7, #11]
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d001      	beq.n	8009f4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e025      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	22c5      	movs	r2, #197	; 0xc5
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f50:	2100      	movs	r1, #0
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7ff fc0c 	bl	8009770 <SDMMC_GetResponse>
 8009f58:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	0c1b      	lsrs	r3, r3, #16
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e011      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f80:	e009      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f90:	e001      	b.n	8009f96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000028 	.word	0x20000028
 8009fa4:	10624dd3 	.word	0x10624dd3

08009fa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fb0:	4b22      	ldr	r3, [pc, #136]	; (800a03c <SDMMC_GetCmdResp7+0x94>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a22      	ldr	r2, [pc, #136]	; (800a040 <SDMMC_GetCmdResp7+0x98>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	0a5b      	lsrs	r3, r3, #9
 8009fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	60fa      	str	r2, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fd4:	e02c      	b.n	800a030 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0ef      	beq.n	8009fc6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1ea      	bne.n	8009fc6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2204      	movs	r2, #4
 800a000:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a002:	2304      	movs	r3, #4
 800a004:	e014      	b.n	800a030 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a018:	2301      	movs	r3, #1
 800a01a:	e009      	b.n	800a030 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2240      	movs	r2, #64	; 0x40
 800a02c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a02e:	2300      	movs	r3, #0

}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	20000028 	.word	0x20000028
 800a040:	10624dd3 	.word	0x10624dd3

0800a044 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a04c:	4b11      	ldr	r3, [pc, #68]	; (800a094 <SDMMC_GetCmdError+0x50>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a11      	ldr	r2, [pc, #68]	; (800a098 <SDMMC_GetCmdError+0x54>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	0a5b      	lsrs	r3, r3, #9
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
 800a060:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1e5a      	subs	r2, r3, #1
 800a066:	60fa      	str	r2, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a06c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a070:	e009      	b.n	800a086 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f1      	beq.n	800a062 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	22c5      	movs	r2, #197	; 0xc5
 800a082:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000028 	.word	0x20000028
 800a098:	10624dd3 	.word	0x10624dd3

0800a09c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0a0:	4904      	ldr	r1, [pc, #16]	; (800a0b4 <MX_FATFS_Init+0x18>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	; (800a0b8 <MX_FATFS_Init+0x1c>)
 800a0a4:	f000 f9d6 	bl	800a454 <FATFS_LinkDriver>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4b03      	ldr	r3, [pc, #12]	; (800a0bc <MX_FATFS_Init+0x20>)
 800a0ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0b0:	bf00      	nop
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000a78c 	.word	0x2000a78c
 800a0b8:	0800cffc 	.word	0x0800cffc
 800a0bc:	2000a788 	.word	0x2000a788

0800a0c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0ca:	f000 f86b 	bl	800a1a4 <BSP_SD_IsDetected>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d001      	beq.n	800a0d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e005      	b.n	800a0e4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a0d8:	4804      	ldr	r0, [pc, #16]	; (800a0ec <BSP_SD_Init+0x2c>)
 800a0da:	f7fc faf5 	bl	80066c8 <HAL_SD_Init>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	2000a45c 	.word	0x2000a45c

0800a0f0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	4806      	ldr	r0, [pc, #24]	; (800a128 <BSP_SD_ReadBlocks+0x38>)
 800a10e:	f7fc fbb1 	bl	8006874 <HAL_SD_ReadBlocks>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	2000a45c 	.word	0x2000a45c

0800a12c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af02      	add	r7, sp, #8
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	68f9      	ldr	r1, [r7, #12]
 800a148:	4806      	ldr	r0, [pc, #24]	; (800a164 <BSP_SD_WriteBlocks+0x38>)
 800a14a:	f7fc fd71 	bl	8006c30 <HAL_SD_WriteBlocks>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	2000a45c 	.word	0x2000a45c

0800a168 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <BSP_SD_GetCardState+0x1c>)
 800a16e:	f7fd f8b5 	bl	80072dc <HAL_SD_GetCardState>
 800a172:	4603      	mov	r3, r0
 800a174:	2b04      	cmp	r3, #4
 800a176:	bf14      	ite	ne
 800a178:	2301      	movne	r3, #1
 800a17a:	2300      	moveq	r3, #0
 800a17c:	b2db      	uxtb	r3, r3
}
 800a17e:	4618      	mov	r0, r3
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000a45c 	.word	0x2000a45c

0800a188 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4803      	ldr	r0, [pc, #12]	; (800a1a0 <BSP_SD_GetCardInfo+0x18>)
 800a194:	f7fd f876 	bl	8007284 <HAL_SD_GetCardInfo>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	2000a45c 	.word	0x2000a45c

0800a1a4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a1ae:	f000 f80b 	bl	800a1c8 <BSP_PlatformIsDetected>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	b2db      	uxtb	r3, r3
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1d6:	4806      	ldr	r0, [pc, #24]	; (800a1f0 <BSP_PlatformIsDetected+0x28>)
 800a1d8:	f7f9 f9b4 	bl	8003544 <HAL_GPIO_ReadPin>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	48000800 	.word	0x48000800

0800a1f4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <SD_CheckStatus+0x38>)
 800a200:	2201      	movs	r2, #1
 800a202:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a204:	f7ff ffb0 	bl	800a168 <BSP_SD_GetCardState>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d107      	bne.n	800a21e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a20e:	4b07      	ldr	r3, [pc, #28]	; (800a22c <SD_CheckStatus+0x38>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f023 0301 	bic.w	r3, r3, #1
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b04      	ldr	r3, [pc, #16]	; (800a22c <SD_CheckStatus+0x38>)
 800a21c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a21e:	4b03      	ldr	r3, [pc, #12]	; (800a22c <SD_CheckStatus+0x38>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b2db      	uxtb	r3, r3
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000031 	.word	0x20000031

0800a230 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a23a:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <SD_initialize+0x38>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a240:	f7ff ff3e 	bl	800a0c0 <BSP_SD_Init>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d107      	bne.n	800a25a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff ffd1 	bl	800a1f4 <SD_CheckStatus>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	4b04      	ldr	r3, [pc, #16]	; (800a268 <SD_initialize+0x38>)
 800a258:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a25a:	4b03      	ldr	r3, [pc, #12]	; (800a268 <SD_initialize+0x38>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b2db      	uxtb	r3, r3
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20000031 	.word	0x20000031

0800a26c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7ff ffbb 	bl	800a1f4 <SD_CheckStatus>
 800a27e:	4603      	mov	r3, r0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	68b8      	ldr	r0, [r7, #8]
 800a2a6:	f7ff ff23 	bl	800a0f0 <BSP_SD_ReadBlocks>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d107      	bne.n	800a2c0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a2b0:	bf00      	nop
 800a2b2:	f7ff ff59 	bl	800a168 <BSP_SD_GetCardState>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1fa      	bne.n	800a2b2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b086      	sub	sp, #24
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f7ff ff20 	bl	800a12c <BSP_SD_WriteBlocks>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d107      	bne.n	800a302 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a2f2:	bf00      	nop
 800a2f4:	f7ff ff38 	bl	800a168 <BSP_SD_GetCardState>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1fa      	bne.n	800a2f4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08c      	sub	sp, #48	; 0x30
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	603a      	str	r2, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	460b      	mov	r3, r1
 800a31a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a322:	4b25      	ldr	r3, [pc, #148]	; (800a3b8 <SD_ioctl+0xac>)
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <SD_ioctl+0x28>
 800a330:	2303      	movs	r3, #3
 800a332:	e03c      	b.n	800a3ae <SD_ioctl+0xa2>

  switch (cmd)
 800a334:	79bb      	ldrb	r3, [r7, #6]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d834      	bhi.n	800a3a4 <SD_ioctl+0x98>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <SD_ioctl+0x34>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a359 	.word	0x0800a359
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a38b 	.word	0x0800a38b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a356:	e028      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff ff13 	bl	800a188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a36e:	e01c      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a370:	f107 030c 	add.w	r3, r7, #12
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ff07 	bl	800a188 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a388:	e00f      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a38a:	f107 030c 	add.w	r3, r7, #12
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fefa 	bl	800a188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	0a5a      	lsrs	r2, r3, #9
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3a2:	e002      	b.n	800a3aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3730      	adds	r7, #48	; 0x30
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000031 	.word	0x20000031

0800a3bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3d2:	4b1f      	ldr	r3, [pc, #124]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3d4:	7a5b      	ldrb	r3, [r3, #9]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d131      	bne.n	800a440 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3dc:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3de:	7a5b      	ldrb	r3, [r3, #9]
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3ea:	4b19      	ldr	r3, [pc, #100]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3ec:	7a5b      	ldrb	r3, [r3, #9]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	4a17      	ldr	r2, [pc, #92]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a3fc:	7a5b      	ldrb	r3, [r3, #9]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a404:	4413      	add	r3, r2
 800a406:	79fa      	ldrb	r2, [r7, #7]
 800a408:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a40c:	7a5b      	ldrb	r3, [r3, #9]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	b2d1      	uxtb	r1, r2
 800a414:	4a0e      	ldr	r2, [pc, #56]	; (800a450 <FATFS_LinkDriverEx+0x94>)
 800a416:	7251      	strb	r1, [r2, #9]
 800a418:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a41a:	7dbb      	ldrb	r3, [r7, #22]
 800a41c:	3330      	adds	r3, #48	; 0x30
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3301      	adds	r3, #1
 800a428:	223a      	movs	r2, #58	; 0x3a
 800a42a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3302      	adds	r3, #2
 800a430:	222f      	movs	r2, #47	; 0x2f
 800a432:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	3303      	adds	r3, #3
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
}
 800a442:	4618      	mov	r0, r3
 800a444:	371c      	adds	r7, #28
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	2000a790 	.word	0x2000a790

0800a454 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a45e:	2200      	movs	r2, #0
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff ffaa 	bl	800a3bc <FATFS_LinkDriverEx>
 800a468:	4603      	mov	r3, r0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <__cvt>:
 800a472:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a476:	ec55 4b10 	vmov	r4, r5, d0
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	460e      	mov	r6, r1
 800a47e:	4619      	mov	r1, r3
 800a480:	462b      	mov	r3, r5
 800a482:	bfbb      	ittet	lt
 800a484:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a488:	461d      	movlt	r5, r3
 800a48a:	2300      	movge	r3, #0
 800a48c:	232d      	movlt	r3, #45	; 0x2d
 800a48e:	700b      	strb	r3, [r1, #0]
 800a490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a492:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a496:	4691      	mov	r9, r2
 800a498:	f023 0820 	bic.w	r8, r3, #32
 800a49c:	bfbc      	itt	lt
 800a49e:	4622      	movlt	r2, r4
 800a4a0:	4614      	movlt	r4, r2
 800a4a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a6:	d005      	beq.n	800a4b4 <__cvt+0x42>
 800a4a8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4ac:	d100      	bne.n	800a4b0 <__cvt+0x3e>
 800a4ae:	3601      	adds	r6, #1
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	e000      	b.n	800a4b6 <__cvt+0x44>
 800a4b4:	2103      	movs	r1, #3
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	ab02      	add	r3, sp, #8
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	ec45 4b10 	vmov	d0, r4, r5
 800a4c2:	4653      	mov	r3, sl
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	f000 ff5b 	bl	800b380 <_dtoa_r>
 800a4ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	d102      	bne.n	800a4d8 <__cvt+0x66>
 800a4d2:	f019 0f01 	tst.w	r9, #1
 800a4d6:	d022      	beq.n	800a51e <__cvt+0xac>
 800a4d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4dc:	eb07 0906 	add.w	r9, r7, r6
 800a4e0:	d110      	bne.n	800a504 <__cvt+0x92>
 800a4e2:	783b      	ldrb	r3, [r7, #0]
 800a4e4:	2b30      	cmp	r3, #48	; 0x30
 800a4e6:	d10a      	bne.n	800a4fe <__cvt+0x8c>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7f6 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4f4:	b918      	cbnz	r0, 800a4fe <__cvt+0x8c>
 800a4f6:	f1c6 0601 	rsb	r6, r6, #1
 800a4fa:	f8ca 6000 	str.w	r6, [sl]
 800a4fe:	f8da 3000 	ldr.w	r3, [sl]
 800a502:	4499      	add	r9, r3
 800a504:	2200      	movs	r2, #0
 800a506:	2300      	movs	r3, #0
 800a508:	4620      	mov	r0, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7f6 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a510:	b108      	cbz	r0, 800a516 <__cvt+0xa4>
 800a512:	f8cd 900c 	str.w	r9, [sp, #12]
 800a516:	2230      	movs	r2, #48	; 0x30
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	454b      	cmp	r3, r9
 800a51c:	d307      	bcc.n	800a52e <__cvt+0xbc>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a522:	1bdb      	subs	r3, r3, r7
 800a524:	4638      	mov	r0, r7
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	b004      	add	sp, #16
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	1c59      	adds	r1, r3, #1
 800a530:	9103      	str	r1, [sp, #12]
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	e7f0      	b.n	800a518 <__cvt+0xa6>

0800a536 <__exponent>:
 800a536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a538:	4603      	mov	r3, r0
 800a53a:	2900      	cmp	r1, #0
 800a53c:	bfb8      	it	lt
 800a53e:	4249      	neglt	r1, r1
 800a540:	f803 2b02 	strb.w	r2, [r3], #2
 800a544:	bfb4      	ite	lt
 800a546:	222d      	movlt	r2, #45	; 0x2d
 800a548:	222b      	movge	r2, #43	; 0x2b
 800a54a:	2909      	cmp	r1, #9
 800a54c:	7042      	strb	r2, [r0, #1]
 800a54e:	dd2a      	ble.n	800a5a6 <__exponent+0x70>
 800a550:	f10d 0207 	add.w	r2, sp, #7
 800a554:	4617      	mov	r7, r2
 800a556:	260a      	movs	r6, #10
 800a558:	4694      	mov	ip, r2
 800a55a:	fb91 f5f6 	sdiv	r5, r1, r6
 800a55e:	fb06 1415 	mls	r4, r6, r5, r1
 800a562:	3430      	adds	r4, #48	; 0x30
 800a564:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a568:	460c      	mov	r4, r1
 800a56a:	2c63      	cmp	r4, #99	; 0x63
 800a56c:	f102 32ff 	add.w	r2, r2, #4294967295
 800a570:	4629      	mov	r1, r5
 800a572:	dcf1      	bgt.n	800a558 <__exponent+0x22>
 800a574:	3130      	adds	r1, #48	; 0x30
 800a576:	f1ac 0402 	sub.w	r4, ip, #2
 800a57a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a57e:	1c41      	adds	r1, r0, #1
 800a580:	4622      	mov	r2, r4
 800a582:	42ba      	cmp	r2, r7
 800a584:	d30a      	bcc.n	800a59c <__exponent+0x66>
 800a586:	f10d 0209 	add.w	r2, sp, #9
 800a58a:	eba2 020c 	sub.w	r2, r2, ip
 800a58e:	42bc      	cmp	r4, r7
 800a590:	bf88      	it	hi
 800a592:	2200      	movhi	r2, #0
 800a594:	4413      	add	r3, r2
 800a596:	1a18      	subs	r0, r3, r0
 800a598:	b003      	add	sp, #12
 800a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a5a0:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a5a4:	e7ed      	b.n	800a582 <__exponent+0x4c>
 800a5a6:	2330      	movs	r3, #48	; 0x30
 800a5a8:	3130      	adds	r1, #48	; 0x30
 800a5aa:	7083      	strb	r3, [r0, #2]
 800a5ac:	70c1      	strb	r1, [r0, #3]
 800a5ae:	1d03      	adds	r3, r0, #4
 800a5b0:	e7f1      	b.n	800a596 <__exponent+0x60>
	...

0800a5b4 <_printf_float>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	ed2d 8b02 	vpush	{d8}
 800a5bc:	b08d      	sub	sp, #52	; 0x34
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	f000 fdc9 	bl	800b160 <_localeconv_r>
 800a5ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f7f5 fe4c 	bl	8000270 <strlen>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	930a      	str	r3, [sp, #40]	; 0x28
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5e8:	3307      	adds	r3, #7
 800a5ea:	f023 0307 	bic.w	r3, r3, #7
 800a5ee:	f103 0208 	add.w	r2, r3, #8
 800a5f2:	f8c8 2000 	str.w	r2, [r8]
 800a5f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	f8cd 8018 	str.w	r8, [sp, #24]
 800a604:	ee08 0a10 	vmov	s16, r0
 800a608:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a60c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a610:	4b9e      	ldr	r3, [pc, #632]	; (800a88c <_printf_float+0x2d8>)
 800a612:	f04f 32ff 	mov.w	r2, #4294967295
 800a616:	f7f6 fa89 	bl	8000b2c <__aeabi_dcmpun>
 800a61a:	bb88      	cbnz	r0, 800a680 <_printf_float+0xcc>
 800a61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a620:	4b9a      	ldr	r3, [pc, #616]	; (800a88c <_printf_float+0x2d8>)
 800a622:	f04f 32ff 	mov.w	r2, #4294967295
 800a626:	f7f6 fa63 	bl	8000af0 <__aeabi_dcmple>
 800a62a:	bb48      	cbnz	r0, 800a680 <_printf_float+0xcc>
 800a62c:	2200      	movs	r2, #0
 800a62e:	2300      	movs	r3, #0
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	f7f6 fa52 	bl	8000adc <__aeabi_dcmplt>
 800a638:	b110      	cbz	r0, 800a640 <_printf_float+0x8c>
 800a63a:	232d      	movs	r3, #45	; 0x2d
 800a63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a640:	4a93      	ldr	r2, [pc, #588]	; (800a890 <_printf_float+0x2dc>)
 800a642:	4b94      	ldr	r3, [pc, #592]	; (800a894 <_printf_float+0x2e0>)
 800a644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a648:	bf94      	ite	ls
 800a64a:	4690      	movls	r8, r2
 800a64c:	4698      	movhi	r8, r3
 800a64e:	2303      	movs	r3, #3
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	9b05      	ldr	r3, [sp, #20]
 800a654:	f023 0304 	bic.w	r3, r3, #4
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f04f 0900 	mov.w	r9, #0
 800a65e:	9700      	str	r7, [sp, #0]
 800a660:	4633      	mov	r3, r6
 800a662:	aa0b      	add	r2, sp, #44	; 0x2c
 800a664:	4621      	mov	r1, r4
 800a666:	4628      	mov	r0, r5
 800a668:	f000 f9da 	bl	800aa20 <_printf_common>
 800a66c:	3001      	adds	r0, #1
 800a66e:	f040 8090 	bne.w	800a792 <_printf_float+0x1de>
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	b00d      	add	sp, #52	; 0x34
 800a678:	ecbd 8b02 	vpop	{d8}
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	4640      	mov	r0, r8
 800a686:	4649      	mov	r1, r9
 800a688:	f7f6 fa50 	bl	8000b2c <__aeabi_dcmpun>
 800a68c:	b140      	cbz	r0, 800a6a0 <_printf_float+0xec>
 800a68e:	464b      	mov	r3, r9
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfbc      	itt	lt
 800a694:	232d      	movlt	r3, #45	; 0x2d
 800a696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a69a:	4a7f      	ldr	r2, [pc, #508]	; (800a898 <_printf_float+0x2e4>)
 800a69c:	4b7f      	ldr	r3, [pc, #508]	; (800a89c <_printf_float+0x2e8>)
 800a69e:	e7d1      	b.n	800a644 <_printf_float+0x90>
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6a6:	9206      	str	r2, [sp, #24]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	d13f      	bne.n	800a72c <_printf_float+0x178>
 800a6ac:	2306      	movs	r3, #6
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	9b05      	ldr	r3, [sp, #20]
 800a6b2:	6861      	ldr	r1, [r4, #4]
 800a6b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9303      	str	r3, [sp, #12]
 800a6bc:	ab0a      	add	r3, sp, #40	; 0x28
 800a6be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6c2:	ab09      	add	r3, sp, #36	; 0x24
 800a6c4:	ec49 8b10 	vmov	d0, r8, r9
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	6022      	str	r2, [r4, #0]
 800a6cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7ff fece 	bl	800a472 <__cvt>
 800a6d6:	9b06      	ldr	r3, [sp, #24]
 800a6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6da:	2b47      	cmp	r3, #71	; 0x47
 800a6dc:	4680      	mov	r8, r0
 800a6de:	d108      	bne.n	800a6f2 <_printf_float+0x13e>
 800a6e0:	1cc8      	adds	r0, r1, #3
 800a6e2:	db02      	blt.n	800a6ea <_printf_float+0x136>
 800a6e4:	6863      	ldr	r3, [r4, #4]
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	dd41      	ble.n	800a76e <_printf_float+0x1ba>
 800a6ea:	f1ab 0302 	sub.w	r3, fp, #2
 800a6ee:	fa5f fb83 	uxtb.w	fp, r3
 800a6f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6f6:	d820      	bhi.n	800a73a <_printf_float+0x186>
 800a6f8:	3901      	subs	r1, #1
 800a6fa:	465a      	mov	r2, fp
 800a6fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a700:	9109      	str	r1, [sp, #36]	; 0x24
 800a702:	f7ff ff18 	bl	800a536 <__exponent>
 800a706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a708:	1813      	adds	r3, r2, r0
 800a70a:	2a01      	cmp	r2, #1
 800a70c:	4681      	mov	r9, r0
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	dc02      	bgt.n	800a718 <_printf_float+0x164>
 800a712:	6822      	ldr	r2, [r4, #0]
 800a714:	07d2      	lsls	r2, r2, #31
 800a716:	d501      	bpl.n	800a71c <_printf_float+0x168>
 800a718:	3301      	adds	r3, #1
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a720:	2b00      	cmp	r3, #0
 800a722:	d09c      	beq.n	800a65e <_printf_float+0xaa>
 800a724:	232d      	movs	r3, #45	; 0x2d
 800a726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72a:	e798      	b.n	800a65e <_printf_float+0xaa>
 800a72c:	9a06      	ldr	r2, [sp, #24]
 800a72e:	2a47      	cmp	r2, #71	; 0x47
 800a730:	d1be      	bne.n	800a6b0 <_printf_float+0xfc>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1bc      	bne.n	800a6b0 <_printf_float+0xfc>
 800a736:	2301      	movs	r3, #1
 800a738:	e7b9      	b.n	800a6ae <_printf_float+0xfa>
 800a73a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a73e:	d118      	bne.n	800a772 <_printf_float+0x1be>
 800a740:	2900      	cmp	r1, #0
 800a742:	6863      	ldr	r3, [r4, #4]
 800a744:	dd0b      	ble.n	800a75e <_printf_float+0x1aa>
 800a746:	6121      	str	r1, [r4, #16]
 800a748:	b913      	cbnz	r3, 800a750 <_printf_float+0x19c>
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	07d0      	lsls	r0, r2, #31
 800a74e:	d502      	bpl.n	800a756 <_printf_float+0x1a2>
 800a750:	3301      	adds	r3, #1
 800a752:	440b      	add	r3, r1
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	65a1      	str	r1, [r4, #88]	; 0x58
 800a758:	f04f 0900 	mov.w	r9, #0
 800a75c:	e7de      	b.n	800a71c <_printf_float+0x168>
 800a75e:	b913      	cbnz	r3, 800a766 <_printf_float+0x1b2>
 800a760:	6822      	ldr	r2, [r4, #0]
 800a762:	07d2      	lsls	r2, r2, #31
 800a764:	d501      	bpl.n	800a76a <_printf_float+0x1b6>
 800a766:	3302      	adds	r3, #2
 800a768:	e7f4      	b.n	800a754 <_printf_float+0x1a0>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e7f2      	b.n	800a754 <_printf_float+0x1a0>
 800a76e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a774:	4299      	cmp	r1, r3
 800a776:	db05      	blt.n	800a784 <_printf_float+0x1d0>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	6121      	str	r1, [r4, #16]
 800a77c:	07d8      	lsls	r0, r3, #31
 800a77e:	d5ea      	bpl.n	800a756 <_printf_float+0x1a2>
 800a780:	1c4b      	adds	r3, r1, #1
 800a782:	e7e7      	b.n	800a754 <_printf_float+0x1a0>
 800a784:	2900      	cmp	r1, #0
 800a786:	bfd4      	ite	le
 800a788:	f1c1 0202 	rsble	r2, r1, #2
 800a78c:	2201      	movgt	r2, #1
 800a78e:	4413      	add	r3, r2
 800a790:	e7e0      	b.n	800a754 <_printf_float+0x1a0>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	055a      	lsls	r2, r3, #21
 800a796:	d407      	bmi.n	800a7a8 <_printf_float+0x1f4>
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	4642      	mov	r2, r8
 800a79c:	4631      	mov	r1, r6
 800a79e:	4628      	mov	r0, r5
 800a7a0:	47b8      	blx	r7
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d12c      	bne.n	800a800 <_printf_float+0x24c>
 800a7a6:	e764      	b.n	800a672 <_printf_float+0xbe>
 800a7a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7ac:	f240 80e0 	bls.w	800a970 <_printf_float+0x3bc>
 800a7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f7f6 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d034      	beq.n	800a82a <_printf_float+0x276>
 800a7c0:	4a37      	ldr	r2, [pc, #220]	; (800a8a0 <_printf_float+0x2ec>)
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b8      	blx	r7
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f43f af51 	beq.w	800a672 <_printf_float+0xbe>
 800a7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	db02      	blt.n	800a7de <_printf_float+0x22a>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	07d8      	lsls	r0, r3, #31
 800a7dc:	d510      	bpl.n	800a800 <_printf_float+0x24c>
 800a7de:	ee18 3a10 	vmov	r3, s16
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	47b8      	blx	r7
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f43f af41 	beq.w	800a672 <_printf_float+0xbe>
 800a7f0:	f04f 0800 	mov.w	r8, #0
 800a7f4:	f104 091a 	add.w	r9, r4, #26
 800a7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	4543      	cmp	r3, r8
 800a7fe:	dc09      	bgt.n	800a814 <_printf_float+0x260>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	079b      	lsls	r3, r3, #30
 800a804:	f100 8107 	bmi.w	800aa16 <_printf_float+0x462>
 800a808:	68e0      	ldr	r0, [r4, #12]
 800a80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a80c:	4298      	cmp	r0, r3
 800a80e:	bfb8      	it	lt
 800a810:	4618      	movlt	r0, r3
 800a812:	e730      	b.n	800a676 <_printf_float+0xc2>
 800a814:	2301      	movs	r3, #1
 800a816:	464a      	mov	r2, r9
 800a818:	4631      	mov	r1, r6
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	3001      	adds	r0, #1
 800a820:	f43f af27 	beq.w	800a672 <_printf_float+0xbe>
 800a824:	f108 0801 	add.w	r8, r8, #1
 800a828:	e7e6      	b.n	800a7f8 <_printf_float+0x244>
 800a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dc39      	bgt.n	800a8a4 <_printf_float+0x2f0>
 800a830:	4a1b      	ldr	r2, [pc, #108]	; (800a8a0 <_printf_float+0x2ec>)
 800a832:	2301      	movs	r3, #1
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	f43f af19 	beq.w	800a672 <_printf_float+0xbe>
 800a840:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a844:	4313      	orrs	r3, r2
 800a846:	d102      	bne.n	800a84e <_printf_float+0x29a>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	07d9      	lsls	r1, r3, #31
 800a84c:	d5d8      	bpl.n	800a800 <_printf_float+0x24c>
 800a84e:	ee18 3a10 	vmov	r3, s16
 800a852:	4652      	mov	r2, sl
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f af09 	beq.w	800a672 <_printf_float+0xbe>
 800a860:	f04f 0900 	mov.w	r9, #0
 800a864:	f104 0a1a 	add.w	sl, r4, #26
 800a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86a:	425b      	negs	r3, r3
 800a86c:	454b      	cmp	r3, r9
 800a86e:	dc01      	bgt.n	800a874 <_printf_float+0x2c0>
 800a870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a872:	e792      	b.n	800a79a <_printf_float+0x1e6>
 800a874:	2301      	movs	r3, #1
 800a876:	4652      	mov	r2, sl
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f aef7 	beq.w	800a672 <_printf_float+0xbe>
 800a884:	f109 0901 	add.w	r9, r9, #1
 800a888:	e7ee      	b.n	800a868 <_printf_float+0x2b4>
 800a88a:	bf00      	nop
 800a88c:	7fefffff 	.word	0x7fefffff
 800a890:	0800d010 	.word	0x0800d010
 800a894:	0800d014 	.word	0x0800d014
 800a898:	0800d018 	.word	0x0800d018
 800a89c:	0800d01c 	.word	0x0800d01c
 800a8a0:	0800d020 	.word	0x0800d020
 800a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	bfa8      	it	ge
 800a8ac:	461a      	movge	r2, r3
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	dc37      	bgt.n	800a924 <_printf_float+0x370>
 800a8b4:	f04f 0b00 	mov.w	fp, #0
 800a8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8bc:	f104 021a 	add.w	r2, r4, #26
 800a8c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	eba3 0309 	sub.w	r3, r3, r9
 800a8c8:	455b      	cmp	r3, fp
 800a8ca:	dc33      	bgt.n	800a934 <_printf_float+0x380>
 800a8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	db3b      	blt.n	800a94c <_printf_float+0x398>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	07da      	lsls	r2, r3, #31
 800a8d8:	d438      	bmi.n	800a94c <_printf_float+0x398>
 800a8da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a8de:	eba2 0903 	sub.w	r9, r2, r3
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	1ad2      	subs	r2, r2, r3
 800a8e6:	4591      	cmp	r9, r2
 800a8e8:	bfa8      	it	ge
 800a8ea:	4691      	movge	r9, r2
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	dc35      	bgt.n	800a95e <_printf_float+0x3aa>
 800a8f2:	f04f 0800 	mov.w	r8, #0
 800a8f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8fa:	f104 0a1a 	add.w	sl, r4, #26
 800a8fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	eba3 0309 	sub.w	r3, r3, r9
 800a908:	4543      	cmp	r3, r8
 800a90a:	f77f af79 	ble.w	800a800 <_printf_float+0x24c>
 800a90e:	2301      	movs	r3, #1
 800a910:	4652      	mov	r2, sl
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f aeaa 	beq.w	800a672 <_printf_float+0xbe>
 800a91e:	f108 0801 	add.w	r8, r8, #1
 800a922:	e7ec      	b.n	800a8fe <_printf_float+0x34a>
 800a924:	4613      	mov	r3, r2
 800a926:	4631      	mov	r1, r6
 800a928:	4642      	mov	r2, r8
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	d1c0      	bne.n	800a8b4 <_printf_float+0x300>
 800a932:	e69e      	b.n	800a672 <_printf_float+0xbe>
 800a934:	2301      	movs	r3, #1
 800a936:	4631      	mov	r1, r6
 800a938:	4628      	mov	r0, r5
 800a93a:	9205      	str	r2, [sp, #20]
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f ae97 	beq.w	800a672 <_printf_float+0xbe>
 800a944:	9a05      	ldr	r2, [sp, #20]
 800a946:	f10b 0b01 	add.w	fp, fp, #1
 800a94a:	e7b9      	b.n	800a8c0 <_printf_float+0x30c>
 800a94c:	ee18 3a10 	vmov	r3, s16
 800a950:	4652      	mov	r2, sl
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	d1be      	bne.n	800a8da <_printf_float+0x326>
 800a95c:	e689      	b.n	800a672 <_printf_float+0xbe>
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	464b      	mov	r3, r9
 800a962:	4442      	add	r2, r8
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	d1c1      	bne.n	800a8f2 <_printf_float+0x33e>
 800a96e:	e680      	b.n	800a672 <_printf_float+0xbe>
 800a970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a972:	2a01      	cmp	r2, #1
 800a974:	dc01      	bgt.n	800a97a <_printf_float+0x3c6>
 800a976:	07db      	lsls	r3, r3, #31
 800a978:	d53a      	bpl.n	800a9f0 <_printf_float+0x43c>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4642      	mov	r2, r8
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae74 	beq.w	800a672 <_printf_float+0xbe>
 800a98a:	ee18 3a10 	vmov	r3, s16
 800a98e:	4652      	mov	r2, sl
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f ae6b 	beq.w	800a672 <_printf_float+0xbe>
 800a99c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a9a8:	f7f6 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ac:	b9d8      	cbnz	r0, 800a9e6 <_printf_float+0x432>
 800a9ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a9b2:	f108 0201 	add.w	r2, r8, #1
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d10e      	bne.n	800a9de <_printf_float+0x42a>
 800a9c0:	e657      	b.n	800a672 <_printf_float+0xbe>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f ae50 	beq.w	800a672 <_printf_float+0xbe>
 800a9d2:	f108 0801 	add.w	r8, r8, #1
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4543      	cmp	r3, r8
 800a9dc:	dcf1      	bgt.n	800a9c2 <_printf_float+0x40e>
 800a9de:	464b      	mov	r3, r9
 800a9e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9e4:	e6da      	b.n	800a79c <_printf_float+0x1e8>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	f104 0a1a 	add.w	sl, r4, #26
 800a9ee:	e7f2      	b.n	800a9d6 <_printf_float+0x422>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	e7df      	b.n	800a9b6 <_printf_float+0x402>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	464a      	mov	r2, r9
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	f43f ae36 	beq.w	800a672 <_printf_float+0xbe>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa0e:	1a5b      	subs	r3, r3, r1
 800aa10:	4543      	cmp	r3, r8
 800aa12:	dcf0      	bgt.n	800a9f6 <_printf_float+0x442>
 800aa14:	e6f8      	b.n	800a808 <_printf_float+0x254>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	f104 0919 	add.w	r9, r4, #25
 800aa1e:	e7f4      	b.n	800aa0a <_printf_float+0x456>

0800aa20 <_printf_common>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	4616      	mov	r6, r2
 800aa26:	4699      	mov	r9, r3
 800aa28:	688a      	ldr	r2, [r1, #8]
 800aa2a:	690b      	ldr	r3, [r1, #16]
 800aa2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bfb8      	it	lt
 800aa34:	4613      	movlt	r3, r2
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b10a      	cbz	r2, 800aa46 <_printf_common+0x26>
 800aa42:	3301      	adds	r3, #1
 800aa44:	6033      	str	r3, [r6, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	0699      	lsls	r1, r3, #26
 800aa4a:	bf42      	ittt	mi
 800aa4c:	6833      	ldrmi	r3, [r6, #0]
 800aa4e:	3302      	addmi	r3, #2
 800aa50:	6033      	strmi	r3, [r6, #0]
 800aa52:	6825      	ldr	r5, [r4, #0]
 800aa54:	f015 0506 	ands.w	r5, r5, #6
 800aa58:	d106      	bne.n	800aa68 <_printf_common+0x48>
 800aa5a:	f104 0a19 	add.w	sl, r4, #25
 800aa5e:	68e3      	ldr	r3, [r4, #12]
 800aa60:	6832      	ldr	r2, [r6, #0]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	dc26      	bgt.n	800aab6 <_printf_common+0x96>
 800aa68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa6c:	1e13      	subs	r3, r2, #0
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	2301      	movne	r3, #1
 800aa74:	0692      	lsls	r2, r2, #26
 800aa76:	d42b      	bmi.n	800aad0 <_printf_common+0xb0>
 800aa78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d01e      	beq.n	800aac4 <_printf_common+0xa4>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	6922      	ldr	r2, [r4, #16]
 800aa8a:	f003 0306 	and.w	r3, r3, #6
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	bf02      	ittt	eq
 800aa92:	68e5      	ldreq	r5, [r4, #12]
 800aa94:	6833      	ldreq	r3, [r6, #0]
 800aa96:	1aed      	subeq	r5, r5, r3
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	bf0c      	ite	eq
 800aa9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa0:	2500      	movne	r5, #0
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bfc4      	itt	gt
 800aaa6:	1a9b      	subgt	r3, r3, r2
 800aaa8:	18ed      	addgt	r5, r5, r3
 800aaaa:	2600      	movs	r6, #0
 800aaac:	341a      	adds	r4, #26
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	d11a      	bne.n	800aae8 <_printf_common+0xc8>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e008      	b.n	800aac8 <_printf_common+0xa8>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4649      	mov	r1, r9
 800aabc:	4638      	mov	r0, r7
 800aabe:	47c0      	blx	r8
 800aac0:	3001      	adds	r0, #1
 800aac2:	d103      	bne.n	800aacc <_printf_common+0xac>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	e7c6      	b.n	800aa5e <_printf_common+0x3e>
 800aad0:	18e1      	adds	r1, r4, r3
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	2030      	movs	r0, #48	; 0x30
 800aad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aada:	4422      	add	r2, r4
 800aadc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae4:	3302      	adds	r3, #2
 800aae6:	e7c7      	b.n	800aa78 <_printf_common+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0e6      	beq.n	800aac4 <_printf_common+0xa4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7d9      	b.n	800aaae <_printf_common+0x8e>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	7e0f      	ldrb	r7, [r1, #24]
 800ab02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab04:	2f78      	cmp	r7, #120	; 0x78
 800ab06:	4691      	mov	r9, r2
 800ab08:	4680      	mov	r8, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab12:	d807      	bhi.n	800ab24 <_printf_i+0x28>
 800ab14:	2f62      	cmp	r7, #98	; 0x62
 800ab16:	d80a      	bhi.n	800ab2e <_printf_i+0x32>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	f000 80d4 	beq.w	800acc6 <_printf_i+0x1ca>
 800ab1e:	2f58      	cmp	r7, #88	; 0x58
 800ab20:	f000 80c0 	beq.w	800aca4 <_printf_i+0x1a8>
 800ab24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab2c:	e03a      	b.n	800aba4 <_printf_i+0xa8>
 800ab2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab32:	2b15      	cmp	r3, #21
 800ab34:	d8f6      	bhi.n	800ab24 <_printf_i+0x28>
 800ab36:	a101      	add	r1, pc, #4	; (adr r1, 800ab3c <_printf_i+0x40>)
 800ab38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800aba9 	.word	0x0800aba9
 800ab44:	0800ab25 	.word	0x0800ab25
 800ab48:	0800ab25 	.word	0x0800ab25
 800ab4c:	0800ab25 	.word	0x0800ab25
 800ab50:	0800ab25 	.word	0x0800ab25
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ab25 	.word	0x0800ab25
 800ab5c:	0800ab25 	.word	0x0800ab25
 800ab60:	0800ab25 	.word	0x0800ab25
 800ab64:	0800ab25 	.word	0x0800ab25
 800ab68:	0800acad 	.word	0x0800acad
 800ab6c:	0800abd5 	.word	0x0800abd5
 800ab70:	0800ac67 	.word	0x0800ac67
 800ab74:	0800ab25 	.word	0x0800ab25
 800ab78:	0800ab25 	.word	0x0800ab25
 800ab7c:	0800accf 	.word	0x0800accf
 800ab80:	0800ab25 	.word	0x0800ab25
 800ab84:	0800abd5 	.word	0x0800abd5
 800ab88:	0800ab25 	.word	0x0800ab25
 800ab8c:	0800ab25 	.word	0x0800ab25
 800ab90:	0800ac6f 	.word	0x0800ac6f
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba4:	2301      	movs	r3, #1
 800aba6:	e09f      	b.n	800ace8 <_printf_i+0x1ec>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	0607      	lsls	r7, r0, #24
 800abae:	f103 0104 	add.w	r1, r3, #4
 800abb2:	6029      	str	r1, [r5, #0]
 800abb4:	d501      	bpl.n	800abba <_printf_i+0xbe>
 800abb6:	681e      	ldr	r6, [r3, #0]
 800abb8:	e003      	b.n	800abc2 <_printf_i+0xc6>
 800abba:	0646      	lsls	r6, r0, #25
 800abbc:	d5fb      	bpl.n	800abb6 <_printf_i+0xba>
 800abbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	da03      	bge.n	800abce <_printf_i+0xd2>
 800abc6:	232d      	movs	r3, #45	; 0x2d
 800abc8:	4276      	negs	r6, r6
 800abca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abce:	485a      	ldr	r0, [pc, #360]	; (800ad38 <_printf_i+0x23c>)
 800abd0:	230a      	movs	r3, #10
 800abd2:	e012      	b.n	800abfa <_printf_i+0xfe>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	6820      	ldr	r0, [r4, #0]
 800abd8:	1d19      	adds	r1, r3, #4
 800abda:	6029      	str	r1, [r5, #0]
 800abdc:	0605      	lsls	r5, r0, #24
 800abde:	d501      	bpl.n	800abe4 <_printf_i+0xe8>
 800abe0:	681e      	ldr	r6, [r3, #0]
 800abe2:	e002      	b.n	800abea <_printf_i+0xee>
 800abe4:	0641      	lsls	r1, r0, #25
 800abe6:	d5fb      	bpl.n	800abe0 <_printf_i+0xe4>
 800abe8:	881e      	ldrh	r6, [r3, #0]
 800abea:	4853      	ldr	r0, [pc, #332]	; (800ad38 <_printf_i+0x23c>)
 800abec:	2f6f      	cmp	r7, #111	; 0x6f
 800abee:	bf0c      	ite	eq
 800abf0:	2308      	moveq	r3, #8
 800abf2:	230a      	movne	r3, #10
 800abf4:	2100      	movs	r1, #0
 800abf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abfa:	6865      	ldr	r5, [r4, #4]
 800abfc:	60a5      	str	r5, [r4, #8]
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	bfa2      	ittt	ge
 800ac02:	6821      	ldrge	r1, [r4, #0]
 800ac04:	f021 0104 	bicge.w	r1, r1, #4
 800ac08:	6021      	strge	r1, [r4, #0]
 800ac0a:	b90e      	cbnz	r6, 800ac10 <_printf_i+0x114>
 800ac0c:	2d00      	cmp	r5, #0
 800ac0e:	d04b      	beq.n	800aca8 <_printf_i+0x1ac>
 800ac10:	4615      	mov	r5, r2
 800ac12:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac16:	fb03 6711 	mls	r7, r3, r1, r6
 800ac1a:	5dc7      	ldrb	r7, [r0, r7]
 800ac1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac20:	4637      	mov	r7, r6
 800ac22:	42bb      	cmp	r3, r7
 800ac24:	460e      	mov	r6, r1
 800ac26:	d9f4      	bls.n	800ac12 <_printf_i+0x116>
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d10b      	bne.n	800ac44 <_printf_i+0x148>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	07de      	lsls	r6, r3, #31
 800ac30:	d508      	bpl.n	800ac44 <_printf_i+0x148>
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	4299      	cmp	r1, r3
 800ac38:	bfde      	ittt	le
 800ac3a:	2330      	movle	r3, #48	; 0x30
 800ac3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac44:	1b52      	subs	r2, r2, r5
 800ac46:	6122      	str	r2, [r4, #16]
 800ac48:	f8cd a000 	str.w	sl, [sp]
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	aa03      	add	r2, sp, #12
 800ac50:	4621      	mov	r1, r4
 800ac52:	4640      	mov	r0, r8
 800ac54:	f7ff fee4 	bl	800aa20 <_printf_common>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d14a      	bne.n	800acf2 <_printf_i+0x1f6>
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	b004      	add	sp, #16
 800ac62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f043 0320 	orr.w	r3, r3, #32
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	4833      	ldr	r0, [pc, #204]	; (800ad3c <_printf_i+0x240>)
 800ac70:	2778      	movs	r7, #120	; 0x78
 800ac72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	6829      	ldr	r1, [r5, #0]
 800ac7a:	061f      	lsls	r7, r3, #24
 800ac7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac80:	d402      	bmi.n	800ac88 <_printf_i+0x18c>
 800ac82:	065f      	lsls	r7, r3, #25
 800ac84:	bf48      	it	mi
 800ac86:	b2b6      	uxthmi	r6, r6
 800ac88:	07df      	lsls	r7, r3, #31
 800ac8a:	bf48      	it	mi
 800ac8c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac90:	6029      	str	r1, [r5, #0]
 800ac92:	bf48      	it	mi
 800ac94:	6023      	strmi	r3, [r4, #0]
 800ac96:	b91e      	cbnz	r6, 800aca0 <_printf_i+0x1a4>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	f023 0320 	bic.w	r3, r3, #32
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	2310      	movs	r3, #16
 800aca2:	e7a7      	b.n	800abf4 <_printf_i+0xf8>
 800aca4:	4824      	ldr	r0, [pc, #144]	; (800ad38 <_printf_i+0x23c>)
 800aca6:	e7e4      	b.n	800ac72 <_printf_i+0x176>
 800aca8:	4615      	mov	r5, r2
 800acaa:	e7bd      	b.n	800ac28 <_printf_i+0x12c>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	6826      	ldr	r6, [r4, #0]
 800acb0:	6961      	ldr	r1, [r4, #20]
 800acb2:	1d18      	adds	r0, r3, #4
 800acb4:	6028      	str	r0, [r5, #0]
 800acb6:	0635      	lsls	r5, r6, #24
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	d501      	bpl.n	800acc0 <_printf_i+0x1c4>
 800acbc:	6019      	str	r1, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <_printf_i+0x1ca>
 800acc0:	0670      	lsls	r0, r6, #25
 800acc2:	d5fb      	bpl.n	800acbc <_printf_i+0x1c0>
 800acc4:	8019      	strh	r1, [r3, #0]
 800acc6:	2300      	movs	r3, #0
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	4615      	mov	r5, r2
 800accc:	e7bc      	b.n	800ac48 <_printf_i+0x14c>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	602a      	str	r2, [r5, #0]
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	6862      	ldr	r2, [r4, #4]
 800acd8:	2100      	movs	r1, #0
 800acda:	4628      	mov	r0, r5
 800acdc:	f7f5 fa78 	bl	80001d0 <memchr>
 800ace0:	b108      	cbz	r0, 800ace6 <_printf_i+0x1ea>
 800ace2:	1b40      	subs	r0, r0, r5
 800ace4:	6060      	str	r0, [r4, #4]
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	2300      	movs	r3, #0
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	e7aa      	b.n	800ac48 <_printf_i+0x14c>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	462a      	mov	r2, r5
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	47d0      	blx	sl
 800acfc:	3001      	adds	r0, #1
 800acfe:	d0ad      	beq.n	800ac5c <_printf_i+0x160>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	079b      	lsls	r3, r3, #30
 800ad04:	d413      	bmi.n	800ad2e <_printf_i+0x232>
 800ad06:	68e0      	ldr	r0, [r4, #12]
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	4298      	cmp	r0, r3
 800ad0c:	bfb8      	it	lt
 800ad0e:	4618      	movlt	r0, r3
 800ad10:	e7a6      	b.n	800ac60 <_printf_i+0x164>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4632      	mov	r2, r6
 800ad16:	4649      	mov	r1, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	47d0      	blx	sl
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d09d      	beq.n	800ac5c <_printf_i+0x160>
 800ad20:	3501      	adds	r5, #1
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	9903      	ldr	r1, [sp, #12]
 800ad26:	1a5b      	subs	r3, r3, r1
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dcf2      	bgt.n	800ad12 <_printf_i+0x216>
 800ad2c:	e7eb      	b.n	800ad06 <_printf_i+0x20a>
 800ad2e:	2500      	movs	r5, #0
 800ad30:	f104 0619 	add.w	r6, r4, #25
 800ad34:	e7f5      	b.n	800ad22 <_printf_i+0x226>
 800ad36:	bf00      	nop
 800ad38:	0800d022 	.word	0x0800d022
 800ad3c:	0800d033 	.word	0x0800d033

0800ad40 <std>:
 800ad40:	2300      	movs	r3, #0
 800ad42:	b510      	push	{r4, lr}
 800ad44:	4604      	mov	r4, r0
 800ad46:	e9c0 3300 	strd	r3, r3, [r0]
 800ad4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad4e:	6083      	str	r3, [r0, #8]
 800ad50:	8181      	strh	r1, [r0, #12]
 800ad52:	6643      	str	r3, [r0, #100]	; 0x64
 800ad54:	81c2      	strh	r2, [r0, #14]
 800ad56:	6183      	str	r3, [r0, #24]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	305c      	adds	r0, #92	; 0x5c
 800ad5e:	f000 f9f7 	bl	800b150 <memset>
 800ad62:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <std+0x58>)
 800ad64:	6263      	str	r3, [r4, #36]	; 0x24
 800ad66:	4b0d      	ldr	r3, [pc, #52]	; (800ad9c <std+0x5c>)
 800ad68:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad6a:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <std+0x60>)
 800ad6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <std+0x64>)
 800ad70:	6323      	str	r3, [r4, #48]	; 0x30
 800ad72:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <std+0x68>)
 800ad74:	6224      	str	r4, [r4, #32]
 800ad76:	429c      	cmp	r4, r3
 800ad78:	d006      	beq.n	800ad88 <std+0x48>
 800ad7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad7e:	4294      	cmp	r4, r2
 800ad80:	d002      	beq.n	800ad88 <std+0x48>
 800ad82:	33d0      	adds	r3, #208	; 0xd0
 800ad84:	429c      	cmp	r4, r3
 800ad86:	d105      	bne.n	800ad94 <std+0x54>
 800ad88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad90:	f000 ba5a 	b.w	800b248 <__retarget_lock_init_recursive>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	bf00      	nop
 800ad98:	0800afa1 	.word	0x0800afa1
 800ad9c:	0800afc3 	.word	0x0800afc3
 800ada0:	0800affb 	.word	0x0800affb
 800ada4:	0800b01f 	.word	0x0800b01f
 800ada8:	2000a79c 	.word	0x2000a79c

0800adac <stdio_exit_handler>:
 800adac:	4a02      	ldr	r2, [pc, #8]	; (800adb8 <stdio_exit_handler+0xc>)
 800adae:	4903      	ldr	r1, [pc, #12]	; (800adbc <stdio_exit_handler+0x10>)
 800adb0:	4803      	ldr	r0, [pc, #12]	; (800adc0 <stdio_exit_handler+0x14>)
 800adb2:	f000 b869 	b.w	800ae88 <_fwalk_sglue>
 800adb6:	bf00      	nop
 800adb8:	20000034 	.word	0x20000034
 800adbc:	0800cbf1 	.word	0x0800cbf1
 800adc0:	20000040 	.word	0x20000040

0800adc4 <cleanup_stdio>:
 800adc4:	6841      	ldr	r1, [r0, #4]
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <cleanup_stdio+0x34>)
 800adc8:	4299      	cmp	r1, r3
 800adca:	b510      	push	{r4, lr}
 800adcc:	4604      	mov	r4, r0
 800adce:	d001      	beq.n	800add4 <cleanup_stdio+0x10>
 800add0:	f001 ff0e 	bl	800cbf0 <_fflush_r>
 800add4:	68a1      	ldr	r1, [r4, #8]
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <cleanup_stdio+0x38>)
 800add8:	4299      	cmp	r1, r3
 800adda:	d002      	beq.n	800ade2 <cleanup_stdio+0x1e>
 800addc:	4620      	mov	r0, r4
 800adde:	f001 ff07 	bl	800cbf0 <_fflush_r>
 800ade2:	68e1      	ldr	r1, [r4, #12]
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <cleanup_stdio+0x3c>)
 800ade6:	4299      	cmp	r1, r3
 800ade8:	d004      	beq.n	800adf4 <cleanup_stdio+0x30>
 800adea:	4620      	mov	r0, r4
 800adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf0:	f001 befe 	b.w	800cbf0 <_fflush_r>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	bf00      	nop
 800adf8:	2000a79c 	.word	0x2000a79c
 800adfc:	2000a804 	.word	0x2000a804
 800ae00:	2000a86c 	.word	0x2000a86c

0800ae04 <global_stdio_init.part.0>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <global_stdio_init.part.0+0x30>)
 800ae08:	4c0b      	ldr	r4, [pc, #44]	; (800ae38 <global_stdio_init.part.0+0x34>)
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <global_stdio_init.part.0+0x38>)
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	2200      	movs	r2, #0
 800ae12:	2104      	movs	r1, #4
 800ae14:	f7ff ff94 	bl	800ad40 <std>
 800ae18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	2109      	movs	r1, #9
 800ae20:	f7ff ff8e 	bl	800ad40 <std>
 800ae24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ae28:	2202      	movs	r2, #2
 800ae2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae2e:	2112      	movs	r1, #18
 800ae30:	f7ff bf86 	b.w	800ad40 <std>
 800ae34:	2000a8d4 	.word	0x2000a8d4
 800ae38:	2000a79c 	.word	0x2000a79c
 800ae3c:	0800adad 	.word	0x0800adad

0800ae40 <__sfp_lock_acquire>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sfp_lock_acquire+0x8>)
 800ae42:	f000 ba02 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	2000a8dd 	.word	0x2000a8dd

0800ae4c <__sfp_lock_release>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sfp_lock_release+0x8>)
 800ae4e:	f000 b9fd 	b.w	800b24c <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	2000a8dd 	.word	0x2000a8dd

0800ae58 <__sinit>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff fff0 	bl	800ae40 <__sfp_lock_acquire>
 800ae60:	6a23      	ldr	r3, [r4, #32]
 800ae62:	b11b      	cbz	r3, 800ae6c <__sinit+0x14>
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	f7ff bff0 	b.w	800ae4c <__sfp_lock_release>
 800ae6c:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <__sinit+0x28>)
 800ae6e:	6223      	str	r3, [r4, #32]
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <__sinit+0x2c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1f5      	bne.n	800ae64 <__sinit+0xc>
 800ae78:	f7ff ffc4 	bl	800ae04 <global_stdio_init.part.0>
 800ae7c:	e7f2      	b.n	800ae64 <__sinit+0xc>
 800ae7e:	bf00      	nop
 800ae80:	0800adc5 	.word	0x0800adc5
 800ae84:	2000a8d4 	.word	0x2000a8d4

0800ae88 <_fwalk_sglue>:
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	4688      	mov	r8, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	2600      	movs	r6, #0
 800ae94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae98:	f1b9 0901 	subs.w	r9, r9, #1
 800ae9c:	d505      	bpl.n	800aeaa <_fwalk_sglue+0x22>
 800ae9e:	6824      	ldr	r4, [r4, #0]
 800aea0:	2c00      	cmp	r4, #0
 800aea2:	d1f7      	bne.n	800ae94 <_fwalk_sglue+0xc>
 800aea4:	4630      	mov	r0, r6
 800aea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d907      	bls.n	800aec0 <_fwalk_sglue+0x38>
 800aeb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	d003      	beq.n	800aec0 <_fwalk_sglue+0x38>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4638      	mov	r0, r7
 800aebc:	47c0      	blx	r8
 800aebe:	4306      	orrs	r6, r0
 800aec0:	3568      	adds	r5, #104	; 0x68
 800aec2:	e7e9      	b.n	800ae98 <_fwalk_sglue+0x10>

0800aec4 <iprintf>:
 800aec4:	b40f      	push	{r0, r1, r2, r3}
 800aec6:	b507      	push	{r0, r1, r2, lr}
 800aec8:	4906      	ldr	r1, [pc, #24]	; (800aee4 <iprintf+0x20>)
 800aeca:	ab04      	add	r3, sp, #16
 800aecc:	6808      	ldr	r0, [r1, #0]
 800aece:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed2:	6881      	ldr	r1, [r0, #8]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	f001 fceb 	bl	800c8b0 <_vfiprintf_r>
 800aeda:	b003      	add	sp, #12
 800aedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee0:	b004      	add	sp, #16
 800aee2:	4770      	bx	lr
 800aee4:	2000008c 	.word	0x2000008c

0800aee8 <_puts_r>:
 800aee8:	6a03      	ldr	r3, [r0, #32]
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	6884      	ldr	r4, [r0, #8]
 800aeee:	4605      	mov	r5, r0
 800aef0:	460e      	mov	r6, r1
 800aef2:	b90b      	cbnz	r3, 800aef8 <_puts_r+0x10>
 800aef4:	f7ff ffb0 	bl	800ae58 <__sinit>
 800aef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aefa:	07db      	lsls	r3, r3, #31
 800aefc:	d405      	bmi.n	800af0a <_puts_r+0x22>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	0598      	lsls	r0, r3, #22
 800af02:	d402      	bmi.n	800af0a <_puts_r+0x22>
 800af04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af06:	f000 f9a0 	bl	800b24a <__retarget_lock_acquire_recursive>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	0719      	lsls	r1, r3, #28
 800af0e:	d513      	bpl.n	800af38 <_puts_r+0x50>
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	b18b      	cbz	r3, 800af38 <_puts_r+0x50>
 800af14:	3e01      	subs	r6, #1
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af1c:	3b01      	subs	r3, #1
 800af1e:	60a3      	str	r3, [r4, #8]
 800af20:	b9e9      	cbnz	r1, 800af5e <_puts_r+0x76>
 800af22:	2b00      	cmp	r3, #0
 800af24:	da2e      	bge.n	800af84 <_puts_r+0x9c>
 800af26:	4622      	mov	r2, r4
 800af28:	210a      	movs	r1, #10
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f87b 	bl	800b026 <__swbuf_r>
 800af30:	3001      	adds	r0, #1
 800af32:	d007      	beq.n	800af44 <_puts_r+0x5c>
 800af34:	250a      	movs	r5, #10
 800af36:	e007      	b.n	800af48 <_puts_r+0x60>
 800af38:	4621      	mov	r1, r4
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 f8b0 	bl	800b0a0 <__swsetup_r>
 800af40:	2800      	cmp	r0, #0
 800af42:	d0e7      	beq.n	800af14 <_puts_r+0x2c>
 800af44:	f04f 35ff 	mov.w	r5, #4294967295
 800af48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af4a:	07da      	lsls	r2, r3, #31
 800af4c:	d405      	bmi.n	800af5a <_puts_r+0x72>
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	059b      	lsls	r3, r3, #22
 800af52:	d402      	bmi.n	800af5a <_puts_r+0x72>
 800af54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af56:	f000 f979 	bl	800b24c <__retarget_lock_release_recursive>
 800af5a:	4628      	mov	r0, r5
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	2b00      	cmp	r3, #0
 800af60:	da04      	bge.n	800af6c <_puts_r+0x84>
 800af62:	69a2      	ldr	r2, [r4, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	dc06      	bgt.n	800af76 <_puts_r+0x8e>
 800af68:	290a      	cmp	r1, #10
 800af6a:	d004      	beq.n	800af76 <_puts_r+0x8e>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	7019      	strb	r1, [r3, #0]
 800af74:	e7cf      	b.n	800af16 <_puts_r+0x2e>
 800af76:	4622      	mov	r2, r4
 800af78:	4628      	mov	r0, r5
 800af7a:	f000 f854 	bl	800b026 <__swbuf_r>
 800af7e:	3001      	adds	r0, #1
 800af80:	d1c9      	bne.n	800af16 <_puts_r+0x2e>
 800af82:	e7df      	b.n	800af44 <_puts_r+0x5c>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	250a      	movs	r5, #10
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	701d      	strb	r5, [r3, #0]
 800af8e:	e7db      	b.n	800af48 <_puts_r+0x60>

0800af90 <puts>:
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <puts+0xc>)
 800af92:	4601      	mov	r1, r0
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	f7ff bfa7 	b.w	800aee8 <_puts_r>
 800af9a:	bf00      	nop
 800af9c:	2000008c 	.word	0x2000008c

0800afa0 <__sread>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	460c      	mov	r4, r1
 800afa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa8:	f000 f900 	bl	800b1ac <_read_r>
 800afac:	2800      	cmp	r0, #0
 800afae:	bfab      	itete	ge
 800afb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afb2:	89a3      	ldrhlt	r3, [r4, #12]
 800afb4:	181b      	addge	r3, r3, r0
 800afb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afba:	bfac      	ite	ge
 800afbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800afbe:	81a3      	strhlt	r3, [r4, #12]
 800afc0:	bd10      	pop	{r4, pc}

0800afc2 <__swrite>:
 800afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc6:	461f      	mov	r7, r3
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	05db      	lsls	r3, r3, #23
 800afcc:	4605      	mov	r5, r0
 800afce:	460c      	mov	r4, r1
 800afd0:	4616      	mov	r6, r2
 800afd2:	d505      	bpl.n	800afe0 <__swrite+0x1e>
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	2302      	movs	r3, #2
 800afda:	2200      	movs	r2, #0
 800afdc:	f000 f8d4 	bl	800b188 <_lseek_r>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	4632      	mov	r2, r6
 800afee:	463b      	mov	r3, r7
 800aff0:	4628      	mov	r0, r5
 800aff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	f000 b8eb 	b.w	800b1d0 <_write_r>

0800affa <__sseek>:
 800affa:	b510      	push	{r4, lr}
 800affc:	460c      	mov	r4, r1
 800affe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b002:	f000 f8c1 	bl	800b188 <_lseek_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	bf15      	itete	ne
 800b00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b016:	81a3      	strheq	r3, [r4, #12]
 800b018:	bf18      	it	ne
 800b01a:	81a3      	strhne	r3, [r4, #12]
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <__sclose>:
 800b01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b022:	f000 b8a1 	b.w	800b168 <_close_r>

0800b026 <__swbuf_r>:
 800b026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b028:	460e      	mov	r6, r1
 800b02a:	4614      	mov	r4, r2
 800b02c:	4605      	mov	r5, r0
 800b02e:	b118      	cbz	r0, 800b038 <__swbuf_r+0x12>
 800b030:	6a03      	ldr	r3, [r0, #32]
 800b032:	b90b      	cbnz	r3, 800b038 <__swbuf_r+0x12>
 800b034:	f7ff ff10 	bl	800ae58 <__sinit>
 800b038:	69a3      	ldr	r3, [r4, #24]
 800b03a:	60a3      	str	r3, [r4, #8]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	071a      	lsls	r2, r3, #28
 800b040:	d525      	bpl.n	800b08e <__swbuf_r+0x68>
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	b31b      	cbz	r3, 800b08e <__swbuf_r+0x68>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	6922      	ldr	r2, [r4, #16]
 800b04a:	1a98      	subs	r0, r3, r2
 800b04c:	6963      	ldr	r3, [r4, #20]
 800b04e:	b2f6      	uxtb	r6, r6
 800b050:	4283      	cmp	r3, r0
 800b052:	4637      	mov	r7, r6
 800b054:	dc04      	bgt.n	800b060 <__swbuf_r+0x3a>
 800b056:	4621      	mov	r1, r4
 800b058:	4628      	mov	r0, r5
 800b05a:	f001 fdc9 	bl	800cbf0 <_fflush_r>
 800b05e:	b9e0      	cbnz	r0, 800b09a <__swbuf_r+0x74>
 800b060:	68a3      	ldr	r3, [r4, #8]
 800b062:	3b01      	subs	r3, #1
 800b064:	60a3      	str	r3, [r4, #8]
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	6022      	str	r2, [r4, #0]
 800b06c:	701e      	strb	r6, [r3, #0]
 800b06e:	6962      	ldr	r2, [r4, #20]
 800b070:	1c43      	adds	r3, r0, #1
 800b072:	429a      	cmp	r2, r3
 800b074:	d004      	beq.n	800b080 <__swbuf_r+0x5a>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	07db      	lsls	r3, r3, #31
 800b07a:	d506      	bpl.n	800b08a <__swbuf_r+0x64>
 800b07c:	2e0a      	cmp	r6, #10
 800b07e:	d104      	bne.n	800b08a <__swbuf_r+0x64>
 800b080:	4621      	mov	r1, r4
 800b082:	4628      	mov	r0, r5
 800b084:	f001 fdb4 	bl	800cbf0 <_fflush_r>
 800b088:	b938      	cbnz	r0, 800b09a <__swbuf_r+0x74>
 800b08a:	4638      	mov	r0, r7
 800b08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08e:	4621      	mov	r1, r4
 800b090:	4628      	mov	r0, r5
 800b092:	f000 f805 	bl	800b0a0 <__swsetup_r>
 800b096:	2800      	cmp	r0, #0
 800b098:	d0d5      	beq.n	800b046 <__swbuf_r+0x20>
 800b09a:	f04f 37ff 	mov.w	r7, #4294967295
 800b09e:	e7f4      	b.n	800b08a <__swbuf_r+0x64>

0800b0a0 <__swsetup_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	; (800b14c <__swsetup_r+0xac>)
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	b118      	cbz	r0, 800b0b4 <__swsetup_r+0x14>
 800b0ac:	6a03      	ldr	r3, [r0, #32]
 800b0ae:	b90b      	cbnz	r3, 800b0b4 <__swsetup_r+0x14>
 800b0b0:	f7ff fed2 	bl	800ae58 <__sinit>
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0ba:	0718      	lsls	r0, r3, #28
 800b0bc:	d422      	bmi.n	800b104 <__swsetup_r+0x64>
 800b0be:	06d9      	lsls	r1, r3, #27
 800b0c0:	d407      	bmi.n	800b0d2 <__swsetup_r+0x32>
 800b0c2:	2309      	movs	r3, #9
 800b0c4:	602b      	str	r3, [r5, #0]
 800b0c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e034      	b.n	800b13c <__swsetup_r+0x9c>
 800b0d2:	0758      	lsls	r0, r3, #29
 800b0d4:	d512      	bpl.n	800b0fc <__swsetup_r+0x5c>
 800b0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d8:	b141      	cbz	r1, 800b0ec <__swsetup_r+0x4c>
 800b0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d002      	beq.n	800b0e8 <__swsetup_r+0x48>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f000 ff3e 	bl	800bf64 <_free_r>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	6063      	str	r3, [r4, #4]
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f043 0308 	orr.w	r3, r3, #8
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	b94b      	cbnz	r3, 800b11c <__swsetup_r+0x7c>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b112:	d003      	beq.n	800b11c <__swsetup_r+0x7c>
 800b114:	4621      	mov	r1, r4
 800b116:	4628      	mov	r0, r5
 800b118:	f001 fdb8 	bl	800cc8c <__smakebuf_r>
 800b11c:	89a0      	ldrh	r0, [r4, #12]
 800b11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b122:	f010 0301 	ands.w	r3, r0, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9e>
 800b128:	2300      	movs	r3, #0
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	6963      	ldr	r3, [r4, #20]
 800b12e:	425b      	negs	r3, r3
 800b130:	61a3      	str	r3, [r4, #24]
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	b943      	cbnz	r3, 800b148 <__swsetup_r+0xa8>
 800b136:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b13a:	d1c4      	bne.n	800b0c6 <__swsetup_r+0x26>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0781      	lsls	r1, r0, #30
 800b140:	bf58      	it	pl
 800b142:	6963      	ldrpl	r3, [r4, #20]
 800b144:	60a3      	str	r3, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x92>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x9c>
 800b14c:	2000008c 	.word	0x2000008c

0800b150 <memset>:
 800b150:	4402      	add	r2, r0
 800b152:	4603      	mov	r3, r0
 800b154:	4293      	cmp	r3, r2
 800b156:	d100      	bne.n	800b15a <memset+0xa>
 800b158:	4770      	bx	lr
 800b15a:	f803 1b01 	strb.w	r1, [r3], #1
 800b15e:	e7f9      	b.n	800b154 <memset+0x4>

0800b160 <_localeconv_r>:
 800b160:	4800      	ldr	r0, [pc, #0]	; (800b164 <_localeconv_r+0x4>)
 800b162:	4770      	bx	lr
 800b164:	20000180 	.word	0x20000180

0800b168 <_close_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d06      	ldr	r5, [pc, #24]	; (800b184 <_close_r+0x1c>)
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	4608      	mov	r0, r1
 800b172:	602b      	str	r3, [r5, #0]
 800b174:	f7f7 f9a7 	bl	80024c6 <_close>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d102      	bne.n	800b182 <_close_r+0x1a>
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	b103      	cbz	r3, 800b182 <_close_r+0x1a>
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	2000a8d8 	.word	0x2000a8d8

0800b188 <_lseek_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d07      	ldr	r5, [pc, #28]	; (800b1a8 <_lseek_r+0x20>)
 800b18c:	4604      	mov	r4, r0
 800b18e:	4608      	mov	r0, r1
 800b190:	4611      	mov	r1, r2
 800b192:	2200      	movs	r2, #0
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	f7f7 f9bc 	bl	8002514 <_lseek>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d102      	bne.n	800b1a6 <_lseek_r+0x1e>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	b103      	cbz	r3, 800b1a6 <_lseek_r+0x1e>
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	2000a8d8 	.word	0x2000a8d8

0800b1ac <_read_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d07      	ldr	r5, [pc, #28]	; (800b1cc <_read_r+0x20>)
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	602a      	str	r2, [r5, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f7f7 f94a 	bl	8002454 <_read>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_read_r+0x1e>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_read_r+0x1e>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	2000a8d8 	.word	0x2000a8d8

0800b1d0 <_write_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	; (800b1f0 <_write_r+0x20>)
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	4611      	mov	r1, r2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	602a      	str	r2, [r5, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f7 f955 	bl	800248e <_write>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_write_r+0x1e>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_write_r+0x1e>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	2000a8d8 	.word	0x2000a8d8

0800b1f4 <__errno>:
 800b1f4:	4b01      	ldr	r3, [pc, #4]	; (800b1fc <__errno+0x8>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	2000008c 	.word	0x2000008c

0800b200 <__libc_init_array>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4d0d      	ldr	r5, [pc, #52]	; (800b238 <__libc_init_array+0x38>)
 800b204:	4c0d      	ldr	r4, [pc, #52]	; (800b23c <__libc_init_array+0x3c>)
 800b206:	1b64      	subs	r4, r4, r5
 800b208:	10a4      	asrs	r4, r4, #2
 800b20a:	2600      	movs	r6, #0
 800b20c:	42a6      	cmp	r6, r4
 800b20e:	d109      	bne.n	800b224 <__libc_init_array+0x24>
 800b210:	4d0b      	ldr	r5, [pc, #44]	; (800b240 <__libc_init_array+0x40>)
 800b212:	4c0c      	ldr	r4, [pc, #48]	; (800b244 <__libc_init_array+0x44>)
 800b214:	f001 fe5a 	bl	800cecc <_init>
 800b218:	1b64      	subs	r4, r4, r5
 800b21a:	10a4      	asrs	r4, r4, #2
 800b21c:	2600      	movs	r6, #0
 800b21e:	42a6      	cmp	r6, r4
 800b220:	d105      	bne.n	800b22e <__libc_init_array+0x2e>
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	f855 3b04 	ldr.w	r3, [r5], #4
 800b228:	4798      	blx	r3
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7ee      	b.n	800b20c <__libc_init_array+0xc>
 800b22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b232:	4798      	blx	r3
 800b234:	3601      	adds	r6, #1
 800b236:	e7f2      	b.n	800b21e <__libc_init_array+0x1e>
 800b238:	0800d38c 	.word	0x0800d38c
 800b23c:	0800d38c 	.word	0x0800d38c
 800b240:	0800d38c 	.word	0x0800d38c
 800b244:	0800d390 	.word	0x0800d390

0800b248 <__retarget_lock_init_recursive>:
 800b248:	4770      	bx	lr

0800b24a <__retarget_lock_acquire_recursive>:
 800b24a:	4770      	bx	lr

0800b24c <__retarget_lock_release_recursive>:
 800b24c:	4770      	bx	lr

0800b24e <memcpy>:
 800b24e:	440a      	add	r2, r1
 800b250:	4291      	cmp	r1, r2
 800b252:	f100 33ff 	add.w	r3, r0, #4294967295
 800b256:	d100      	bne.n	800b25a <memcpy+0xc>
 800b258:	4770      	bx	lr
 800b25a:	b510      	push	{r4, lr}
 800b25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b264:	4291      	cmp	r1, r2
 800b266:	d1f9      	bne.n	800b25c <memcpy+0xe>
 800b268:	bd10      	pop	{r4, pc}

0800b26a <quorem>:
 800b26a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26e:	6903      	ldr	r3, [r0, #16]
 800b270:	690c      	ldr	r4, [r1, #16]
 800b272:	42a3      	cmp	r3, r4
 800b274:	4607      	mov	r7, r0
 800b276:	db7e      	blt.n	800b376 <quorem+0x10c>
 800b278:	3c01      	subs	r4, #1
 800b27a:	f101 0814 	add.w	r8, r1, #20
 800b27e:	f100 0514 	add.w	r5, r0, #20
 800b282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b28c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b290:	3301      	adds	r3, #1
 800b292:	429a      	cmp	r2, r3
 800b294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b29c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2a0:	d331      	bcc.n	800b306 <quorem+0x9c>
 800b2a2:	f04f 0e00 	mov.w	lr, #0
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	46ac      	mov	ip, r5
 800b2aa:	46f2      	mov	sl, lr
 800b2ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2b0:	b293      	uxth	r3, r2
 800b2b2:	fb06 e303 	mla	r3, r6, r3, lr
 800b2b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2ba:	0c1a      	lsrs	r2, r3, #16
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	ebaa 0303 	sub.w	r3, sl, r3
 800b2c2:	f8dc a000 	ldr.w	sl, [ip]
 800b2c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b2ca:	fb06 220e 	mla	r2, r6, lr, r2
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2d6:	b292      	uxth	r2, r2
 800b2d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b2dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2e4:	4581      	cmp	r9, r0
 800b2e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2ea:	f84c 3b04 	str.w	r3, [ip], #4
 800b2ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2f2:	d2db      	bcs.n	800b2ac <quorem+0x42>
 800b2f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2f8:	b92b      	cbnz	r3, 800b306 <quorem+0x9c>
 800b2fa:	9b01      	ldr	r3, [sp, #4]
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	429d      	cmp	r5, r3
 800b300:	461a      	mov	r2, r3
 800b302:	d32c      	bcc.n	800b35e <quorem+0xf4>
 800b304:	613c      	str	r4, [r7, #16]
 800b306:	4638      	mov	r0, r7
 800b308:	f001 f9a8 	bl	800c65c <__mcmp>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	db22      	blt.n	800b356 <quorem+0xec>
 800b310:	3601      	adds	r6, #1
 800b312:	4629      	mov	r1, r5
 800b314:	2000      	movs	r0, #0
 800b316:	f858 2b04 	ldr.w	r2, [r8], #4
 800b31a:	f8d1 c000 	ldr.w	ip, [r1]
 800b31e:	b293      	uxth	r3, r2
 800b320:	1ac3      	subs	r3, r0, r3
 800b322:	0c12      	lsrs	r2, r2, #16
 800b324:	fa13 f38c 	uxtah	r3, r3, ip
 800b328:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b32c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b330:	b29b      	uxth	r3, r3
 800b332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b336:	45c1      	cmp	r9, r8
 800b338:	f841 3b04 	str.w	r3, [r1], #4
 800b33c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b340:	d2e9      	bcs.n	800b316 <quorem+0xac>
 800b342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b34a:	b922      	cbnz	r2, 800b356 <quorem+0xec>
 800b34c:	3b04      	subs	r3, #4
 800b34e:	429d      	cmp	r5, r3
 800b350:	461a      	mov	r2, r3
 800b352:	d30a      	bcc.n	800b36a <quorem+0x100>
 800b354:	613c      	str	r4, [r7, #16]
 800b356:	4630      	mov	r0, r6
 800b358:	b003      	add	sp, #12
 800b35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35e:	6812      	ldr	r2, [r2, #0]
 800b360:	3b04      	subs	r3, #4
 800b362:	2a00      	cmp	r2, #0
 800b364:	d1ce      	bne.n	800b304 <quorem+0x9a>
 800b366:	3c01      	subs	r4, #1
 800b368:	e7c9      	b.n	800b2fe <quorem+0x94>
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	3b04      	subs	r3, #4
 800b36e:	2a00      	cmp	r2, #0
 800b370:	d1f0      	bne.n	800b354 <quorem+0xea>
 800b372:	3c01      	subs	r4, #1
 800b374:	e7eb      	b.n	800b34e <quorem+0xe4>
 800b376:	2000      	movs	r0, #0
 800b378:	e7ee      	b.n	800b358 <quorem+0xee>
 800b37a:	0000      	movs	r0, r0
 800b37c:	0000      	movs	r0, r0
	...

0800b380 <_dtoa_r>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	ed2d 8b04 	vpush	{d8-d9}
 800b388:	69c5      	ldr	r5, [r0, #28]
 800b38a:	b093      	sub	sp, #76	; 0x4c
 800b38c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b390:	ec57 6b10 	vmov	r6, r7, d0
 800b394:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b398:	9107      	str	r1, [sp, #28]
 800b39a:	4604      	mov	r4, r0
 800b39c:	920a      	str	r2, [sp, #40]	; 0x28
 800b39e:	930d      	str	r3, [sp, #52]	; 0x34
 800b3a0:	b975      	cbnz	r5, 800b3c0 <_dtoa_r+0x40>
 800b3a2:	2010      	movs	r0, #16
 800b3a4:	f000 fe2a 	bl	800bffc <malloc>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	61e0      	str	r0, [r4, #28]
 800b3ac:	b920      	cbnz	r0, 800b3b8 <_dtoa_r+0x38>
 800b3ae:	4bae      	ldr	r3, [pc, #696]	; (800b668 <_dtoa_r+0x2e8>)
 800b3b0:	21ef      	movs	r1, #239	; 0xef
 800b3b2:	48ae      	ldr	r0, [pc, #696]	; (800b66c <_dtoa_r+0x2ec>)
 800b3b4:	f001 fcd8 	bl	800cd68 <__assert_func>
 800b3b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3bc:	6005      	str	r5, [r0, #0]
 800b3be:	60c5      	str	r5, [r0, #12]
 800b3c0:	69e3      	ldr	r3, [r4, #28]
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	b151      	cbz	r1, 800b3dc <_dtoa_r+0x5c>
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	604a      	str	r2, [r1, #4]
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4093      	lsls	r3, r2
 800b3ce:	608b      	str	r3, [r1, #8]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 ff07 	bl	800c1e4 <_Bfree>
 800b3d6:	69e3      	ldr	r3, [r4, #28]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	1e3b      	subs	r3, r7, #0
 800b3de:	bfbb      	ittet	lt
 800b3e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3e4:	9303      	strlt	r3, [sp, #12]
 800b3e6:	2300      	movge	r3, #0
 800b3e8:	2201      	movlt	r2, #1
 800b3ea:	bfac      	ite	ge
 800b3ec:	f8c8 3000 	strge.w	r3, [r8]
 800b3f0:	f8c8 2000 	strlt.w	r2, [r8]
 800b3f4:	4b9e      	ldr	r3, [pc, #632]	; (800b670 <_dtoa_r+0x2f0>)
 800b3f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b3fa:	ea33 0308 	bics.w	r3, r3, r8
 800b3fe:	d11b      	bne.n	800b438 <_dtoa_r+0xb8>
 800b400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b402:	f242 730f 	movw	r3, #9999	; 0x270f
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b40c:	4333      	orrs	r3, r6
 800b40e:	f000 8593 	beq.w	800bf38 <_dtoa_r+0xbb8>
 800b412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b414:	b963      	cbnz	r3, 800b430 <_dtoa_r+0xb0>
 800b416:	4b97      	ldr	r3, [pc, #604]	; (800b674 <_dtoa_r+0x2f4>)
 800b418:	e027      	b.n	800b46a <_dtoa_r+0xea>
 800b41a:	4b97      	ldr	r3, [pc, #604]	; (800b678 <_dtoa_r+0x2f8>)
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	3308      	adds	r3, #8
 800b420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	9800      	ldr	r0, [sp, #0]
 800b426:	b013      	add	sp, #76	; 0x4c
 800b428:	ecbd 8b04 	vpop	{d8-d9}
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b430:	4b90      	ldr	r3, [pc, #576]	; (800b674 <_dtoa_r+0x2f4>)
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	3303      	adds	r3, #3
 800b436:	e7f3      	b.n	800b420 <_dtoa_r+0xa0>
 800b438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	ec51 0b17 	vmov	r0, r1, d7
 800b442:	eeb0 8a47 	vmov.f32	s16, s14
 800b446:	eef0 8a67 	vmov.f32	s17, s15
 800b44a:	2300      	movs	r3, #0
 800b44c:	f7f5 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b450:	4681      	mov	r9, r0
 800b452:	b160      	cbz	r0, 800b46e <_dtoa_r+0xee>
 800b454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b456:	2301      	movs	r3, #1
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 8568 	beq.w	800bf32 <_dtoa_r+0xbb2>
 800b462:	4b86      	ldr	r3, [pc, #536]	; (800b67c <_dtoa_r+0x2fc>)
 800b464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	3b01      	subs	r3, #1
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	e7da      	b.n	800b424 <_dtoa_r+0xa4>
 800b46e:	aa10      	add	r2, sp, #64	; 0x40
 800b470:	a911      	add	r1, sp, #68	; 0x44
 800b472:	4620      	mov	r0, r4
 800b474:	eeb0 0a48 	vmov.f32	s0, s16
 800b478:	eef0 0a68 	vmov.f32	s1, s17
 800b47c:	f001 f994 	bl	800c7a8 <__d2b>
 800b480:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b484:	4682      	mov	sl, r0
 800b486:	2d00      	cmp	r5, #0
 800b488:	d07f      	beq.n	800b58a <_dtoa_r+0x20a>
 800b48a:	ee18 3a90 	vmov	r3, s17
 800b48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b496:	ec51 0b18 	vmov	r0, r1, d8
 800b49a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b49e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4b75      	ldr	r3, [pc, #468]	; (800b680 <_dtoa_r+0x300>)
 800b4ac:	f7f4 feec 	bl	8000288 <__aeabi_dsub>
 800b4b0:	a367      	add	r3, pc, #412	; (adr r3, 800b650 <_dtoa_r+0x2d0>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f5 f89f 	bl	80005f8 <__aeabi_dmul>
 800b4ba:	a367      	add	r3, pc, #412	; (adr r3, 800b658 <_dtoa_r+0x2d8>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 fee4 	bl	800028c <__adddf3>
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	f7f5 f82b 	bl	8000524 <__aeabi_i2d>
 800b4ce:	a364      	add	r3, pc, #400	; (adr r3, 800b660 <_dtoa_r+0x2e0>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f5 f890 	bl	80005f8 <__aeabi_dmul>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f4 fed4 	bl	800028c <__adddf3>
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	f7f5 fb36 	bl	8000b58 <__aeabi_d2iz>
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4683      	mov	fp, r0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	f7f5 faf1 	bl	8000adc <__aeabi_dcmplt>
 800b4fa:	b148      	cbz	r0, 800b510 <_dtoa_r+0x190>
 800b4fc:	4658      	mov	r0, fp
 800b4fe:	f7f5 f811 	bl	8000524 <__aeabi_i2d>
 800b502:	4632      	mov	r2, r6
 800b504:	463b      	mov	r3, r7
 800b506:	f7f5 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50a:	b908      	cbnz	r0, 800b510 <_dtoa_r+0x190>
 800b50c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b510:	f1bb 0f16 	cmp.w	fp, #22
 800b514:	d857      	bhi.n	800b5c6 <_dtoa_r+0x246>
 800b516:	4b5b      	ldr	r3, [pc, #364]	; (800b684 <_dtoa_r+0x304>)
 800b518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	ec51 0b18 	vmov	r0, r1, d8
 800b524:	f7f5 fada 	bl	8000adc <__aeabi_dcmplt>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d04e      	beq.n	800b5ca <_dtoa_r+0x24a>
 800b52c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b530:	2300      	movs	r3, #0
 800b532:	930c      	str	r3, [sp, #48]	; 0x30
 800b534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b536:	1b5b      	subs	r3, r3, r5
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	bf45      	ittet	mi
 800b53c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b540:	9305      	strmi	r3, [sp, #20]
 800b542:	2300      	movpl	r3, #0
 800b544:	2300      	movmi	r3, #0
 800b546:	9206      	str	r2, [sp, #24]
 800b548:	bf54      	ite	pl
 800b54a:	9305      	strpl	r3, [sp, #20]
 800b54c:	9306      	strmi	r3, [sp, #24]
 800b54e:	f1bb 0f00 	cmp.w	fp, #0
 800b552:	db3c      	blt.n	800b5ce <_dtoa_r+0x24e>
 800b554:	9b06      	ldr	r3, [sp, #24]
 800b556:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b55a:	445b      	add	r3, fp
 800b55c:	9306      	str	r3, [sp, #24]
 800b55e:	2300      	movs	r3, #0
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	9b07      	ldr	r3, [sp, #28]
 800b564:	2b09      	cmp	r3, #9
 800b566:	d868      	bhi.n	800b63a <_dtoa_r+0x2ba>
 800b568:	2b05      	cmp	r3, #5
 800b56a:	bfc4      	itt	gt
 800b56c:	3b04      	subgt	r3, #4
 800b56e:	9307      	strgt	r3, [sp, #28]
 800b570:	9b07      	ldr	r3, [sp, #28]
 800b572:	f1a3 0302 	sub.w	r3, r3, #2
 800b576:	bfcc      	ite	gt
 800b578:	2500      	movgt	r5, #0
 800b57a:	2501      	movle	r5, #1
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	f200 8085 	bhi.w	800b68c <_dtoa_r+0x30c>
 800b582:	e8df f003 	tbb	[pc, r3]
 800b586:	3b2e      	.short	0x3b2e
 800b588:	5839      	.short	0x5839
 800b58a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b58e:	441d      	add	r5, r3
 800b590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b594:	2b20      	cmp	r3, #32
 800b596:	bfc1      	itttt	gt
 800b598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b59c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b5a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b5a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b5a8:	bfd6      	itet	le
 800b5aa:	f1c3 0320 	rsble	r3, r3, #32
 800b5ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800b5b2:	fa06 f003 	lslle.w	r0, r6, r3
 800b5b6:	f7f4 ffa5 	bl	8000504 <__aeabi_ui2d>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b5c0:	3d01      	subs	r5, #1
 800b5c2:	920e      	str	r2, [sp, #56]	; 0x38
 800b5c4:	e76f      	b.n	800b4a6 <_dtoa_r+0x126>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e7b3      	b.n	800b532 <_dtoa_r+0x1b2>
 800b5ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b5cc:	e7b2      	b.n	800b534 <_dtoa_r+0x1b4>
 800b5ce:	9b05      	ldr	r3, [sp, #20]
 800b5d0:	eba3 030b 	sub.w	r3, r3, fp
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	f1cb 0300 	rsb	r3, fp, #0
 800b5da:	9308      	str	r3, [sp, #32]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5e0:	e7bf      	b.n	800b562 <_dtoa_r+0x1e2>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc52      	bgt.n	800b692 <_dtoa_r+0x312>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b5f6:	e00b      	b.n	800b610 <_dtoa_r+0x290>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e7f3      	b.n	800b5e4 <_dtoa_r+0x264>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b602:	445b      	add	r3, fp
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	3301      	adds	r3, #1
 800b608:	2b01      	cmp	r3, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	bfb8      	it	lt
 800b60e:	2301      	movlt	r3, #1
 800b610:	69e0      	ldr	r0, [r4, #28]
 800b612:	2100      	movs	r1, #0
 800b614:	2204      	movs	r2, #4
 800b616:	f102 0614 	add.w	r6, r2, #20
 800b61a:	429e      	cmp	r6, r3
 800b61c:	d93d      	bls.n	800b69a <_dtoa_r+0x31a>
 800b61e:	6041      	str	r1, [r0, #4]
 800b620:	4620      	mov	r0, r4
 800b622:	f000 fd9f 	bl	800c164 <_Balloc>
 800b626:	9000      	str	r0, [sp, #0]
 800b628:	2800      	cmp	r0, #0
 800b62a:	d139      	bne.n	800b6a0 <_dtoa_r+0x320>
 800b62c:	4b16      	ldr	r3, [pc, #88]	; (800b688 <_dtoa_r+0x308>)
 800b62e:	4602      	mov	r2, r0
 800b630:	f240 11af 	movw	r1, #431	; 0x1af
 800b634:	e6bd      	b.n	800b3b2 <_dtoa_r+0x32>
 800b636:	2301      	movs	r3, #1
 800b638:	e7e1      	b.n	800b5fe <_dtoa_r+0x27e>
 800b63a:	2501      	movs	r5, #1
 800b63c:	2300      	movs	r3, #0
 800b63e:	9307      	str	r3, [sp, #28]
 800b640:	9509      	str	r5, [sp, #36]	; 0x24
 800b642:	f04f 33ff 	mov.w	r3, #4294967295
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	2200      	movs	r2, #0
 800b64c:	2312      	movs	r3, #18
 800b64e:	e7d1      	b.n	800b5f4 <_dtoa_r+0x274>
 800b650:	636f4361 	.word	0x636f4361
 800b654:	3fd287a7 	.word	0x3fd287a7
 800b658:	8b60c8b3 	.word	0x8b60c8b3
 800b65c:	3fc68a28 	.word	0x3fc68a28
 800b660:	509f79fb 	.word	0x509f79fb
 800b664:	3fd34413 	.word	0x3fd34413
 800b668:	0800d051 	.word	0x0800d051
 800b66c:	0800d068 	.word	0x0800d068
 800b670:	7ff00000 	.word	0x7ff00000
 800b674:	0800d04d 	.word	0x0800d04d
 800b678:	0800d044 	.word	0x0800d044
 800b67c:	0800d021 	.word	0x0800d021
 800b680:	3ff80000 	.word	0x3ff80000
 800b684:	0800d158 	.word	0x0800d158
 800b688:	0800d0c0 	.word	0x0800d0c0
 800b68c:	2301      	movs	r3, #1
 800b68e:	9309      	str	r3, [sp, #36]	; 0x24
 800b690:	e7d7      	b.n	800b642 <_dtoa_r+0x2c2>
 800b692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	9304      	str	r3, [sp, #16]
 800b698:	e7ba      	b.n	800b610 <_dtoa_r+0x290>
 800b69a:	3101      	adds	r1, #1
 800b69c:	0052      	lsls	r2, r2, #1
 800b69e:	e7ba      	b.n	800b616 <_dtoa_r+0x296>
 800b6a0:	69e3      	ldr	r3, [r4, #28]
 800b6a2:	9a00      	ldr	r2, [sp, #0]
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	2b0e      	cmp	r3, #14
 800b6aa:	f200 80a8 	bhi.w	800b7fe <_dtoa_r+0x47e>
 800b6ae:	2d00      	cmp	r5, #0
 800b6b0:	f000 80a5 	beq.w	800b7fe <_dtoa_r+0x47e>
 800b6b4:	f1bb 0f00 	cmp.w	fp, #0
 800b6b8:	dd38      	ble.n	800b72c <_dtoa_r+0x3ac>
 800b6ba:	4bc0      	ldr	r3, [pc, #768]	; (800b9bc <_dtoa_r+0x63c>)
 800b6bc:	f00b 020f 	and.w	r2, fp, #15
 800b6c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b6c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b6d0:	d019      	beq.n	800b706 <_dtoa_r+0x386>
 800b6d2:	4bbb      	ldr	r3, [pc, #748]	; (800b9c0 <_dtoa_r+0x640>)
 800b6d4:	ec51 0b18 	vmov	r0, r1, d8
 800b6d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6dc:	f7f5 f8b6 	bl	800084c <__aeabi_ddiv>
 800b6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e4:	f008 080f 	and.w	r8, r8, #15
 800b6e8:	2503      	movs	r5, #3
 800b6ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b9c0 <_dtoa_r+0x640>
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	d10a      	bne.n	800b70a <_dtoa_r+0x38a>
 800b6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	463b      	mov	r3, r7
 800b6fc:	f7f5 f8a6 	bl	800084c <__aeabi_ddiv>
 800b700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b704:	e02b      	b.n	800b75e <_dtoa_r+0x3de>
 800b706:	2502      	movs	r5, #2
 800b708:	e7ef      	b.n	800b6ea <_dtoa_r+0x36a>
 800b70a:	f018 0f01 	tst.w	r8, #1
 800b70e:	d008      	beq.n	800b722 <_dtoa_r+0x3a2>
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b718:	f7f4 ff6e 	bl	80005f8 <__aeabi_dmul>
 800b71c:	3501      	adds	r5, #1
 800b71e:	4606      	mov	r6, r0
 800b720:	460f      	mov	r7, r1
 800b722:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b726:	f109 0908 	add.w	r9, r9, #8
 800b72a:	e7e0      	b.n	800b6ee <_dtoa_r+0x36e>
 800b72c:	f000 809f 	beq.w	800b86e <_dtoa_r+0x4ee>
 800b730:	f1cb 0600 	rsb	r6, fp, #0
 800b734:	4ba1      	ldr	r3, [pc, #644]	; (800b9bc <_dtoa_r+0x63c>)
 800b736:	4fa2      	ldr	r7, [pc, #648]	; (800b9c0 <_dtoa_r+0x640>)
 800b738:	f006 020f 	and.w	r2, r6, #15
 800b73c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	ec51 0b18 	vmov	r0, r1, d8
 800b748:	f7f4 ff56 	bl	80005f8 <__aeabi_dmul>
 800b74c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b750:	1136      	asrs	r6, r6, #4
 800b752:	2300      	movs	r3, #0
 800b754:	2502      	movs	r5, #2
 800b756:	2e00      	cmp	r6, #0
 800b758:	d17e      	bne.n	800b858 <_dtoa_r+0x4d8>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1d0      	bne.n	800b700 <_dtoa_r+0x380>
 800b75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b760:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 8084 	beq.w	800b872 <_dtoa_r+0x4f2>
 800b76a:	4b96      	ldr	r3, [pc, #600]	; (800b9c4 <_dtoa_r+0x644>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	4640      	mov	r0, r8
 800b770:	4649      	mov	r1, r9
 800b772:	f7f5 f9b3 	bl	8000adc <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d07b      	beq.n	800b872 <_dtoa_r+0x4f2>
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d078      	beq.n	800b872 <_dtoa_r+0x4f2>
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	dd39      	ble.n	800b7fa <_dtoa_r+0x47a>
 800b786:	4b90      	ldr	r3, [pc, #576]	; (800b9c8 <_dtoa_r+0x648>)
 800b788:	2200      	movs	r2, #0
 800b78a:	4640      	mov	r0, r8
 800b78c:	4649      	mov	r1, r9
 800b78e:	f7f4 ff33 	bl	80005f8 <__aeabi_dmul>
 800b792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b796:	9e01      	ldr	r6, [sp, #4]
 800b798:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b79c:	3501      	adds	r5, #1
 800b79e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f7f4 febe 	bl	8000524 <__aeabi_i2d>
 800b7a8:	4642      	mov	r2, r8
 800b7aa:	464b      	mov	r3, r9
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	4b86      	ldr	r3, [pc, #536]	; (800b9cc <_dtoa_r+0x64c>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f7f4 fd6a 	bl	800028c <__adddf3>
 800b7b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c0:	9303      	str	r3, [sp, #12]
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	d158      	bne.n	800b878 <_dtoa_r+0x4f8>
 800b7c6:	4b82      	ldr	r3, [pc, #520]	; (800b9d0 <_dtoa_r+0x650>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7d6:	4680      	mov	r8, r0
 800b7d8:	4689      	mov	r9, r1
 800b7da:	f7f5 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f040 8296 	bne.w	800bd10 <_dtoa_r+0x990>
 800b7e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	f7f5 f974 	bl	8000adc <__aeabi_dcmplt>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f040 8289 	bne.w	800bd0c <_dtoa_r+0x98c>
 800b7fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b7fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b800:	2b00      	cmp	r3, #0
 800b802:	f2c0 814e 	blt.w	800baa2 <_dtoa_r+0x722>
 800b806:	f1bb 0f0e 	cmp.w	fp, #14
 800b80a:	f300 814a 	bgt.w	800baa2 <_dtoa_r+0x722>
 800b80e:	4b6b      	ldr	r3, [pc, #428]	; (800b9bc <_dtoa_r+0x63c>)
 800b810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b814:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f280 80dc 	bge.w	800b9d8 <_dtoa_r+0x658>
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f300 80d8 	bgt.w	800b9d8 <_dtoa_r+0x658>
 800b828:	f040 826f 	bne.w	800bd0a <_dtoa_r+0x98a>
 800b82c:	4b68      	ldr	r3, [pc, #416]	; (800b9d0 <_dtoa_r+0x650>)
 800b82e:	2200      	movs	r2, #0
 800b830:	4640      	mov	r0, r8
 800b832:	4649      	mov	r1, r9
 800b834:	f7f4 fee0 	bl	80005f8 <__aeabi_dmul>
 800b838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b83c:	f7f5 f962 	bl	8000b04 <__aeabi_dcmpge>
 800b840:	9e04      	ldr	r6, [sp, #16]
 800b842:	4637      	mov	r7, r6
 800b844:	2800      	cmp	r0, #0
 800b846:	f040 8245 	bne.w	800bcd4 <_dtoa_r+0x954>
 800b84a:	9d00      	ldr	r5, [sp, #0]
 800b84c:	2331      	movs	r3, #49	; 0x31
 800b84e:	f805 3b01 	strb.w	r3, [r5], #1
 800b852:	f10b 0b01 	add.w	fp, fp, #1
 800b856:	e241      	b.n	800bcdc <_dtoa_r+0x95c>
 800b858:	07f2      	lsls	r2, r6, #31
 800b85a:	d505      	bpl.n	800b868 <_dtoa_r+0x4e8>
 800b85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b860:	f7f4 feca 	bl	80005f8 <__aeabi_dmul>
 800b864:	3501      	adds	r5, #1
 800b866:	2301      	movs	r3, #1
 800b868:	1076      	asrs	r6, r6, #1
 800b86a:	3708      	adds	r7, #8
 800b86c:	e773      	b.n	800b756 <_dtoa_r+0x3d6>
 800b86e:	2502      	movs	r5, #2
 800b870:	e775      	b.n	800b75e <_dtoa_r+0x3de>
 800b872:	9e04      	ldr	r6, [sp, #16]
 800b874:	465f      	mov	r7, fp
 800b876:	e792      	b.n	800b79e <_dtoa_r+0x41e>
 800b878:	9900      	ldr	r1, [sp, #0]
 800b87a:	4b50      	ldr	r3, [pc, #320]	; (800b9bc <_dtoa_r+0x63c>)
 800b87c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b880:	4431      	add	r1, r6
 800b882:	9102      	str	r1, [sp, #8]
 800b884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b886:	eeb0 9a47 	vmov.f32	s18, s14
 800b88a:	eef0 9a67 	vmov.f32	s19, s15
 800b88e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b896:	2900      	cmp	r1, #0
 800b898:	d044      	beq.n	800b924 <_dtoa_r+0x5a4>
 800b89a:	494e      	ldr	r1, [pc, #312]	; (800b9d4 <_dtoa_r+0x654>)
 800b89c:	2000      	movs	r0, #0
 800b89e:	f7f4 ffd5 	bl	800084c <__aeabi_ddiv>
 800b8a2:	ec53 2b19 	vmov	r2, r3, d9
 800b8a6:	f7f4 fcef 	bl	8000288 <__aeabi_dsub>
 800b8aa:	9d00      	ldr	r5, [sp, #0]
 800b8ac:	ec41 0b19 	vmov	d9, r0, r1
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	f7f5 f950 	bl	8000b58 <__aeabi_d2iz>
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	f7f4 fe33 	bl	8000524 <__aeabi_i2d>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	f7f4 fcdf 	bl	8000288 <__aeabi_dsub>
 800b8ca:	3630      	adds	r6, #48	; 0x30
 800b8cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b8d0:	ec53 2b19 	vmov	r2, r3, d9
 800b8d4:	4680      	mov	r8, r0
 800b8d6:	4689      	mov	r9, r1
 800b8d8:	f7f5 f900 	bl	8000adc <__aeabi_dcmplt>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d164      	bne.n	800b9aa <_dtoa_r+0x62a>
 800b8e0:	4642      	mov	r2, r8
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	4937      	ldr	r1, [pc, #220]	; (800b9c4 <_dtoa_r+0x644>)
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f7f4 fcce 	bl	8000288 <__aeabi_dsub>
 800b8ec:	ec53 2b19 	vmov	r2, r3, d9
 800b8f0:	f7f5 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f040 80b6 	bne.w	800ba66 <_dtoa_r+0x6e6>
 800b8fa:	9b02      	ldr	r3, [sp, #8]
 800b8fc:	429d      	cmp	r5, r3
 800b8fe:	f43f af7c 	beq.w	800b7fa <_dtoa_r+0x47a>
 800b902:	4b31      	ldr	r3, [pc, #196]	; (800b9c8 <_dtoa_r+0x648>)
 800b904:	ec51 0b19 	vmov	r0, r1, d9
 800b908:	2200      	movs	r2, #0
 800b90a:	f7f4 fe75 	bl	80005f8 <__aeabi_dmul>
 800b90e:	4b2e      	ldr	r3, [pc, #184]	; (800b9c8 <_dtoa_r+0x648>)
 800b910:	ec41 0b19 	vmov	d9, r0, r1
 800b914:	2200      	movs	r2, #0
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f4 fe6d 	bl	80005f8 <__aeabi_dmul>
 800b91e:	4680      	mov	r8, r0
 800b920:	4689      	mov	r9, r1
 800b922:	e7c5      	b.n	800b8b0 <_dtoa_r+0x530>
 800b924:	ec51 0b17 	vmov	r0, r1, d7
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	9b02      	ldr	r3, [sp, #8]
 800b92e:	9d00      	ldr	r5, [sp, #0]
 800b930:	930f      	str	r3, [sp, #60]	; 0x3c
 800b932:	ec41 0b19 	vmov	d9, r0, r1
 800b936:	4649      	mov	r1, r9
 800b938:	4640      	mov	r0, r8
 800b93a:	f7f5 f90d 	bl	8000b58 <__aeabi_d2iz>
 800b93e:	4606      	mov	r6, r0
 800b940:	f7f4 fdf0 	bl	8000524 <__aeabi_i2d>
 800b944:	3630      	adds	r6, #48	; 0x30
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	4640      	mov	r0, r8
 800b94c:	4649      	mov	r1, r9
 800b94e:	f7f4 fc9b 	bl	8000288 <__aeabi_dsub>
 800b952:	f805 6b01 	strb.w	r6, [r5], #1
 800b956:	9b02      	ldr	r3, [sp, #8]
 800b958:	429d      	cmp	r5, r3
 800b95a:	4680      	mov	r8, r0
 800b95c:	4689      	mov	r9, r1
 800b95e:	f04f 0200 	mov.w	r2, #0
 800b962:	d124      	bne.n	800b9ae <_dtoa_r+0x62e>
 800b964:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <_dtoa_r+0x654>)
 800b966:	ec51 0b19 	vmov	r0, r1, d9
 800b96a:	f7f4 fc8f 	bl	800028c <__adddf3>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	f7f5 f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d173      	bne.n	800ba66 <_dtoa_r+0x6e6>
 800b97e:	ec53 2b19 	vmov	r2, r3, d9
 800b982:	4914      	ldr	r1, [pc, #80]	; (800b9d4 <_dtoa_r+0x654>)
 800b984:	2000      	movs	r0, #0
 800b986:	f7f4 fc7f 	bl	8000288 <__aeabi_dsub>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4640      	mov	r0, r8
 800b990:	4649      	mov	r1, r9
 800b992:	f7f5 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800b996:	2800      	cmp	r0, #0
 800b998:	f43f af2f 	beq.w	800b7fa <_dtoa_r+0x47a>
 800b99c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b99e:	1e6b      	subs	r3, r5, #1
 800b9a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9a6:	2b30      	cmp	r3, #48	; 0x30
 800b9a8:	d0f8      	beq.n	800b99c <_dtoa_r+0x61c>
 800b9aa:	46bb      	mov	fp, r7
 800b9ac:	e04a      	b.n	800ba44 <_dtoa_r+0x6c4>
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <_dtoa_r+0x648>)
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	4689      	mov	r9, r1
 800b9b8:	e7bd      	b.n	800b936 <_dtoa_r+0x5b6>
 800b9ba:	bf00      	nop
 800b9bc:	0800d158 	.word	0x0800d158
 800b9c0:	0800d130 	.word	0x0800d130
 800b9c4:	3ff00000 	.word	0x3ff00000
 800b9c8:	40240000 	.word	0x40240000
 800b9cc:	401c0000 	.word	0x401c0000
 800b9d0:	40140000 	.word	0x40140000
 800b9d4:	3fe00000 	.word	0x3fe00000
 800b9d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9dc:	9d00      	ldr	r5, [sp, #0]
 800b9de:	4642      	mov	r2, r8
 800b9e0:	464b      	mov	r3, r9
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	f7f4 ff31 	bl	800084c <__aeabi_ddiv>
 800b9ea:	f7f5 f8b5 	bl	8000b58 <__aeabi_d2iz>
 800b9ee:	9001      	str	r0, [sp, #4]
 800b9f0:	f7f4 fd98 	bl	8000524 <__aeabi_i2d>
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	f7f4 fdfe 	bl	80005f8 <__aeabi_dmul>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4630      	mov	r0, r6
 800ba02:	4639      	mov	r1, r7
 800ba04:	f7f4 fc40 	bl	8000288 <__aeabi_dsub>
 800ba08:	9e01      	ldr	r6, [sp, #4]
 800ba0a:	9f04      	ldr	r7, [sp, #16]
 800ba0c:	3630      	adds	r6, #48	; 0x30
 800ba0e:	f805 6b01 	strb.w	r6, [r5], #1
 800ba12:	9e00      	ldr	r6, [sp, #0]
 800ba14:	1bae      	subs	r6, r5, r6
 800ba16:	42b7      	cmp	r7, r6
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	d134      	bne.n	800ba88 <_dtoa_r+0x708>
 800ba1e:	f7f4 fc35 	bl	800028c <__adddf3>
 800ba22:	4642      	mov	r2, r8
 800ba24:	464b      	mov	r3, r9
 800ba26:	4606      	mov	r6, r0
 800ba28:	460f      	mov	r7, r1
 800ba2a:	f7f5 f875 	bl	8000b18 <__aeabi_dcmpgt>
 800ba2e:	b9c8      	cbnz	r0, 800ba64 <_dtoa_r+0x6e4>
 800ba30:	4642      	mov	r2, r8
 800ba32:	464b      	mov	r3, r9
 800ba34:	4630      	mov	r0, r6
 800ba36:	4639      	mov	r1, r7
 800ba38:	f7f5 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba3c:	b110      	cbz	r0, 800ba44 <_dtoa_r+0x6c4>
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	07db      	lsls	r3, r3, #31
 800ba42:	d40f      	bmi.n	800ba64 <_dtoa_r+0x6e4>
 800ba44:	4651      	mov	r1, sl
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fbcc 	bl	800c1e4 <_Bfree>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba50:	702b      	strb	r3, [r5, #0]
 800ba52:	f10b 0301 	add.w	r3, fp, #1
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f43f ace2 	beq.w	800b424 <_dtoa_r+0xa4>
 800ba60:	601d      	str	r5, [r3, #0]
 800ba62:	e4df      	b.n	800b424 <_dtoa_r+0xa4>
 800ba64:	465f      	mov	r7, fp
 800ba66:	462b      	mov	r3, r5
 800ba68:	461d      	mov	r5, r3
 800ba6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba6e:	2a39      	cmp	r2, #57	; 0x39
 800ba70:	d106      	bne.n	800ba80 <_dtoa_r+0x700>
 800ba72:	9a00      	ldr	r2, [sp, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d1f7      	bne.n	800ba68 <_dtoa_r+0x6e8>
 800ba78:	9900      	ldr	r1, [sp, #0]
 800ba7a:	2230      	movs	r2, #48	; 0x30
 800ba7c:	3701      	adds	r7, #1
 800ba7e:	700a      	strb	r2, [r1, #0]
 800ba80:	781a      	ldrb	r2, [r3, #0]
 800ba82:	3201      	adds	r2, #1
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	e790      	b.n	800b9aa <_dtoa_r+0x62a>
 800ba88:	4ba3      	ldr	r3, [pc, #652]	; (800bd18 <_dtoa_r+0x998>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f7f4 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ba90:	2200      	movs	r2, #0
 800ba92:	2300      	movs	r3, #0
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	f7f5 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d09e      	beq.n	800b9de <_dtoa_r+0x65e>
 800baa0:	e7d0      	b.n	800ba44 <_dtoa_r+0x6c4>
 800baa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	f000 80ca 	beq.w	800bc3e <_dtoa_r+0x8be>
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	2a01      	cmp	r2, #1
 800baae:	f300 80ad 	bgt.w	800bc0c <_dtoa_r+0x88c>
 800bab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	f000 80a5 	beq.w	800bc04 <_dtoa_r+0x884>
 800baba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800babe:	9e08      	ldr	r6, [sp, #32]
 800bac0:	9d05      	ldr	r5, [sp, #20]
 800bac2:	9a05      	ldr	r2, [sp, #20]
 800bac4:	441a      	add	r2, r3
 800bac6:	9205      	str	r2, [sp, #20]
 800bac8:	9a06      	ldr	r2, [sp, #24]
 800baca:	2101      	movs	r1, #1
 800bacc:	441a      	add	r2, r3
 800bace:	4620      	mov	r0, r4
 800bad0:	9206      	str	r2, [sp, #24]
 800bad2:	f000 fc3d 	bl	800c350 <__i2b>
 800bad6:	4607      	mov	r7, r0
 800bad8:	b165      	cbz	r5, 800baf4 <_dtoa_r+0x774>
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	dd09      	ble.n	800baf4 <_dtoa_r+0x774>
 800bae0:	42ab      	cmp	r3, r5
 800bae2:	9a05      	ldr	r2, [sp, #20]
 800bae4:	bfa8      	it	ge
 800bae6:	462b      	movge	r3, r5
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	9205      	str	r2, [sp, #20]
 800baec:	9a06      	ldr	r2, [sp, #24]
 800baee:	1aed      	subs	r5, r5, r3
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	9306      	str	r3, [sp, #24]
 800baf4:	9b08      	ldr	r3, [sp, #32]
 800baf6:	b1f3      	cbz	r3, 800bb36 <_dtoa_r+0x7b6>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 80a3 	beq.w	800bc46 <_dtoa_r+0x8c6>
 800bb00:	2e00      	cmp	r6, #0
 800bb02:	dd10      	ble.n	800bb26 <_dtoa_r+0x7a6>
 800bb04:	4639      	mov	r1, r7
 800bb06:	4632      	mov	r2, r6
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fce1 	bl	800c4d0 <__pow5mult>
 800bb0e:	4652      	mov	r2, sl
 800bb10:	4601      	mov	r1, r0
 800bb12:	4607      	mov	r7, r0
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fc31 	bl	800c37c <__multiply>
 800bb1a:	4651      	mov	r1, sl
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 fb60 	bl	800c1e4 <_Bfree>
 800bb24:	46c2      	mov	sl, r8
 800bb26:	9b08      	ldr	r3, [sp, #32]
 800bb28:	1b9a      	subs	r2, r3, r6
 800bb2a:	d004      	beq.n	800bb36 <_dtoa_r+0x7b6>
 800bb2c:	4651      	mov	r1, sl
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 fcce 	bl	800c4d0 <__pow5mult>
 800bb34:	4682      	mov	sl, r0
 800bb36:	2101      	movs	r1, #1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fc09 	bl	800c350 <__i2b>
 800bb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	4606      	mov	r6, r0
 800bb44:	f340 8081 	ble.w	800bc4a <_dtoa_r+0x8ca>
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 fcbf 	bl	800c4d0 <__pow5mult>
 800bb52:	9b07      	ldr	r3, [sp, #28]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	4606      	mov	r6, r0
 800bb58:	dd7a      	ble.n	800bc50 <_dtoa_r+0x8d0>
 800bb5a:	f04f 0800 	mov.w	r8, #0
 800bb5e:	6933      	ldr	r3, [r6, #16]
 800bb60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb64:	6918      	ldr	r0, [r3, #16]
 800bb66:	f000 fba5 	bl	800c2b4 <__hi0bits>
 800bb6a:	f1c0 0020 	rsb	r0, r0, #32
 800bb6e:	9b06      	ldr	r3, [sp, #24]
 800bb70:	4418      	add	r0, r3
 800bb72:	f010 001f 	ands.w	r0, r0, #31
 800bb76:	f000 8094 	beq.w	800bca2 <_dtoa_r+0x922>
 800bb7a:	f1c0 0320 	rsb	r3, r0, #32
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	f340 8085 	ble.w	800bc8e <_dtoa_r+0x90e>
 800bb84:	9b05      	ldr	r3, [sp, #20]
 800bb86:	f1c0 001c 	rsb	r0, r0, #28
 800bb8a:	4403      	add	r3, r0
 800bb8c:	9305      	str	r3, [sp, #20]
 800bb8e:	9b06      	ldr	r3, [sp, #24]
 800bb90:	4403      	add	r3, r0
 800bb92:	4405      	add	r5, r0
 800bb94:	9306      	str	r3, [sp, #24]
 800bb96:	9b05      	ldr	r3, [sp, #20]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	dd05      	ble.n	800bba8 <_dtoa_r+0x828>
 800bb9c:	4651      	mov	r1, sl
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fcef 	bl	800c584 <__lshift>
 800bba6:	4682      	mov	sl, r0
 800bba8:	9b06      	ldr	r3, [sp, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd05      	ble.n	800bbba <_dtoa_r+0x83a>
 800bbae:	4631      	mov	r1, r6
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fce6 	bl	800c584 <__lshift>
 800bbb8:	4606      	mov	r6, r0
 800bbba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d072      	beq.n	800bca6 <_dtoa_r+0x926>
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	f000 fd4a 	bl	800c65c <__mcmp>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	da6c      	bge.n	800bca6 <_dtoa_r+0x926>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4651      	mov	r1, sl
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fb28 	bl	800c228 <__multadd>
 800bbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbde:	4682      	mov	sl, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 81b0 	beq.w	800bf46 <_dtoa_r+0xbc6>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4639      	mov	r1, r7
 800bbea:	220a      	movs	r2, #10
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 fb1b 	bl	800c228 <__multadd>
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	f300 8096 	bgt.w	800bd28 <_dtoa_r+0x9a8>
 800bbfc:	9b07      	ldr	r3, [sp, #28]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	dc59      	bgt.n	800bcb6 <_dtoa_r+0x936>
 800bc02:	e091      	b.n	800bd28 <_dtoa_r+0x9a8>
 800bc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc0a:	e758      	b.n	800babe <_dtoa_r+0x73e>
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	1e5e      	subs	r6, r3, #1
 800bc10:	9b08      	ldr	r3, [sp, #32]
 800bc12:	42b3      	cmp	r3, r6
 800bc14:	bfbf      	itttt	lt
 800bc16:	9b08      	ldrlt	r3, [sp, #32]
 800bc18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bc1a:	9608      	strlt	r6, [sp, #32]
 800bc1c:	1af3      	sublt	r3, r6, r3
 800bc1e:	bfb4      	ite	lt
 800bc20:	18d2      	addlt	r2, r2, r3
 800bc22:	1b9e      	subge	r6, r3, r6
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	bfbc      	itt	lt
 800bc28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bc2a:	2600      	movlt	r6, #0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	bfb7      	itett	lt
 800bc30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc38:	1a9d      	sublt	r5, r3, r2
 800bc3a:	2300      	movlt	r3, #0
 800bc3c:	e741      	b.n	800bac2 <_dtoa_r+0x742>
 800bc3e:	9e08      	ldr	r6, [sp, #32]
 800bc40:	9d05      	ldr	r5, [sp, #20]
 800bc42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc44:	e748      	b.n	800bad8 <_dtoa_r+0x758>
 800bc46:	9a08      	ldr	r2, [sp, #32]
 800bc48:	e770      	b.n	800bb2c <_dtoa_r+0x7ac>
 800bc4a:	9b07      	ldr	r3, [sp, #28]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	dc19      	bgt.n	800bc84 <_dtoa_r+0x904>
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	b9bb      	cbnz	r3, 800bc84 <_dtoa_r+0x904>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc5a:	b99b      	cbnz	r3, 800bc84 <_dtoa_r+0x904>
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc62:	0d1b      	lsrs	r3, r3, #20
 800bc64:	051b      	lsls	r3, r3, #20
 800bc66:	b183      	cbz	r3, 800bc8a <_dtoa_r+0x90a>
 800bc68:	9b05      	ldr	r3, [sp, #20]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	3301      	adds	r3, #1
 800bc72:	9306      	str	r3, [sp, #24]
 800bc74:	f04f 0801 	mov.w	r8, #1
 800bc78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f47f af6f 	bne.w	800bb5e <_dtoa_r+0x7de>
 800bc80:	2001      	movs	r0, #1
 800bc82:	e774      	b.n	800bb6e <_dtoa_r+0x7ee>
 800bc84:	f04f 0800 	mov.w	r8, #0
 800bc88:	e7f6      	b.n	800bc78 <_dtoa_r+0x8f8>
 800bc8a:	4698      	mov	r8, r3
 800bc8c:	e7f4      	b.n	800bc78 <_dtoa_r+0x8f8>
 800bc8e:	d082      	beq.n	800bb96 <_dtoa_r+0x816>
 800bc90:	9a05      	ldr	r2, [sp, #20]
 800bc92:	331c      	adds	r3, #28
 800bc94:	441a      	add	r2, r3
 800bc96:	9205      	str	r2, [sp, #20]
 800bc98:	9a06      	ldr	r2, [sp, #24]
 800bc9a:	441a      	add	r2, r3
 800bc9c:	441d      	add	r5, r3
 800bc9e:	9206      	str	r2, [sp, #24]
 800bca0:	e779      	b.n	800bb96 <_dtoa_r+0x816>
 800bca2:	4603      	mov	r3, r0
 800bca4:	e7f4      	b.n	800bc90 <_dtoa_r+0x910>
 800bca6:	9b04      	ldr	r3, [sp, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	dc37      	bgt.n	800bd1c <_dtoa_r+0x99c>
 800bcac:	9b07      	ldr	r3, [sp, #28]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	dd34      	ble.n	800bd1c <_dtoa_r+0x99c>
 800bcb2:	9b04      	ldr	r3, [sp, #16]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	9b01      	ldr	r3, [sp, #4]
 800bcb8:	b963      	cbnz	r3, 800bcd4 <_dtoa_r+0x954>
 800bcba:	4631      	mov	r1, r6
 800bcbc:	2205      	movs	r2, #5
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 fab2 	bl	800c228 <__multadd>
 800bcc4:	4601      	mov	r1, r0
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f000 fcc7 	bl	800c65c <__mcmp>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f73f adbb 	bgt.w	800b84a <_dtoa_r+0x4ca>
 800bcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd6:	9d00      	ldr	r5, [sp, #0]
 800bcd8:	ea6f 0b03 	mvn.w	fp, r3
 800bcdc:	f04f 0800 	mov.w	r8, #0
 800bce0:	4631      	mov	r1, r6
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fa7e 	bl	800c1e4 <_Bfree>
 800bce8:	2f00      	cmp	r7, #0
 800bcea:	f43f aeab 	beq.w	800ba44 <_dtoa_r+0x6c4>
 800bcee:	f1b8 0f00 	cmp.w	r8, #0
 800bcf2:	d005      	beq.n	800bd00 <_dtoa_r+0x980>
 800bcf4:	45b8      	cmp	r8, r7
 800bcf6:	d003      	beq.n	800bd00 <_dtoa_r+0x980>
 800bcf8:	4641      	mov	r1, r8
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fa72 	bl	800c1e4 <_Bfree>
 800bd00:	4639      	mov	r1, r7
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fa6e 	bl	800c1e4 <_Bfree>
 800bd08:	e69c      	b.n	800ba44 <_dtoa_r+0x6c4>
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	4637      	mov	r7, r6
 800bd0e:	e7e1      	b.n	800bcd4 <_dtoa_r+0x954>
 800bd10:	46bb      	mov	fp, r7
 800bd12:	4637      	mov	r7, r6
 800bd14:	e599      	b.n	800b84a <_dtoa_r+0x4ca>
 800bd16:	bf00      	nop
 800bd18:	40240000 	.word	0x40240000
 800bd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 80c8 	beq.w	800beb4 <_dtoa_r+0xb34>
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	dd05      	ble.n	800bd38 <_dtoa_r+0x9b8>
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	462a      	mov	r2, r5
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fc27 	bl	800c584 <__lshift>
 800bd36:	4607      	mov	r7, r0
 800bd38:	f1b8 0f00 	cmp.w	r8, #0
 800bd3c:	d05b      	beq.n	800bdf6 <_dtoa_r+0xa76>
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	4620      	mov	r0, r4
 800bd42:	f000 fa0f 	bl	800c164 <_Balloc>
 800bd46:	4605      	mov	r5, r0
 800bd48:	b928      	cbnz	r0, 800bd56 <_dtoa_r+0x9d6>
 800bd4a:	4b83      	ldr	r3, [pc, #524]	; (800bf58 <_dtoa_r+0xbd8>)
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bd52:	f7ff bb2e 	b.w	800b3b2 <_dtoa_r+0x32>
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	3202      	adds	r2, #2
 800bd5a:	0092      	lsls	r2, r2, #2
 800bd5c:	f107 010c 	add.w	r1, r7, #12
 800bd60:	300c      	adds	r0, #12
 800bd62:	f7ff fa74 	bl	800b24e <memcpy>
 800bd66:	2201      	movs	r2, #1
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fc0a 	bl	800c584 <__lshift>
 800bd70:	9b00      	ldr	r3, [sp, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	9308      	str	r3, [sp, #32]
 800bd7e:	9b02      	ldr	r3, [sp, #8]
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	46b8      	mov	r8, r7
 800bd86:	9306      	str	r3, [sp, #24]
 800bd88:	4607      	mov	r7, r0
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	4650      	mov	r0, sl
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	f7ff fa69 	bl	800b26a <quorem>
 800bd98:	4641      	mov	r1, r8
 800bd9a:	9002      	str	r0, [sp, #8]
 800bd9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bda0:	4650      	mov	r0, sl
 800bda2:	f000 fc5b 	bl	800c65c <__mcmp>
 800bda6:	463a      	mov	r2, r7
 800bda8:	9005      	str	r0, [sp, #20]
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fc71 	bl	800c694 <__mdiff>
 800bdb2:	68c2      	ldr	r2, [r0, #12]
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	bb02      	cbnz	r2, 800bdfa <_dtoa_r+0xa7a>
 800bdb8:	4601      	mov	r1, r0
 800bdba:	4650      	mov	r0, sl
 800bdbc:	f000 fc4e 	bl	800c65c <__mcmp>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	9209      	str	r2, [sp, #36]	; 0x24
 800bdc8:	f000 fa0c 	bl	800c1e4 <_Bfree>
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdd0:	9d04      	ldr	r5, [sp, #16]
 800bdd2:	ea43 0102 	orr.w	r1, r3, r2
 800bdd6:	9b06      	ldr	r3, [sp, #24]
 800bdd8:	4319      	orrs	r1, r3
 800bdda:	d110      	bne.n	800bdfe <_dtoa_r+0xa7e>
 800bddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bde0:	d029      	beq.n	800be36 <_dtoa_r+0xab6>
 800bde2:	9b05      	ldr	r3, [sp, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dd02      	ble.n	800bdee <_dtoa_r+0xa6e>
 800bde8:	9b02      	ldr	r3, [sp, #8]
 800bdea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	f883 9000 	strb.w	r9, [r3]
 800bdf4:	e774      	b.n	800bce0 <_dtoa_r+0x960>
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	e7ba      	b.n	800bd70 <_dtoa_r+0x9f0>
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	e7e1      	b.n	800bdc2 <_dtoa_r+0xa42>
 800bdfe:	9b05      	ldr	r3, [sp, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	db04      	blt.n	800be0e <_dtoa_r+0xa8e>
 800be04:	9907      	ldr	r1, [sp, #28]
 800be06:	430b      	orrs	r3, r1
 800be08:	9906      	ldr	r1, [sp, #24]
 800be0a:	430b      	orrs	r3, r1
 800be0c:	d120      	bne.n	800be50 <_dtoa_r+0xad0>
 800be0e:	2a00      	cmp	r2, #0
 800be10:	dded      	ble.n	800bdee <_dtoa_r+0xa6e>
 800be12:	4651      	mov	r1, sl
 800be14:	2201      	movs	r2, #1
 800be16:	4620      	mov	r0, r4
 800be18:	f000 fbb4 	bl	800c584 <__lshift>
 800be1c:	4631      	mov	r1, r6
 800be1e:	4682      	mov	sl, r0
 800be20:	f000 fc1c 	bl	800c65c <__mcmp>
 800be24:	2800      	cmp	r0, #0
 800be26:	dc03      	bgt.n	800be30 <_dtoa_r+0xab0>
 800be28:	d1e1      	bne.n	800bdee <_dtoa_r+0xa6e>
 800be2a:	f019 0f01 	tst.w	r9, #1
 800be2e:	d0de      	beq.n	800bdee <_dtoa_r+0xa6e>
 800be30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be34:	d1d8      	bne.n	800bde8 <_dtoa_r+0xa68>
 800be36:	9a01      	ldr	r2, [sp, #4]
 800be38:	2339      	movs	r3, #57	; 0x39
 800be3a:	7013      	strb	r3, [r2, #0]
 800be3c:	462b      	mov	r3, r5
 800be3e:	461d      	mov	r5, r3
 800be40:	3b01      	subs	r3, #1
 800be42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be46:	2a39      	cmp	r2, #57	; 0x39
 800be48:	d06c      	beq.n	800bf24 <_dtoa_r+0xba4>
 800be4a:	3201      	adds	r2, #1
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	e747      	b.n	800bce0 <_dtoa_r+0x960>
 800be50:	2a00      	cmp	r2, #0
 800be52:	dd07      	ble.n	800be64 <_dtoa_r+0xae4>
 800be54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be58:	d0ed      	beq.n	800be36 <_dtoa_r+0xab6>
 800be5a:	9a01      	ldr	r2, [sp, #4]
 800be5c:	f109 0301 	add.w	r3, r9, #1
 800be60:	7013      	strb	r3, [r2, #0]
 800be62:	e73d      	b.n	800bce0 <_dtoa_r+0x960>
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	9a08      	ldr	r2, [sp, #32]
 800be68:	f803 9c01 	strb.w	r9, [r3, #-1]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d043      	beq.n	800bef8 <_dtoa_r+0xb78>
 800be70:	4651      	mov	r1, sl
 800be72:	2300      	movs	r3, #0
 800be74:	220a      	movs	r2, #10
 800be76:	4620      	mov	r0, r4
 800be78:	f000 f9d6 	bl	800c228 <__multadd>
 800be7c:	45b8      	cmp	r8, r7
 800be7e:	4682      	mov	sl, r0
 800be80:	f04f 0300 	mov.w	r3, #0
 800be84:	f04f 020a 	mov.w	r2, #10
 800be88:	4641      	mov	r1, r8
 800be8a:	4620      	mov	r0, r4
 800be8c:	d107      	bne.n	800be9e <_dtoa_r+0xb1e>
 800be8e:	f000 f9cb 	bl	800c228 <__multadd>
 800be92:	4680      	mov	r8, r0
 800be94:	4607      	mov	r7, r0
 800be96:	9b04      	ldr	r3, [sp, #16]
 800be98:	3301      	adds	r3, #1
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	e775      	b.n	800bd8a <_dtoa_r+0xa0a>
 800be9e:	f000 f9c3 	bl	800c228 <__multadd>
 800bea2:	4639      	mov	r1, r7
 800bea4:	4680      	mov	r8, r0
 800bea6:	2300      	movs	r3, #0
 800bea8:	220a      	movs	r2, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 f9bc 	bl	800c228 <__multadd>
 800beb0:	4607      	mov	r7, r0
 800beb2:	e7f0      	b.n	800be96 <_dtoa_r+0xb16>
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	9d00      	ldr	r5, [sp, #0]
 800beba:	4631      	mov	r1, r6
 800bebc:	4650      	mov	r0, sl
 800bebe:	f7ff f9d4 	bl	800b26a <quorem>
 800bec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bec6:	9b00      	ldr	r3, [sp, #0]
 800bec8:	f805 9b01 	strb.w	r9, [r5], #1
 800becc:	1aea      	subs	r2, r5, r3
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	4293      	cmp	r3, r2
 800bed2:	dd07      	ble.n	800bee4 <_dtoa_r+0xb64>
 800bed4:	4651      	mov	r1, sl
 800bed6:	2300      	movs	r3, #0
 800bed8:	220a      	movs	r2, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f9a4 	bl	800c228 <__multadd>
 800bee0:	4682      	mov	sl, r0
 800bee2:	e7ea      	b.n	800beba <_dtoa_r+0xb3a>
 800bee4:	9b01      	ldr	r3, [sp, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfc8      	it	gt
 800beea:	461d      	movgt	r5, r3
 800beec:	9b00      	ldr	r3, [sp, #0]
 800beee:	bfd8      	it	le
 800bef0:	2501      	movle	r5, #1
 800bef2:	441d      	add	r5, r3
 800bef4:	f04f 0800 	mov.w	r8, #0
 800bef8:	4651      	mov	r1, sl
 800befa:	2201      	movs	r2, #1
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fb41 	bl	800c584 <__lshift>
 800bf02:	4631      	mov	r1, r6
 800bf04:	4682      	mov	sl, r0
 800bf06:	f000 fba9 	bl	800c65c <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	dc96      	bgt.n	800be3c <_dtoa_r+0xabc>
 800bf0e:	d102      	bne.n	800bf16 <_dtoa_r+0xb96>
 800bf10:	f019 0f01 	tst.w	r9, #1
 800bf14:	d192      	bne.n	800be3c <_dtoa_r+0xabc>
 800bf16:	462b      	mov	r3, r5
 800bf18:	461d      	mov	r5, r3
 800bf1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf1e:	2a30      	cmp	r2, #48	; 0x30
 800bf20:	d0fa      	beq.n	800bf18 <_dtoa_r+0xb98>
 800bf22:	e6dd      	b.n	800bce0 <_dtoa_r+0x960>
 800bf24:	9a00      	ldr	r2, [sp, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d189      	bne.n	800be3e <_dtoa_r+0xabe>
 800bf2a:	f10b 0b01 	add.w	fp, fp, #1
 800bf2e:	2331      	movs	r3, #49	; 0x31
 800bf30:	e796      	b.n	800be60 <_dtoa_r+0xae0>
 800bf32:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <_dtoa_r+0xbdc>)
 800bf34:	f7ff ba99 	b.w	800b46a <_dtoa_r+0xea>
 800bf38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f47f aa6d 	bne.w	800b41a <_dtoa_r+0x9a>
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <_dtoa_r+0xbe0>)
 800bf42:	f7ff ba92 	b.w	800b46a <_dtoa_r+0xea>
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dcb5      	bgt.n	800beb8 <_dtoa_r+0xb38>
 800bf4c:	9b07      	ldr	r3, [sp, #28]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	f73f aeb1 	bgt.w	800bcb6 <_dtoa_r+0x936>
 800bf54:	e7b0      	b.n	800beb8 <_dtoa_r+0xb38>
 800bf56:	bf00      	nop
 800bf58:	0800d0c0 	.word	0x0800d0c0
 800bf5c:	0800d020 	.word	0x0800d020
 800bf60:	0800d044 	.word	0x0800d044

0800bf64 <_free_r>:
 800bf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d044      	beq.n	800bff4 <_free_r+0x90>
 800bf6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf6e:	9001      	str	r0, [sp, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f1a1 0404 	sub.w	r4, r1, #4
 800bf76:	bfb8      	it	lt
 800bf78:	18e4      	addlt	r4, r4, r3
 800bf7a:	f000 f8e7 	bl	800c14c <__malloc_lock>
 800bf7e:	4a1e      	ldr	r2, [pc, #120]	; (800bff8 <_free_r+0x94>)
 800bf80:	9801      	ldr	r0, [sp, #4]
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	b933      	cbnz	r3, 800bf94 <_free_r+0x30>
 800bf86:	6063      	str	r3, [r4, #4]
 800bf88:	6014      	str	r4, [r2, #0]
 800bf8a:	b003      	add	sp, #12
 800bf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf90:	f000 b8e2 	b.w	800c158 <__malloc_unlock>
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d908      	bls.n	800bfaa <_free_r+0x46>
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	1961      	adds	r1, r4, r5
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	bf01      	itttt	eq
 800bfa0:	6819      	ldreq	r1, [r3, #0]
 800bfa2:	685b      	ldreq	r3, [r3, #4]
 800bfa4:	1949      	addeq	r1, r1, r5
 800bfa6:	6021      	streq	r1, [r4, #0]
 800bfa8:	e7ed      	b.n	800bf86 <_free_r+0x22>
 800bfaa:	461a      	mov	r2, r3
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	b10b      	cbz	r3, 800bfb4 <_free_r+0x50>
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	d9fa      	bls.n	800bfaa <_free_r+0x46>
 800bfb4:	6811      	ldr	r1, [r2, #0]
 800bfb6:	1855      	adds	r5, r2, r1
 800bfb8:	42a5      	cmp	r5, r4
 800bfba:	d10b      	bne.n	800bfd4 <_free_r+0x70>
 800bfbc:	6824      	ldr	r4, [r4, #0]
 800bfbe:	4421      	add	r1, r4
 800bfc0:	1854      	adds	r4, r2, r1
 800bfc2:	42a3      	cmp	r3, r4
 800bfc4:	6011      	str	r1, [r2, #0]
 800bfc6:	d1e0      	bne.n	800bf8a <_free_r+0x26>
 800bfc8:	681c      	ldr	r4, [r3, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	6053      	str	r3, [r2, #4]
 800bfce:	440c      	add	r4, r1
 800bfd0:	6014      	str	r4, [r2, #0]
 800bfd2:	e7da      	b.n	800bf8a <_free_r+0x26>
 800bfd4:	d902      	bls.n	800bfdc <_free_r+0x78>
 800bfd6:	230c      	movs	r3, #12
 800bfd8:	6003      	str	r3, [r0, #0]
 800bfda:	e7d6      	b.n	800bf8a <_free_r+0x26>
 800bfdc:	6825      	ldr	r5, [r4, #0]
 800bfde:	1961      	adds	r1, r4, r5
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf04      	itt	eq
 800bfe4:	6819      	ldreq	r1, [r3, #0]
 800bfe6:	685b      	ldreq	r3, [r3, #4]
 800bfe8:	6063      	str	r3, [r4, #4]
 800bfea:	bf04      	itt	eq
 800bfec:	1949      	addeq	r1, r1, r5
 800bfee:	6021      	streq	r1, [r4, #0]
 800bff0:	6054      	str	r4, [r2, #4]
 800bff2:	e7ca      	b.n	800bf8a <_free_r+0x26>
 800bff4:	b003      	add	sp, #12
 800bff6:	bd30      	pop	{r4, r5, pc}
 800bff8:	2000a8e0 	.word	0x2000a8e0

0800bffc <malloc>:
 800bffc:	4b02      	ldr	r3, [pc, #8]	; (800c008 <malloc+0xc>)
 800bffe:	4601      	mov	r1, r0
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f000 b823 	b.w	800c04c <_malloc_r>
 800c006:	bf00      	nop
 800c008:	2000008c 	.word	0x2000008c

0800c00c <sbrk_aligned>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4e0e      	ldr	r6, [pc, #56]	; (800c048 <sbrk_aligned+0x3c>)
 800c010:	460c      	mov	r4, r1
 800c012:	6831      	ldr	r1, [r6, #0]
 800c014:	4605      	mov	r5, r0
 800c016:	b911      	cbnz	r1, 800c01e <sbrk_aligned+0x12>
 800c018:	f000 fe96 	bl	800cd48 <_sbrk_r>
 800c01c:	6030      	str	r0, [r6, #0]
 800c01e:	4621      	mov	r1, r4
 800c020:	4628      	mov	r0, r5
 800c022:	f000 fe91 	bl	800cd48 <_sbrk_r>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d00a      	beq.n	800c040 <sbrk_aligned+0x34>
 800c02a:	1cc4      	adds	r4, r0, #3
 800c02c:	f024 0403 	bic.w	r4, r4, #3
 800c030:	42a0      	cmp	r0, r4
 800c032:	d007      	beq.n	800c044 <sbrk_aligned+0x38>
 800c034:	1a21      	subs	r1, r4, r0
 800c036:	4628      	mov	r0, r5
 800c038:	f000 fe86 	bl	800cd48 <_sbrk_r>
 800c03c:	3001      	adds	r0, #1
 800c03e:	d101      	bne.n	800c044 <sbrk_aligned+0x38>
 800c040:	f04f 34ff 	mov.w	r4, #4294967295
 800c044:	4620      	mov	r0, r4
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	2000a8e4 	.word	0x2000a8e4

0800c04c <_malloc_r>:
 800c04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c050:	1ccd      	adds	r5, r1, #3
 800c052:	f025 0503 	bic.w	r5, r5, #3
 800c056:	3508      	adds	r5, #8
 800c058:	2d0c      	cmp	r5, #12
 800c05a:	bf38      	it	cc
 800c05c:	250c      	movcc	r5, #12
 800c05e:	2d00      	cmp	r5, #0
 800c060:	4607      	mov	r7, r0
 800c062:	db01      	blt.n	800c068 <_malloc_r+0x1c>
 800c064:	42a9      	cmp	r1, r5
 800c066:	d905      	bls.n	800c074 <_malloc_r+0x28>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	2600      	movs	r6, #0
 800c06e:	4630      	mov	r0, r6
 800c070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c074:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c148 <_malloc_r+0xfc>
 800c078:	f000 f868 	bl	800c14c <__malloc_lock>
 800c07c:	f8d8 3000 	ldr.w	r3, [r8]
 800c080:	461c      	mov	r4, r3
 800c082:	bb5c      	cbnz	r4, 800c0dc <_malloc_r+0x90>
 800c084:	4629      	mov	r1, r5
 800c086:	4638      	mov	r0, r7
 800c088:	f7ff ffc0 	bl	800c00c <sbrk_aligned>
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	4604      	mov	r4, r0
 800c090:	d155      	bne.n	800c13e <_malloc_r+0xf2>
 800c092:	f8d8 4000 	ldr.w	r4, [r8]
 800c096:	4626      	mov	r6, r4
 800c098:	2e00      	cmp	r6, #0
 800c09a:	d145      	bne.n	800c128 <_malloc_r+0xdc>
 800c09c:	2c00      	cmp	r4, #0
 800c09e:	d048      	beq.n	800c132 <_malloc_r+0xe6>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	eb04 0903 	add.w	r9, r4, r3
 800c0aa:	f000 fe4d 	bl	800cd48 <_sbrk_r>
 800c0ae:	4581      	cmp	r9, r0
 800c0b0:	d13f      	bne.n	800c132 <_malloc_r+0xe6>
 800c0b2:	6821      	ldr	r1, [r4, #0]
 800c0b4:	1a6d      	subs	r5, r5, r1
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ffa7 	bl	800c00c <sbrk_aligned>
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d037      	beq.n	800c132 <_malloc_r+0xe6>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	442b      	add	r3, r5
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d038      	beq.n	800c142 <_malloc_r+0xf6>
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	42a2      	cmp	r2, r4
 800c0d4:	d12b      	bne.n	800c12e <_malloc_r+0xe2>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	605a      	str	r2, [r3, #4]
 800c0da:	e00f      	b.n	800c0fc <_malloc_r+0xb0>
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	1b52      	subs	r2, r2, r5
 800c0e0:	d41f      	bmi.n	800c122 <_malloc_r+0xd6>
 800c0e2:	2a0b      	cmp	r2, #11
 800c0e4:	d917      	bls.n	800c116 <_malloc_r+0xca>
 800c0e6:	1961      	adds	r1, r4, r5
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	6025      	str	r5, [r4, #0]
 800c0ec:	bf18      	it	ne
 800c0ee:	6059      	strne	r1, [r3, #4]
 800c0f0:	6863      	ldr	r3, [r4, #4]
 800c0f2:	bf08      	it	eq
 800c0f4:	f8c8 1000 	streq.w	r1, [r8]
 800c0f8:	5162      	str	r2, [r4, r5]
 800c0fa:	604b      	str	r3, [r1, #4]
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f104 060b 	add.w	r6, r4, #11
 800c102:	f000 f829 	bl	800c158 <__malloc_unlock>
 800c106:	f026 0607 	bic.w	r6, r6, #7
 800c10a:	1d23      	adds	r3, r4, #4
 800c10c:	1af2      	subs	r2, r6, r3
 800c10e:	d0ae      	beq.n	800c06e <_malloc_r+0x22>
 800c110:	1b9b      	subs	r3, r3, r6
 800c112:	50a3      	str	r3, [r4, r2]
 800c114:	e7ab      	b.n	800c06e <_malloc_r+0x22>
 800c116:	42a3      	cmp	r3, r4
 800c118:	6862      	ldr	r2, [r4, #4]
 800c11a:	d1dd      	bne.n	800c0d8 <_malloc_r+0x8c>
 800c11c:	f8c8 2000 	str.w	r2, [r8]
 800c120:	e7ec      	b.n	800c0fc <_malloc_r+0xb0>
 800c122:	4623      	mov	r3, r4
 800c124:	6864      	ldr	r4, [r4, #4]
 800c126:	e7ac      	b.n	800c082 <_malloc_r+0x36>
 800c128:	4634      	mov	r4, r6
 800c12a:	6876      	ldr	r6, [r6, #4]
 800c12c:	e7b4      	b.n	800c098 <_malloc_r+0x4c>
 800c12e:	4613      	mov	r3, r2
 800c130:	e7cc      	b.n	800c0cc <_malloc_r+0x80>
 800c132:	230c      	movs	r3, #12
 800c134:	603b      	str	r3, [r7, #0]
 800c136:	4638      	mov	r0, r7
 800c138:	f000 f80e 	bl	800c158 <__malloc_unlock>
 800c13c:	e797      	b.n	800c06e <_malloc_r+0x22>
 800c13e:	6025      	str	r5, [r4, #0]
 800c140:	e7dc      	b.n	800c0fc <_malloc_r+0xb0>
 800c142:	605b      	str	r3, [r3, #4]
 800c144:	deff      	udf	#255	; 0xff
 800c146:	bf00      	nop
 800c148:	2000a8e0 	.word	0x2000a8e0

0800c14c <__malloc_lock>:
 800c14c:	4801      	ldr	r0, [pc, #4]	; (800c154 <__malloc_lock+0x8>)
 800c14e:	f7ff b87c 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800c152:	bf00      	nop
 800c154:	2000a8dc 	.word	0x2000a8dc

0800c158 <__malloc_unlock>:
 800c158:	4801      	ldr	r0, [pc, #4]	; (800c160 <__malloc_unlock+0x8>)
 800c15a:	f7ff b877 	b.w	800b24c <__retarget_lock_release_recursive>
 800c15e:	bf00      	nop
 800c160:	2000a8dc 	.word	0x2000a8dc

0800c164 <_Balloc>:
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	69c6      	ldr	r6, [r0, #28]
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	b976      	cbnz	r6, 800c18c <_Balloc+0x28>
 800c16e:	2010      	movs	r0, #16
 800c170:	f7ff ff44 	bl	800bffc <malloc>
 800c174:	4602      	mov	r2, r0
 800c176:	61e0      	str	r0, [r4, #28]
 800c178:	b920      	cbnz	r0, 800c184 <_Balloc+0x20>
 800c17a:	4b18      	ldr	r3, [pc, #96]	; (800c1dc <_Balloc+0x78>)
 800c17c:	4818      	ldr	r0, [pc, #96]	; (800c1e0 <_Balloc+0x7c>)
 800c17e:	216b      	movs	r1, #107	; 0x6b
 800c180:	f000 fdf2 	bl	800cd68 <__assert_func>
 800c184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c188:	6006      	str	r6, [r0, #0]
 800c18a:	60c6      	str	r6, [r0, #12]
 800c18c:	69e6      	ldr	r6, [r4, #28]
 800c18e:	68f3      	ldr	r3, [r6, #12]
 800c190:	b183      	cbz	r3, 800c1b4 <_Balloc+0x50>
 800c192:	69e3      	ldr	r3, [r4, #28]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c19a:	b9b8      	cbnz	r0, 800c1cc <_Balloc+0x68>
 800c19c:	2101      	movs	r1, #1
 800c19e:	fa01 f605 	lsl.w	r6, r1, r5
 800c1a2:	1d72      	adds	r2, r6, #5
 800c1a4:	0092      	lsls	r2, r2, #2
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 fdfc 	bl	800cda4 <_calloc_r>
 800c1ac:	b160      	cbz	r0, 800c1c8 <_Balloc+0x64>
 800c1ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1b2:	e00e      	b.n	800c1d2 <_Balloc+0x6e>
 800c1b4:	2221      	movs	r2, #33	; 0x21
 800c1b6:	2104      	movs	r1, #4
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f000 fdf3 	bl	800cda4 <_calloc_r>
 800c1be:	69e3      	ldr	r3, [r4, #28]
 800c1c0:	60f0      	str	r0, [r6, #12]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1e4      	bne.n	800c192 <_Balloc+0x2e>
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}
 800c1cc:	6802      	ldr	r2, [r0, #0]
 800c1ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1d8:	e7f7      	b.n	800c1ca <_Balloc+0x66>
 800c1da:	bf00      	nop
 800c1dc:	0800d051 	.word	0x0800d051
 800c1e0:	0800d0d1 	.word	0x0800d0d1

0800c1e4 <_Bfree>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	69c6      	ldr	r6, [r0, #28]
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	b976      	cbnz	r6, 800c20c <_Bfree+0x28>
 800c1ee:	2010      	movs	r0, #16
 800c1f0:	f7ff ff04 	bl	800bffc <malloc>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	61e8      	str	r0, [r5, #28]
 800c1f8:	b920      	cbnz	r0, 800c204 <_Bfree+0x20>
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <_Bfree+0x3c>)
 800c1fc:	4809      	ldr	r0, [pc, #36]	; (800c224 <_Bfree+0x40>)
 800c1fe:	218f      	movs	r1, #143	; 0x8f
 800c200:	f000 fdb2 	bl	800cd68 <__assert_func>
 800c204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c208:	6006      	str	r6, [r0, #0]
 800c20a:	60c6      	str	r6, [r0, #12]
 800c20c:	b13c      	cbz	r4, 800c21e <_Bfree+0x3a>
 800c20e:	69eb      	ldr	r3, [r5, #28]
 800c210:	6862      	ldr	r2, [r4, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c218:	6021      	str	r1, [r4, #0]
 800c21a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	0800d051 	.word	0x0800d051
 800c224:	0800d0d1 	.word	0x0800d0d1

0800c228 <__multadd>:
 800c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22c:	690d      	ldr	r5, [r1, #16]
 800c22e:	4607      	mov	r7, r0
 800c230:	460c      	mov	r4, r1
 800c232:	461e      	mov	r6, r3
 800c234:	f101 0c14 	add.w	ip, r1, #20
 800c238:	2000      	movs	r0, #0
 800c23a:	f8dc 3000 	ldr.w	r3, [ip]
 800c23e:	b299      	uxth	r1, r3
 800c240:	fb02 6101 	mla	r1, r2, r1, r6
 800c244:	0c1e      	lsrs	r6, r3, #16
 800c246:	0c0b      	lsrs	r3, r1, #16
 800c248:	fb02 3306 	mla	r3, r2, r6, r3
 800c24c:	b289      	uxth	r1, r1
 800c24e:	3001      	adds	r0, #1
 800c250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c254:	4285      	cmp	r5, r0
 800c256:	f84c 1b04 	str.w	r1, [ip], #4
 800c25a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c25e:	dcec      	bgt.n	800c23a <__multadd+0x12>
 800c260:	b30e      	cbz	r6, 800c2a6 <__multadd+0x7e>
 800c262:	68a3      	ldr	r3, [r4, #8]
 800c264:	42ab      	cmp	r3, r5
 800c266:	dc19      	bgt.n	800c29c <__multadd+0x74>
 800c268:	6861      	ldr	r1, [r4, #4]
 800c26a:	4638      	mov	r0, r7
 800c26c:	3101      	adds	r1, #1
 800c26e:	f7ff ff79 	bl	800c164 <_Balloc>
 800c272:	4680      	mov	r8, r0
 800c274:	b928      	cbnz	r0, 800c282 <__multadd+0x5a>
 800c276:	4602      	mov	r2, r0
 800c278:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <__multadd+0x84>)
 800c27a:	480d      	ldr	r0, [pc, #52]	; (800c2b0 <__multadd+0x88>)
 800c27c:	21ba      	movs	r1, #186	; 0xba
 800c27e:	f000 fd73 	bl	800cd68 <__assert_func>
 800c282:	6922      	ldr	r2, [r4, #16]
 800c284:	3202      	adds	r2, #2
 800c286:	f104 010c 	add.w	r1, r4, #12
 800c28a:	0092      	lsls	r2, r2, #2
 800c28c:	300c      	adds	r0, #12
 800c28e:	f7fe ffde 	bl	800b24e <memcpy>
 800c292:	4621      	mov	r1, r4
 800c294:	4638      	mov	r0, r7
 800c296:	f7ff ffa5 	bl	800c1e4 <_Bfree>
 800c29a:	4644      	mov	r4, r8
 800c29c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	615e      	str	r6, [r3, #20]
 800c2a4:	6125      	str	r5, [r4, #16]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	0800d0c0 	.word	0x0800d0c0
 800c2b0:	0800d0d1 	.word	0x0800d0d1

0800c2b4 <__hi0bits>:
 800c2b4:	0c03      	lsrs	r3, r0, #16
 800c2b6:	041b      	lsls	r3, r3, #16
 800c2b8:	b9d3      	cbnz	r3, 800c2f0 <__hi0bits+0x3c>
 800c2ba:	0400      	lsls	r0, r0, #16
 800c2bc:	2310      	movs	r3, #16
 800c2be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2c2:	bf04      	itt	eq
 800c2c4:	0200      	lsleq	r0, r0, #8
 800c2c6:	3308      	addeq	r3, #8
 800c2c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2cc:	bf04      	itt	eq
 800c2ce:	0100      	lsleq	r0, r0, #4
 800c2d0:	3304      	addeq	r3, #4
 800c2d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c2d6:	bf04      	itt	eq
 800c2d8:	0080      	lsleq	r0, r0, #2
 800c2da:	3302      	addeq	r3, #2
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	db05      	blt.n	800c2ec <__hi0bits+0x38>
 800c2e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2e4:	f103 0301 	add.w	r3, r3, #1
 800c2e8:	bf08      	it	eq
 800c2ea:	2320      	moveq	r3, #32
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	4770      	bx	lr
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e7e4      	b.n	800c2be <__hi0bits+0xa>

0800c2f4 <__lo0bits>:
 800c2f4:	6803      	ldr	r3, [r0, #0]
 800c2f6:	f013 0207 	ands.w	r2, r3, #7
 800c2fa:	d00c      	beq.n	800c316 <__lo0bits+0x22>
 800c2fc:	07d9      	lsls	r1, r3, #31
 800c2fe:	d422      	bmi.n	800c346 <__lo0bits+0x52>
 800c300:	079a      	lsls	r2, r3, #30
 800c302:	bf49      	itett	mi
 800c304:	085b      	lsrmi	r3, r3, #1
 800c306:	089b      	lsrpl	r3, r3, #2
 800c308:	6003      	strmi	r3, [r0, #0]
 800c30a:	2201      	movmi	r2, #1
 800c30c:	bf5c      	itt	pl
 800c30e:	6003      	strpl	r3, [r0, #0]
 800c310:	2202      	movpl	r2, #2
 800c312:	4610      	mov	r0, r2
 800c314:	4770      	bx	lr
 800c316:	b299      	uxth	r1, r3
 800c318:	b909      	cbnz	r1, 800c31e <__lo0bits+0x2a>
 800c31a:	0c1b      	lsrs	r3, r3, #16
 800c31c:	2210      	movs	r2, #16
 800c31e:	b2d9      	uxtb	r1, r3
 800c320:	b909      	cbnz	r1, 800c326 <__lo0bits+0x32>
 800c322:	3208      	adds	r2, #8
 800c324:	0a1b      	lsrs	r3, r3, #8
 800c326:	0719      	lsls	r1, r3, #28
 800c328:	bf04      	itt	eq
 800c32a:	091b      	lsreq	r3, r3, #4
 800c32c:	3204      	addeq	r2, #4
 800c32e:	0799      	lsls	r1, r3, #30
 800c330:	bf04      	itt	eq
 800c332:	089b      	lsreq	r3, r3, #2
 800c334:	3202      	addeq	r2, #2
 800c336:	07d9      	lsls	r1, r3, #31
 800c338:	d403      	bmi.n	800c342 <__lo0bits+0x4e>
 800c33a:	085b      	lsrs	r3, r3, #1
 800c33c:	f102 0201 	add.w	r2, r2, #1
 800c340:	d003      	beq.n	800c34a <__lo0bits+0x56>
 800c342:	6003      	str	r3, [r0, #0]
 800c344:	e7e5      	b.n	800c312 <__lo0bits+0x1e>
 800c346:	2200      	movs	r2, #0
 800c348:	e7e3      	b.n	800c312 <__lo0bits+0x1e>
 800c34a:	2220      	movs	r2, #32
 800c34c:	e7e1      	b.n	800c312 <__lo0bits+0x1e>
	...

0800c350 <__i2b>:
 800c350:	b510      	push	{r4, lr}
 800c352:	460c      	mov	r4, r1
 800c354:	2101      	movs	r1, #1
 800c356:	f7ff ff05 	bl	800c164 <_Balloc>
 800c35a:	4602      	mov	r2, r0
 800c35c:	b928      	cbnz	r0, 800c36a <__i2b+0x1a>
 800c35e:	4b05      	ldr	r3, [pc, #20]	; (800c374 <__i2b+0x24>)
 800c360:	4805      	ldr	r0, [pc, #20]	; (800c378 <__i2b+0x28>)
 800c362:	f240 1145 	movw	r1, #325	; 0x145
 800c366:	f000 fcff 	bl	800cd68 <__assert_func>
 800c36a:	2301      	movs	r3, #1
 800c36c:	6144      	str	r4, [r0, #20]
 800c36e:	6103      	str	r3, [r0, #16]
 800c370:	bd10      	pop	{r4, pc}
 800c372:	bf00      	nop
 800c374:	0800d0c0 	.word	0x0800d0c0
 800c378:	0800d0d1 	.word	0x0800d0d1

0800c37c <__multiply>:
 800c37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c380:	4691      	mov	r9, r2
 800c382:	690a      	ldr	r2, [r1, #16]
 800c384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c388:	429a      	cmp	r2, r3
 800c38a:	bfb8      	it	lt
 800c38c:	460b      	movlt	r3, r1
 800c38e:	460c      	mov	r4, r1
 800c390:	bfbc      	itt	lt
 800c392:	464c      	movlt	r4, r9
 800c394:	4699      	movlt	r9, r3
 800c396:	6927      	ldr	r7, [r4, #16]
 800c398:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	6861      	ldr	r1, [r4, #4]
 800c3a0:	eb07 060a 	add.w	r6, r7, sl
 800c3a4:	42b3      	cmp	r3, r6
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	bfb8      	it	lt
 800c3aa:	3101      	addlt	r1, #1
 800c3ac:	f7ff feda 	bl	800c164 <_Balloc>
 800c3b0:	b930      	cbnz	r0, 800c3c0 <__multiply+0x44>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4b44      	ldr	r3, [pc, #272]	; (800c4c8 <__multiply+0x14c>)
 800c3b6:	4845      	ldr	r0, [pc, #276]	; (800c4cc <__multiply+0x150>)
 800c3b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c3bc:	f000 fcd4 	bl	800cd68 <__assert_func>
 800c3c0:	f100 0514 	add.w	r5, r0, #20
 800c3c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	4543      	cmp	r3, r8
 800c3ce:	d321      	bcc.n	800c414 <__multiply+0x98>
 800c3d0:	f104 0314 	add.w	r3, r4, #20
 800c3d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c3d8:	f109 0314 	add.w	r3, r9, #20
 800c3dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3e0:	9202      	str	r2, [sp, #8]
 800c3e2:	1b3a      	subs	r2, r7, r4
 800c3e4:	3a15      	subs	r2, #21
 800c3e6:	f022 0203 	bic.w	r2, r2, #3
 800c3ea:	3204      	adds	r2, #4
 800c3ec:	f104 0115 	add.w	r1, r4, #21
 800c3f0:	428f      	cmp	r7, r1
 800c3f2:	bf38      	it	cc
 800c3f4:	2204      	movcc	r2, #4
 800c3f6:	9201      	str	r2, [sp, #4]
 800c3f8:	9a02      	ldr	r2, [sp, #8]
 800c3fa:	9303      	str	r3, [sp, #12]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d80c      	bhi.n	800c41a <__multiply+0x9e>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd03      	ble.n	800c40c <__multiply+0x90>
 800c404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d05b      	beq.n	800c4c4 <__multiply+0x148>
 800c40c:	6106      	str	r6, [r0, #16]
 800c40e:	b005      	add	sp, #20
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	f843 2b04 	str.w	r2, [r3], #4
 800c418:	e7d8      	b.n	800c3cc <__multiply+0x50>
 800c41a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c41e:	f1ba 0f00 	cmp.w	sl, #0
 800c422:	d024      	beq.n	800c46e <__multiply+0xf2>
 800c424:	f104 0e14 	add.w	lr, r4, #20
 800c428:	46a9      	mov	r9, r5
 800c42a:	f04f 0c00 	mov.w	ip, #0
 800c42e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c432:	f8d9 1000 	ldr.w	r1, [r9]
 800c436:	fa1f fb82 	uxth.w	fp, r2
 800c43a:	b289      	uxth	r1, r1
 800c43c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c444:	f8d9 2000 	ldr.w	r2, [r9]
 800c448:	4461      	add	r1, ip
 800c44a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c44e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c456:	b289      	uxth	r1, r1
 800c458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c45c:	4577      	cmp	r7, lr
 800c45e:	f849 1b04 	str.w	r1, [r9], #4
 800c462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c466:	d8e2      	bhi.n	800c42e <__multiply+0xb2>
 800c468:	9a01      	ldr	r2, [sp, #4]
 800c46a:	f845 c002 	str.w	ip, [r5, r2]
 800c46e:	9a03      	ldr	r2, [sp, #12]
 800c470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c474:	3304      	adds	r3, #4
 800c476:	f1b9 0f00 	cmp.w	r9, #0
 800c47a:	d021      	beq.n	800c4c0 <__multiply+0x144>
 800c47c:	6829      	ldr	r1, [r5, #0]
 800c47e:	f104 0c14 	add.w	ip, r4, #20
 800c482:	46ae      	mov	lr, r5
 800c484:	f04f 0a00 	mov.w	sl, #0
 800c488:	f8bc b000 	ldrh.w	fp, [ip]
 800c48c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c490:	fb09 220b 	mla	r2, r9, fp, r2
 800c494:	4452      	add	r2, sl
 800c496:	b289      	uxth	r1, r1
 800c498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c49c:	f84e 1b04 	str.w	r1, [lr], #4
 800c4a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4a8:	f8be 1000 	ldrh.w	r1, [lr]
 800c4ac:	fb09 110a 	mla	r1, r9, sl, r1
 800c4b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c4b4:	4567      	cmp	r7, ip
 800c4b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4ba:	d8e5      	bhi.n	800c488 <__multiply+0x10c>
 800c4bc:	9a01      	ldr	r2, [sp, #4]
 800c4be:	50a9      	str	r1, [r5, r2]
 800c4c0:	3504      	adds	r5, #4
 800c4c2:	e799      	b.n	800c3f8 <__multiply+0x7c>
 800c4c4:	3e01      	subs	r6, #1
 800c4c6:	e79b      	b.n	800c400 <__multiply+0x84>
 800c4c8:	0800d0c0 	.word	0x0800d0c0
 800c4cc:	0800d0d1 	.word	0x0800d0d1

0800c4d0 <__pow5mult>:
 800c4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	4615      	mov	r5, r2
 800c4d6:	f012 0203 	ands.w	r2, r2, #3
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	d007      	beq.n	800c4f0 <__pow5mult+0x20>
 800c4e0:	4c25      	ldr	r4, [pc, #148]	; (800c578 <__pow5mult+0xa8>)
 800c4e2:	3a01      	subs	r2, #1
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ea:	f7ff fe9d 	bl	800c228 <__multadd>
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	10ad      	asrs	r5, r5, #2
 800c4f2:	d03d      	beq.n	800c570 <__pow5mult+0xa0>
 800c4f4:	69f4      	ldr	r4, [r6, #28]
 800c4f6:	b97c      	cbnz	r4, 800c518 <__pow5mult+0x48>
 800c4f8:	2010      	movs	r0, #16
 800c4fa:	f7ff fd7f 	bl	800bffc <malloc>
 800c4fe:	4602      	mov	r2, r0
 800c500:	61f0      	str	r0, [r6, #28]
 800c502:	b928      	cbnz	r0, 800c510 <__pow5mult+0x40>
 800c504:	4b1d      	ldr	r3, [pc, #116]	; (800c57c <__pow5mult+0xac>)
 800c506:	481e      	ldr	r0, [pc, #120]	; (800c580 <__pow5mult+0xb0>)
 800c508:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c50c:	f000 fc2c 	bl	800cd68 <__assert_func>
 800c510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c514:	6004      	str	r4, [r0, #0]
 800c516:	60c4      	str	r4, [r0, #12]
 800c518:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c51c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c520:	b94c      	cbnz	r4, 800c536 <__pow5mult+0x66>
 800c522:	f240 2171 	movw	r1, #625	; 0x271
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff ff12 	bl	800c350 <__i2b>
 800c52c:	2300      	movs	r3, #0
 800c52e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c532:	4604      	mov	r4, r0
 800c534:	6003      	str	r3, [r0, #0]
 800c536:	f04f 0900 	mov.w	r9, #0
 800c53a:	07eb      	lsls	r3, r5, #31
 800c53c:	d50a      	bpl.n	800c554 <__pow5mult+0x84>
 800c53e:	4639      	mov	r1, r7
 800c540:	4622      	mov	r2, r4
 800c542:	4630      	mov	r0, r6
 800c544:	f7ff ff1a 	bl	800c37c <__multiply>
 800c548:	4639      	mov	r1, r7
 800c54a:	4680      	mov	r8, r0
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff fe49 	bl	800c1e4 <_Bfree>
 800c552:	4647      	mov	r7, r8
 800c554:	106d      	asrs	r5, r5, #1
 800c556:	d00b      	beq.n	800c570 <__pow5mult+0xa0>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	b938      	cbnz	r0, 800c56c <__pow5mult+0x9c>
 800c55c:	4622      	mov	r2, r4
 800c55e:	4621      	mov	r1, r4
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ff0b 	bl	800c37c <__multiply>
 800c566:	6020      	str	r0, [r4, #0]
 800c568:	f8c0 9000 	str.w	r9, [r0]
 800c56c:	4604      	mov	r4, r0
 800c56e:	e7e4      	b.n	800c53a <__pow5mult+0x6a>
 800c570:	4638      	mov	r0, r7
 800c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c576:	bf00      	nop
 800c578:	0800d220 	.word	0x0800d220
 800c57c:	0800d051 	.word	0x0800d051
 800c580:	0800d0d1 	.word	0x0800d0d1

0800c584 <__lshift>:
 800c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	460c      	mov	r4, r1
 800c58a:	6849      	ldr	r1, [r1, #4]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	4607      	mov	r7, r0
 800c596:	4691      	mov	r9, r2
 800c598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c59c:	f108 0601 	add.w	r6, r8, #1
 800c5a0:	42b3      	cmp	r3, r6
 800c5a2:	db0b      	blt.n	800c5bc <__lshift+0x38>
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff fddd 	bl	800c164 <_Balloc>
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	b948      	cbnz	r0, 800c5c2 <__lshift+0x3e>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	4b28      	ldr	r3, [pc, #160]	; (800c654 <__lshift+0xd0>)
 800c5b2:	4829      	ldr	r0, [pc, #164]	; (800c658 <__lshift+0xd4>)
 800c5b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c5b8:	f000 fbd6 	bl	800cd68 <__assert_func>
 800c5bc:	3101      	adds	r1, #1
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	e7ee      	b.n	800c5a0 <__lshift+0x1c>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f100 0114 	add.w	r1, r0, #20
 800c5c8:	f100 0210 	add.w	r2, r0, #16
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	4553      	cmp	r3, sl
 800c5d0:	db33      	blt.n	800c63a <__lshift+0xb6>
 800c5d2:	6920      	ldr	r0, [r4, #16]
 800c5d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5d8:	f104 0314 	add.w	r3, r4, #20
 800c5dc:	f019 091f 	ands.w	r9, r9, #31
 800c5e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5e8:	d02b      	beq.n	800c642 <__lshift+0xbe>
 800c5ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c5ee:	468a      	mov	sl, r1
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	6818      	ldr	r0, [r3, #0]
 800c5f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c5f8:	4310      	orrs	r0, r2
 800c5fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c602:	459c      	cmp	ip, r3
 800c604:	fa22 f20e 	lsr.w	r2, r2, lr
 800c608:	d8f3      	bhi.n	800c5f2 <__lshift+0x6e>
 800c60a:	ebac 0304 	sub.w	r3, ip, r4
 800c60e:	3b15      	subs	r3, #21
 800c610:	f023 0303 	bic.w	r3, r3, #3
 800c614:	3304      	adds	r3, #4
 800c616:	f104 0015 	add.w	r0, r4, #21
 800c61a:	4584      	cmp	ip, r0
 800c61c:	bf38      	it	cc
 800c61e:	2304      	movcc	r3, #4
 800c620:	50ca      	str	r2, [r1, r3]
 800c622:	b10a      	cbz	r2, 800c628 <__lshift+0xa4>
 800c624:	f108 0602 	add.w	r6, r8, #2
 800c628:	3e01      	subs	r6, #1
 800c62a:	4638      	mov	r0, r7
 800c62c:	612e      	str	r6, [r5, #16]
 800c62e:	4621      	mov	r1, r4
 800c630:	f7ff fdd8 	bl	800c1e4 <_Bfree>
 800c634:	4628      	mov	r0, r5
 800c636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c63e:	3301      	adds	r3, #1
 800c640:	e7c5      	b.n	800c5ce <__lshift+0x4a>
 800c642:	3904      	subs	r1, #4
 800c644:	f853 2b04 	ldr.w	r2, [r3], #4
 800c648:	f841 2f04 	str.w	r2, [r1, #4]!
 800c64c:	459c      	cmp	ip, r3
 800c64e:	d8f9      	bhi.n	800c644 <__lshift+0xc0>
 800c650:	e7ea      	b.n	800c628 <__lshift+0xa4>
 800c652:	bf00      	nop
 800c654:	0800d0c0 	.word	0x0800d0c0
 800c658:	0800d0d1 	.word	0x0800d0d1

0800c65c <__mcmp>:
 800c65c:	b530      	push	{r4, r5, lr}
 800c65e:	6902      	ldr	r2, [r0, #16]
 800c660:	690c      	ldr	r4, [r1, #16]
 800c662:	1b12      	subs	r2, r2, r4
 800c664:	d10e      	bne.n	800c684 <__mcmp+0x28>
 800c666:	f100 0314 	add.w	r3, r0, #20
 800c66a:	3114      	adds	r1, #20
 800c66c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c67c:	42a5      	cmp	r5, r4
 800c67e:	d003      	beq.n	800c688 <__mcmp+0x2c>
 800c680:	d305      	bcc.n	800c68e <__mcmp+0x32>
 800c682:	2201      	movs	r2, #1
 800c684:	4610      	mov	r0, r2
 800c686:	bd30      	pop	{r4, r5, pc}
 800c688:	4283      	cmp	r3, r0
 800c68a:	d3f3      	bcc.n	800c674 <__mcmp+0x18>
 800c68c:	e7fa      	b.n	800c684 <__mcmp+0x28>
 800c68e:	f04f 32ff 	mov.w	r2, #4294967295
 800c692:	e7f7      	b.n	800c684 <__mcmp+0x28>

0800c694 <__mdiff>:
 800c694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	460c      	mov	r4, r1
 800c69a:	4606      	mov	r6, r0
 800c69c:	4611      	mov	r1, r2
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4690      	mov	r8, r2
 800c6a2:	f7ff ffdb 	bl	800c65c <__mcmp>
 800c6a6:	1e05      	subs	r5, r0, #0
 800c6a8:	d110      	bne.n	800c6cc <__mdiff+0x38>
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f7ff fd59 	bl	800c164 <_Balloc>
 800c6b2:	b930      	cbnz	r0, 800c6c2 <__mdiff+0x2e>
 800c6b4:	4b3a      	ldr	r3, [pc, #232]	; (800c7a0 <__mdiff+0x10c>)
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	f240 2137 	movw	r1, #567	; 0x237
 800c6bc:	4839      	ldr	r0, [pc, #228]	; (800c7a4 <__mdiff+0x110>)
 800c6be:	f000 fb53 	bl	800cd68 <__assert_func>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	bfa4      	itt	ge
 800c6ce:	4643      	movge	r3, r8
 800c6d0:	46a0      	movge	r8, r4
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c6d8:	bfa6      	itte	ge
 800c6da:	461c      	movge	r4, r3
 800c6dc:	2500      	movge	r5, #0
 800c6de:	2501      	movlt	r5, #1
 800c6e0:	f7ff fd40 	bl	800c164 <_Balloc>
 800c6e4:	b920      	cbnz	r0, 800c6f0 <__mdiff+0x5c>
 800c6e6:	4b2e      	ldr	r3, [pc, #184]	; (800c7a0 <__mdiff+0x10c>)
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	f240 2145 	movw	r1, #581	; 0x245
 800c6ee:	e7e5      	b.n	800c6bc <__mdiff+0x28>
 800c6f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6f4:	6926      	ldr	r6, [r4, #16]
 800c6f6:	60c5      	str	r5, [r0, #12]
 800c6f8:	f104 0914 	add.w	r9, r4, #20
 800c6fc:	f108 0514 	add.w	r5, r8, #20
 800c700:	f100 0e14 	add.w	lr, r0, #20
 800c704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c70c:	f108 0210 	add.w	r2, r8, #16
 800c710:	46f2      	mov	sl, lr
 800c712:	2100      	movs	r1, #0
 800c714:	f859 3b04 	ldr.w	r3, [r9], #4
 800c718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c71c:	fa11 f88b 	uxtah	r8, r1, fp
 800c720:	b299      	uxth	r1, r3
 800c722:	0c1b      	lsrs	r3, r3, #16
 800c724:	eba8 0801 	sub.w	r8, r8, r1
 800c728:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c72c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c730:	fa1f f888 	uxth.w	r8, r8
 800c734:	1419      	asrs	r1, r3, #16
 800c736:	454e      	cmp	r6, r9
 800c738:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c73c:	f84a 3b04 	str.w	r3, [sl], #4
 800c740:	d8e8      	bhi.n	800c714 <__mdiff+0x80>
 800c742:	1b33      	subs	r3, r6, r4
 800c744:	3b15      	subs	r3, #21
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	3304      	adds	r3, #4
 800c74c:	3415      	adds	r4, #21
 800c74e:	42a6      	cmp	r6, r4
 800c750:	bf38      	it	cc
 800c752:	2304      	movcc	r3, #4
 800c754:	441d      	add	r5, r3
 800c756:	4473      	add	r3, lr
 800c758:	469e      	mov	lr, r3
 800c75a:	462e      	mov	r6, r5
 800c75c:	4566      	cmp	r6, ip
 800c75e:	d30e      	bcc.n	800c77e <__mdiff+0xea>
 800c760:	f10c 0203 	add.w	r2, ip, #3
 800c764:	1b52      	subs	r2, r2, r5
 800c766:	f022 0203 	bic.w	r2, r2, #3
 800c76a:	3d03      	subs	r5, #3
 800c76c:	45ac      	cmp	ip, r5
 800c76e:	bf38      	it	cc
 800c770:	2200      	movcc	r2, #0
 800c772:	4413      	add	r3, r2
 800c774:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c778:	b17a      	cbz	r2, 800c79a <__mdiff+0x106>
 800c77a:	6107      	str	r7, [r0, #16]
 800c77c:	e7a4      	b.n	800c6c8 <__mdiff+0x34>
 800c77e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c782:	fa11 f288 	uxtah	r2, r1, r8
 800c786:	1414      	asrs	r4, r2, #16
 800c788:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c78c:	b292      	uxth	r2, r2
 800c78e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c792:	f84e 2b04 	str.w	r2, [lr], #4
 800c796:	1421      	asrs	r1, r4, #16
 800c798:	e7e0      	b.n	800c75c <__mdiff+0xc8>
 800c79a:	3f01      	subs	r7, #1
 800c79c:	e7ea      	b.n	800c774 <__mdiff+0xe0>
 800c79e:	bf00      	nop
 800c7a0:	0800d0c0 	.word	0x0800d0c0
 800c7a4:	0800d0d1 	.word	0x0800d0d1

0800c7a8 <__d2b>:
 800c7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	ec59 8b10 	vmov	r8, r9, d0
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	f7ff fcd5 	bl	800c164 <_Balloc>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	b930      	cbnz	r0, 800c7cc <__d2b+0x24>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b24      	ldr	r3, [pc, #144]	; (800c854 <__d2b+0xac>)
 800c7c2:	4825      	ldr	r0, [pc, #148]	; (800c858 <__d2b+0xb0>)
 800c7c4:	f240 310f 	movw	r1, #783	; 0x30f
 800c7c8:	f000 face 	bl	800cd68 <__assert_func>
 800c7cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7d4:	bb2d      	cbnz	r5, 800c822 <__d2b+0x7a>
 800c7d6:	9301      	str	r3, [sp, #4]
 800c7d8:	f1b8 0300 	subs.w	r3, r8, #0
 800c7dc:	d026      	beq.n	800c82c <__d2b+0x84>
 800c7de:	4668      	mov	r0, sp
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	f7ff fd87 	bl	800c2f4 <__lo0bits>
 800c7e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7ea:	b1e8      	cbz	r0, 800c828 <__d2b+0x80>
 800c7ec:	f1c0 0320 	rsb	r3, r0, #32
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	430b      	orrs	r3, r1
 800c7f6:	40c2      	lsrs	r2, r0
 800c7f8:	6163      	str	r3, [r4, #20]
 800c7fa:	9201      	str	r2, [sp, #4]
 800c7fc:	9b01      	ldr	r3, [sp, #4]
 800c7fe:	61a3      	str	r3, [r4, #24]
 800c800:	2b00      	cmp	r3, #0
 800c802:	bf14      	ite	ne
 800c804:	2202      	movne	r2, #2
 800c806:	2201      	moveq	r2, #1
 800c808:	6122      	str	r2, [r4, #16]
 800c80a:	b1bd      	cbz	r5, 800c83c <__d2b+0x94>
 800c80c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c810:	4405      	add	r5, r0
 800c812:	603d      	str	r5, [r7, #0]
 800c814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c818:	6030      	str	r0, [r6, #0]
 800c81a:	4620      	mov	r0, r4
 800c81c:	b003      	add	sp, #12
 800c81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c826:	e7d6      	b.n	800c7d6 <__d2b+0x2e>
 800c828:	6161      	str	r1, [r4, #20]
 800c82a:	e7e7      	b.n	800c7fc <__d2b+0x54>
 800c82c:	a801      	add	r0, sp, #4
 800c82e:	f7ff fd61 	bl	800c2f4 <__lo0bits>
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	6163      	str	r3, [r4, #20]
 800c836:	3020      	adds	r0, #32
 800c838:	2201      	movs	r2, #1
 800c83a:	e7e5      	b.n	800c808 <__d2b+0x60>
 800c83c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c844:	6038      	str	r0, [r7, #0]
 800c846:	6918      	ldr	r0, [r3, #16]
 800c848:	f7ff fd34 	bl	800c2b4 <__hi0bits>
 800c84c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c850:	e7e2      	b.n	800c818 <__d2b+0x70>
 800c852:	bf00      	nop
 800c854:	0800d0c0 	.word	0x0800d0c0
 800c858:	0800d0d1 	.word	0x0800d0d1

0800c85c <__sfputc_r>:
 800c85c:	6893      	ldr	r3, [r2, #8]
 800c85e:	3b01      	subs	r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	b410      	push	{r4}
 800c864:	6093      	str	r3, [r2, #8]
 800c866:	da08      	bge.n	800c87a <__sfputc_r+0x1e>
 800c868:	6994      	ldr	r4, [r2, #24]
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	db01      	blt.n	800c872 <__sfputc_r+0x16>
 800c86e:	290a      	cmp	r1, #10
 800c870:	d103      	bne.n	800c87a <__sfputc_r+0x1e>
 800c872:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c876:	f7fe bbd6 	b.w	800b026 <__swbuf_r>
 800c87a:	6813      	ldr	r3, [r2, #0]
 800c87c:	1c58      	adds	r0, r3, #1
 800c87e:	6010      	str	r0, [r2, #0]
 800c880:	7019      	strb	r1, [r3, #0]
 800c882:	4608      	mov	r0, r1
 800c884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <__sfputs_r>:
 800c88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88c:	4606      	mov	r6, r0
 800c88e:	460f      	mov	r7, r1
 800c890:	4614      	mov	r4, r2
 800c892:	18d5      	adds	r5, r2, r3
 800c894:	42ac      	cmp	r4, r5
 800c896:	d101      	bne.n	800c89c <__sfputs_r+0x12>
 800c898:	2000      	movs	r0, #0
 800c89a:	e007      	b.n	800c8ac <__sfputs_r+0x22>
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	463a      	mov	r2, r7
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f7ff ffda 	bl	800c85c <__sfputc_r>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d1f3      	bne.n	800c894 <__sfputs_r+0xa>
 800c8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8b0 <_vfiprintf_r>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	b09d      	sub	sp, #116	; 0x74
 800c8b8:	4614      	mov	r4, r2
 800c8ba:	4698      	mov	r8, r3
 800c8bc:	4606      	mov	r6, r0
 800c8be:	b118      	cbz	r0, 800c8c8 <_vfiprintf_r+0x18>
 800c8c0:	6a03      	ldr	r3, [r0, #32]
 800c8c2:	b90b      	cbnz	r3, 800c8c8 <_vfiprintf_r+0x18>
 800c8c4:	f7fe fac8 	bl	800ae58 <__sinit>
 800c8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8ca:	07d9      	lsls	r1, r3, #31
 800c8cc:	d405      	bmi.n	800c8da <_vfiprintf_r+0x2a>
 800c8ce:	89ab      	ldrh	r3, [r5, #12]
 800c8d0:	059a      	lsls	r2, r3, #22
 800c8d2:	d402      	bmi.n	800c8da <_vfiprintf_r+0x2a>
 800c8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8d6:	f7fe fcb8 	bl	800b24a <__retarget_lock_acquire_recursive>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	071b      	lsls	r3, r3, #28
 800c8de:	d501      	bpl.n	800c8e4 <_vfiprintf_r+0x34>
 800c8e0:	692b      	ldr	r3, [r5, #16]
 800c8e2:	b99b      	cbnz	r3, 800c90c <_vfiprintf_r+0x5c>
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fe fbda 	bl	800b0a0 <__swsetup_r>
 800c8ec:	b170      	cbz	r0, 800c90c <_vfiprintf_r+0x5c>
 800c8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f0:	07dc      	lsls	r4, r3, #31
 800c8f2:	d504      	bpl.n	800c8fe <_vfiprintf_r+0x4e>
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	b01d      	add	sp, #116	; 0x74
 800c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	0598      	lsls	r0, r3, #22
 800c902:	d4f7      	bmi.n	800c8f4 <_vfiprintf_r+0x44>
 800c904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c906:	f7fe fca1 	bl	800b24c <__retarget_lock_release_recursive>
 800c90a:	e7f3      	b.n	800c8f4 <_vfiprintf_r+0x44>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	2320      	movs	r3, #32
 800c912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c916:	f8cd 800c 	str.w	r8, [sp, #12]
 800c91a:	2330      	movs	r3, #48	; 0x30
 800c91c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cad0 <_vfiprintf_r+0x220>
 800c920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c924:	f04f 0901 	mov.w	r9, #1
 800c928:	4623      	mov	r3, r4
 800c92a:	469a      	mov	sl, r3
 800c92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c930:	b10a      	cbz	r2, 800c936 <_vfiprintf_r+0x86>
 800c932:	2a25      	cmp	r2, #37	; 0x25
 800c934:	d1f9      	bne.n	800c92a <_vfiprintf_r+0x7a>
 800c936:	ebba 0b04 	subs.w	fp, sl, r4
 800c93a:	d00b      	beq.n	800c954 <_vfiprintf_r+0xa4>
 800c93c:	465b      	mov	r3, fp
 800c93e:	4622      	mov	r2, r4
 800c940:	4629      	mov	r1, r5
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ffa1 	bl	800c88a <__sfputs_r>
 800c948:	3001      	adds	r0, #1
 800c94a:	f000 80a9 	beq.w	800caa0 <_vfiprintf_r+0x1f0>
 800c94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c950:	445a      	add	r2, fp
 800c952:	9209      	str	r2, [sp, #36]	; 0x24
 800c954:	f89a 3000 	ldrb.w	r3, [sl]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 80a1 	beq.w	800caa0 <_vfiprintf_r+0x1f0>
 800c95e:	2300      	movs	r3, #0
 800c960:	f04f 32ff 	mov.w	r2, #4294967295
 800c964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c968:	f10a 0a01 	add.w	sl, sl, #1
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	9307      	str	r3, [sp, #28]
 800c970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c974:	931a      	str	r3, [sp, #104]	; 0x68
 800c976:	4654      	mov	r4, sl
 800c978:	2205      	movs	r2, #5
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	4854      	ldr	r0, [pc, #336]	; (800cad0 <_vfiprintf_r+0x220>)
 800c980:	f7f3 fc26 	bl	80001d0 <memchr>
 800c984:	9a04      	ldr	r2, [sp, #16]
 800c986:	b9d8      	cbnz	r0, 800c9c0 <_vfiprintf_r+0x110>
 800c988:	06d1      	lsls	r1, r2, #27
 800c98a:	bf44      	itt	mi
 800c98c:	2320      	movmi	r3, #32
 800c98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c992:	0713      	lsls	r3, r2, #28
 800c994:	bf44      	itt	mi
 800c996:	232b      	movmi	r3, #43	; 0x2b
 800c998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c99c:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a2:	d015      	beq.n	800c9d0 <_vfiprintf_r+0x120>
 800c9a4:	9a07      	ldr	r2, [sp, #28]
 800c9a6:	4654      	mov	r4, sl
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	f04f 0c0a 	mov.w	ip, #10
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b4:	3b30      	subs	r3, #48	; 0x30
 800c9b6:	2b09      	cmp	r3, #9
 800c9b8:	d94d      	bls.n	800ca56 <_vfiprintf_r+0x1a6>
 800c9ba:	b1b0      	cbz	r0, 800c9ea <_vfiprintf_r+0x13a>
 800c9bc:	9207      	str	r2, [sp, #28]
 800c9be:	e014      	b.n	800c9ea <_vfiprintf_r+0x13a>
 800c9c0:	eba0 0308 	sub.w	r3, r0, r8
 800c9c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	46a2      	mov	sl, r4
 800c9ce:	e7d2      	b.n	800c976 <_vfiprintf_r+0xc6>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	1d19      	adds	r1, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	9103      	str	r1, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfbb      	ittet	lt
 800c9dc:	425b      	neglt	r3, r3
 800c9de:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e2:	9307      	strge	r3, [sp, #28]
 800c9e4:	9307      	strlt	r3, [sp, #28]
 800c9e6:	bfb8      	it	lt
 800c9e8:	9204      	strlt	r2, [sp, #16]
 800c9ea:	7823      	ldrb	r3, [r4, #0]
 800c9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ee:	d10c      	bne.n	800ca0a <_vfiprintf_r+0x15a>
 800c9f0:	7863      	ldrb	r3, [r4, #1]
 800c9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f4:	d134      	bne.n	800ca60 <_vfiprintf_r+0x1b0>
 800c9f6:	9b03      	ldr	r3, [sp, #12]
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	9203      	str	r2, [sp, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bfb8      	it	lt
 800ca02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca06:	3402      	adds	r4, #2
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cae0 <_vfiprintf_r+0x230>
 800ca0e:	7821      	ldrb	r1, [r4, #0]
 800ca10:	2203      	movs	r2, #3
 800ca12:	4650      	mov	r0, sl
 800ca14:	f7f3 fbdc 	bl	80001d0 <memchr>
 800ca18:	b138      	cbz	r0, 800ca2a <_vfiprintf_r+0x17a>
 800ca1a:	9b04      	ldr	r3, [sp, #16]
 800ca1c:	eba0 000a 	sub.w	r0, r0, sl
 800ca20:	2240      	movs	r2, #64	; 0x40
 800ca22:	4082      	lsls	r2, r0
 800ca24:	4313      	orrs	r3, r2
 800ca26:	3401      	adds	r4, #1
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2e:	4829      	ldr	r0, [pc, #164]	; (800cad4 <_vfiprintf_r+0x224>)
 800ca30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca34:	2206      	movs	r2, #6
 800ca36:	f7f3 fbcb 	bl	80001d0 <memchr>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d03f      	beq.n	800cabe <_vfiprintf_r+0x20e>
 800ca3e:	4b26      	ldr	r3, [pc, #152]	; (800cad8 <_vfiprintf_r+0x228>)
 800ca40:	bb1b      	cbnz	r3, 800ca8a <_vfiprintf_r+0x1da>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	3307      	adds	r3, #7
 800ca46:	f023 0307 	bic.w	r3, r3, #7
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	9303      	str	r3, [sp, #12]
 800ca4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca50:	443b      	add	r3, r7
 800ca52:	9309      	str	r3, [sp, #36]	; 0x24
 800ca54:	e768      	b.n	800c928 <_vfiprintf_r+0x78>
 800ca56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	2001      	movs	r0, #1
 800ca5e:	e7a6      	b.n	800c9ae <_vfiprintf_r+0xfe>
 800ca60:	2300      	movs	r3, #0
 800ca62:	3401      	adds	r4, #1
 800ca64:	9305      	str	r3, [sp, #20]
 800ca66:	4619      	mov	r1, r3
 800ca68:	f04f 0c0a 	mov.w	ip, #10
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca72:	3a30      	subs	r2, #48	; 0x30
 800ca74:	2a09      	cmp	r2, #9
 800ca76:	d903      	bls.n	800ca80 <_vfiprintf_r+0x1d0>
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d0c6      	beq.n	800ca0a <_vfiprintf_r+0x15a>
 800ca7c:	9105      	str	r1, [sp, #20]
 800ca7e:	e7c4      	b.n	800ca0a <_vfiprintf_r+0x15a>
 800ca80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca84:	4604      	mov	r4, r0
 800ca86:	2301      	movs	r3, #1
 800ca88:	e7f0      	b.n	800ca6c <_vfiprintf_r+0x1bc>
 800ca8a:	ab03      	add	r3, sp, #12
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	462a      	mov	r2, r5
 800ca90:	4b12      	ldr	r3, [pc, #72]	; (800cadc <_vfiprintf_r+0x22c>)
 800ca92:	a904      	add	r1, sp, #16
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7fd fd8d 	bl	800a5b4 <_printf_float>
 800ca9a:	4607      	mov	r7, r0
 800ca9c:	1c78      	adds	r0, r7, #1
 800ca9e:	d1d6      	bne.n	800ca4e <_vfiprintf_r+0x19e>
 800caa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa2:	07d9      	lsls	r1, r3, #31
 800caa4:	d405      	bmi.n	800cab2 <_vfiprintf_r+0x202>
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	059a      	lsls	r2, r3, #22
 800caaa:	d402      	bmi.n	800cab2 <_vfiprintf_r+0x202>
 800caac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caae:	f7fe fbcd 	bl	800b24c <__retarget_lock_release_recursive>
 800cab2:	89ab      	ldrh	r3, [r5, #12]
 800cab4:	065b      	lsls	r3, r3, #25
 800cab6:	f53f af1d 	bmi.w	800c8f4 <_vfiprintf_r+0x44>
 800caba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cabc:	e71c      	b.n	800c8f8 <_vfiprintf_r+0x48>
 800cabe:	ab03      	add	r3, sp, #12
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	462a      	mov	r2, r5
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <_vfiprintf_r+0x22c>)
 800cac6:	a904      	add	r1, sp, #16
 800cac8:	4630      	mov	r0, r6
 800caca:	f7fe f817 	bl	800aafc <_printf_i>
 800cace:	e7e4      	b.n	800ca9a <_vfiprintf_r+0x1ea>
 800cad0:	0800d22c 	.word	0x0800d22c
 800cad4:	0800d236 	.word	0x0800d236
 800cad8:	0800a5b5 	.word	0x0800a5b5
 800cadc:	0800c88b 	.word	0x0800c88b
 800cae0:	0800d232 	.word	0x0800d232

0800cae4 <__sflush_r>:
 800cae4:	898a      	ldrh	r2, [r1, #12]
 800cae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caea:	4605      	mov	r5, r0
 800caec:	0710      	lsls	r0, r2, #28
 800caee:	460c      	mov	r4, r1
 800caf0:	d458      	bmi.n	800cba4 <__sflush_r+0xc0>
 800caf2:	684b      	ldr	r3, [r1, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dc05      	bgt.n	800cb04 <__sflush_r+0x20>
 800caf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	dc02      	bgt.n	800cb04 <__sflush_r+0x20>
 800cafe:	2000      	movs	r0, #0
 800cb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb06:	2e00      	cmp	r6, #0
 800cb08:	d0f9      	beq.n	800cafe <__sflush_r+0x1a>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb10:	682f      	ldr	r7, [r5, #0]
 800cb12:	6a21      	ldr	r1, [r4, #32]
 800cb14:	602b      	str	r3, [r5, #0]
 800cb16:	d032      	beq.n	800cb7e <__sflush_r+0x9a>
 800cb18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	075a      	lsls	r2, r3, #29
 800cb1e:	d505      	bpl.n	800cb2c <__sflush_r+0x48>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	1ac0      	subs	r0, r0, r3
 800cb24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb26:	b10b      	cbz	r3, 800cb2c <__sflush_r+0x48>
 800cb28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb2a:	1ac0      	subs	r0, r0, r3
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4602      	mov	r2, r0
 800cb30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb32:	6a21      	ldr	r1, [r4, #32]
 800cb34:	4628      	mov	r0, r5
 800cb36:	47b0      	blx	r6
 800cb38:	1c43      	adds	r3, r0, #1
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	d106      	bne.n	800cb4c <__sflush_r+0x68>
 800cb3e:	6829      	ldr	r1, [r5, #0]
 800cb40:	291d      	cmp	r1, #29
 800cb42:	d82b      	bhi.n	800cb9c <__sflush_r+0xb8>
 800cb44:	4a29      	ldr	r2, [pc, #164]	; (800cbec <__sflush_r+0x108>)
 800cb46:	410a      	asrs	r2, r1
 800cb48:	07d6      	lsls	r6, r2, #31
 800cb4a:	d427      	bmi.n	800cb9c <__sflush_r+0xb8>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	6062      	str	r2, [r4, #4]
 800cb50:	04d9      	lsls	r1, r3, #19
 800cb52:	6922      	ldr	r2, [r4, #16]
 800cb54:	6022      	str	r2, [r4, #0]
 800cb56:	d504      	bpl.n	800cb62 <__sflush_r+0x7e>
 800cb58:	1c42      	adds	r2, r0, #1
 800cb5a:	d101      	bne.n	800cb60 <__sflush_r+0x7c>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b903      	cbnz	r3, 800cb62 <__sflush_r+0x7e>
 800cb60:	6560      	str	r0, [r4, #84]	; 0x54
 800cb62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb64:	602f      	str	r7, [r5, #0]
 800cb66:	2900      	cmp	r1, #0
 800cb68:	d0c9      	beq.n	800cafe <__sflush_r+0x1a>
 800cb6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb6e:	4299      	cmp	r1, r3
 800cb70:	d002      	beq.n	800cb78 <__sflush_r+0x94>
 800cb72:	4628      	mov	r0, r5
 800cb74:	f7ff f9f6 	bl	800bf64 <_free_r>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	6360      	str	r0, [r4, #52]	; 0x34
 800cb7c:	e7c0      	b.n	800cb00 <__sflush_r+0x1c>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	4628      	mov	r0, r5
 800cb82:	47b0      	blx	r6
 800cb84:	1c41      	adds	r1, r0, #1
 800cb86:	d1c8      	bne.n	800cb1a <__sflush_r+0x36>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d0c5      	beq.n	800cb1a <__sflush_r+0x36>
 800cb8e:	2b1d      	cmp	r3, #29
 800cb90:	d001      	beq.n	800cb96 <__sflush_r+0xb2>
 800cb92:	2b16      	cmp	r3, #22
 800cb94:	d101      	bne.n	800cb9a <__sflush_r+0xb6>
 800cb96:	602f      	str	r7, [r5, #0]
 800cb98:	e7b1      	b.n	800cafe <__sflush_r+0x1a>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba0:	81a3      	strh	r3, [r4, #12]
 800cba2:	e7ad      	b.n	800cb00 <__sflush_r+0x1c>
 800cba4:	690f      	ldr	r7, [r1, #16]
 800cba6:	2f00      	cmp	r7, #0
 800cba8:	d0a9      	beq.n	800cafe <__sflush_r+0x1a>
 800cbaa:	0793      	lsls	r3, r2, #30
 800cbac:	680e      	ldr	r6, [r1, #0]
 800cbae:	bf08      	it	eq
 800cbb0:	694b      	ldreq	r3, [r1, #20]
 800cbb2:	600f      	str	r7, [r1, #0]
 800cbb4:	bf18      	it	ne
 800cbb6:	2300      	movne	r3, #0
 800cbb8:	eba6 0807 	sub.w	r8, r6, r7
 800cbbc:	608b      	str	r3, [r1, #8]
 800cbbe:	f1b8 0f00 	cmp.w	r8, #0
 800cbc2:	dd9c      	ble.n	800cafe <__sflush_r+0x1a>
 800cbc4:	6a21      	ldr	r1, [r4, #32]
 800cbc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbc8:	4643      	mov	r3, r8
 800cbca:	463a      	mov	r2, r7
 800cbcc:	4628      	mov	r0, r5
 800cbce:	47b0      	blx	r6
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	dc06      	bgt.n	800cbe2 <__sflush_r+0xfe>
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	e78e      	b.n	800cb00 <__sflush_r+0x1c>
 800cbe2:	4407      	add	r7, r0
 800cbe4:	eba8 0800 	sub.w	r8, r8, r0
 800cbe8:	e7e9      	b.n	800cbbe <__sflush_r+0xda>
 800cbea:	bf00      	nop
 800cbec:	dfbffffe 	.word	0xdfbffffe

0800cbf0 <_fflush_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	690b      	ldr	r3, [r1, #16]
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	b913      	cbnz	r3, 800cc00 <_fflush_r+0x10>
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	b118      	cbz	r0, 800cc0a <_fflush_r+0x1a>
 800cc02:	6a03      	ldr	r3, [r0, #32]
 800cc04:	b90b      	cbnz	r3, 800cc0a <_fflush_r+0x1a>
 800cc06:	f7fe f927 	bl	800ae58 <__sinit>
 800cc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0f3      	beq.n	800cbfa <_fflush_r+0xa>
 800cc12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc14:	07d0      	lsls	r0, r2, #31
 800cc16:	d404      	bmi.n	800cc22 <_fflush_r+0x32>
 800cc18:	0599      	lsls	r1, r3, #22
 800cc1a:	d402      	bmi.n	800cc22 <_fflush_r+0x32>
 800cc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc1e:	f7fe fb14 	bl	800b24a <__retarget_lock_acquire_recursive>
 800cc22:	4628      	mov	r0, r5
 800cc24:	4621      	mov	r1, r4
 800cc26:	f7ff ff5d 	bl	800cae4 <__sflush_r>
 800cc2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc2c:	07da      	lsls	r2, r3, #31
 800cc2e:	4605      	mov	r5, r0
 800cc30:	d4e4      	bmi.n	800cbfc <_fflush_r+0xc>
 800cc32:	89a3      	ldrh	r3, [r4, #12]
 800cc34:	059b      	lsls	r3, r3, #22
 800cc36:	d4e1      	bmi.n	800cbfc <_fflush_r+0xc>
 800cc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc3a:	f7fe fb07 	bl	800b24c <__retarget_lock_release_recursive>
 800cc3e:	e7dd      	b.n	800cbfc <_fflush_r+0xc>

0800cc40 <__swhatbuf_r>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	460c      	mov	r4, r1
 800cc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	b096      	sub	sp, #88	; 0x58
 800cc4c:	4615      	mov	r5, r2
 800cc4e:	461e      	mov	r6, r3
 800cc50:	da0d      	bge.n	800cc6e <__swhatbuf_r+0x2e>
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cc58:	f04f 0100 	mov.w	r1, #0
 800cc5c:	bf0c      	ite	eq
 800cc5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cc62:	2340      	movne	r3, #64	; 0x40
 800cc64:	2000      	movs	r0, #0
 800cc66:	6031      	str	r1, [r6, #0]
 800cc68:	602b      	str	r3, [r5, #0]
 800cc6a:	b016      	add	sp, #88	; 0x58
 800cc6c:	bd70      	pop	{r4, r5, r6, pc}
 800cc6e:	466a      	mov	r2, sp
 800cc70:	f000 f848 	bl	800cd04 <_fstat_r>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	dbec      	blt.n	800cc52 <__swhatbuf_r+0x12>
 800cc78:	9901      	ldr	r1, [sp, #4]
 800cc7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cc82:	4259      	negs	r1, r3
 800cc84:	4159      	adcs	r1, r3
 800cc86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc8a:	e7eb      	b.n	800cc64 <__swhatbuf_r+0x24>

0800cc8c <__smakebuf_r>:
 800cc8c:	898b      	ldrh	r3, [r1, #12]
 800cc8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc90:	079d      	lsls	r5, r3, #30
 800cc92:	4606      	mov	r6, r0
 800cc94:	460c      	mov	r4, r1
 800cc96:	d507      	bpl.n	800cca8 <__smakebuf_r+0x1c>
 800cc98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	2301      	movs	r3, #1
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	b002      	add	sp, #8
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	ab01      	add	r3, sp, #4
 800ccaa:	466a      	mov	r2, sp
 800ccac:	f7ff ffc8 	bl	800cc40 <__swhatbuf_r>
 800ccb0:	9900      	ldr	r1, [sp, #0]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7ff f9c9 	bl	800c04c <_malloc_r>
 800ccba:	b948      	cbnz	r0, 800ccd0 <__smakebuf_r+0x44>
 800ccbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc0:	059a      	lsls	r2, r3, #22
 800ccc2:	d4ef      	bmi.n	800cca4 <__smakebuf_r+0x18>
 800ccc4:	f023 0303 	bic.w	r3, r3, #3
 800ccc8:	f043 0302 	orr.w	r3, r3, #2
 800cccc:	81a3      	strh	r3, [r4, #12]
 800ccce:	e7e3      	b.n	800cc98 <__smakebuf_r+0xc>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	6020      	str	r0, [r4, #0]
 800ccd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	9b00      	ldr	r3, [sp, #0]
 800ccdc:	6163      	str	r3, [r4, #20]
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	6120      	str	r0, [r4, #16]
 800cce2:	b15b      	cbz	r3, 800ccfc <__smakebuf_r+0x70>
 800cce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce8:	4630      	mov	r0, r6
 800ccea:	f000 f81d 	bl	800cd28 <_isatty_r>
 800ccee:	b128      	cbz	r0, 800ccfc <__smakebuf_r+0x70>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	f023 0303 	bic.w	r3, r3, #3
 800ccf6:	f043 0301 	orr.w	r3, r3, #1
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	431d      	orrs	r5, r3
 800cd00:	81a5      	strh	r5, [r4, #12]
 800cd02:	e7cf      	b.n	800cca4 <__smakebuf_r+0x18>

0800cd04 <_fstat_r>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4d07      	ldr	r5, [pc, #28]	; (800cd24 <_fstat_r+0x20>)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	4611      	mov	r1, r2
 800cd10:	602b      	str	r3, [r5, #0]
 800cd12:	f7f5 fbe4 	bl	80024de <_fstat>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	d102      	bne.n	800cd20 <_fstat_r+0x1c>
 800cd1a:	682b      	ldr	r3, [r5, #0]
 800cd1c:	b103      	cbz	r3, 800cd20 <_fstat_r+0x1c>
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	bd38      	pop	{r3, r4, r5, pc}
 800cd22:	bf00      	nop
 800cd24:	2000a8d8 	.word	0x2000a8d8

0800cd28 <_isatty_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d06      	ldr	r5, [pc, #24]	; (800cd44 <_isatty_r+0x1c>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	f7f5 fbe3 	bl	80024fe <_isatty>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_isatty_r+0x1a>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_isatty_r+0x1a>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	2000a8d8 	.word	0x2000a8d8

0800cd48 <_sbrk_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d06      	ldr	r5, [pc, #24]	; (800cd64 <_sbrk_r+0x1c>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f5 fbec 	bl	8002530 <_sbrk>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_sbrk_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_sbrk_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	2000a8d8 	.word	0x2000a8d8

0800cd68 <__assert_func>:
 800cd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd6a:	4614      	mov	r4, r2
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <__assert_func+0x2c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4605      	mov	r5, r0
 800cd74:	68d8      	ldr	r0, [r3, #12]
 800cd76:	b14c      	cbz	r4, 800cd8c <__assert_func+0x24>
 800cd78:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <__assert_func+0x30>)
 800cd7a:	9100      	str	r1, [sp, #0]
 800cd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd80:	4906      	ldr	r1, [pc, #24]	; (800cd9c <__assert_func+0x34>)
 800cd82:	462b      	mov	r3, r5
 800cd84:	f000 f844 	bl	800ce10 <fiprintf>
 800cd88:	f000 f854 	bl	800ce34 <abort>
 800cd8c:	4b04      	ldr	r3, [pc, #16]	; (800cda0 <__assert_func+0x38>)
 800cd8e:	461c      	mov	r4, r3
 800cd90:	e7f3      	b.n	800cd7a <__assert_func+0x12>
 800cd92:	bf00      	nop
 800cd94:	2000008c 	.word	0x2000008c
 800cd98:	0800d247 	.word	0x0800d247
 800cd9c:	0800d254 	.word	0x0800d254
 800cda0:	0800d282 	.word	0x0800d282

0800cda4 <_calloc_r>:
 800cda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda6:	fba1 2402 	umull	r2, r4, r1, r2
 800cdaa:	b94c      	cbnz	r4, 800cdc0 <_calloc_r+0x1c>
 800cdac:	4611      	mov	r1, r2
 800cdae:	9201      	str	r2, [sp, #4]
 800cdb0:	f7ff f94c 	bl	800c04c <_malloc_r>
 800cdb4:	9a01      	ldr	r2, [sp, #4]
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	b930      	cbnz	r0, 800cdc8 <_calloc_r+0x24>
 800cdba:	4628      	mov	r0, r5
 800cdbc:	b003      	add	sp, #12
 800cdbe:	bd30      	pop	{r4, r5, pc}
 800cdc0:	220c      	movs	r2, #12
 800cdc2:	6002      	str	r2, [r0, #0]
 800cdc4:	2500      	movs	r5, #0
 800cdc6:	e7f8      	b.n	800cdba <_calloc_r+0x16>
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f7fe f9c1 	bl	800b150 <memset>
 800cdce:	e7f4      	b.n	800cdba <_calloc_r+0x16>

0800cdd0 <__ascii_mbtowc>:
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	b901      	cbnz	r1, 800cdd6 <__ascii_mbtowc+0x6>
 800cdd4:	a901      	add	r1, sp, #4
 800cdd6:	b142      	cbz	r2, 800cdea <__ascii_mbtowc+0x1a>
 800cdd8:	b14b      	cbz	r3, 800cdee <__ascii_mbtowc+0x1e>
 800cdda:	7813      	ldrb	r3, [r2, #0]
 800cddc:	600b      	str	r3, [r1, #0]
 800cdde:	7812      	ldrb	r2, [r2, #0]
 800cde0:	1e10      	subs	r0, r2, #0
 800cde2:	bf18      	it	ne
 800cde4:	2001      	movne	r0, #1
 800cde6:	b002      	add	sp, #8
 800cde8:	4770      	bx	lr
 800cdea:	4610      	mov	r0, r2
 800cdec:	e7fb      	b.n	800cde6 <__ascii_mbtowc+0x16>
 800cdee:	f06f 0001 	mvn.w	r0, #1
 800cdf2:	e7f8      	b.n	800cde6 <__ascii_mbtowc+0x16>

0800cdf4 <__ascii_wctomb>:
 800cdf4:	b149      	cbz	r1, 800ce0a <__ascii_wctomb+0x16>
 800cdf6:	2aff      	cmp	r2, #255	; 0xff
 800cdf8:	bf85      	ittet	hi
 800cdfa:	238a      	movhi	r3, #138	; 0x8a
 800cdfc:	6003      	strhi	r3, [r0, #0]
 800cdfe:	700a      	strbls	r2, [r1, #0]
 800ce00:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce04:	bf98      	it	ls
 800ce06:	2001      	movls	r0, #1
 800ce08:	4770      	bx	lr
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4770      	bx	lr
	...

0800ce10 <fiprintf>:
 800ce10:	b40e      	push	{r1, r2, r3}
 800ce12:	b503      	push	{r0, r1, lr}
 800ce14:	4601      	mov	r1, r0
 800ce16:	ab03      	add	r3, sp, #12
 800ce18:	4805      	ldr	r0, [pc, #20]	; (800ce30 <fiprintf+0x20>)
 800ce1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce1e:	6800      	ldr	r0, [r0, #0]
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f7ff fd45 	bl	800c8b0 <_vfiprintf_r>
 800ce26:	b002      	add	sp, #8
 800ce28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce2c:	b003      	add	sp, #12
 800ce2e:	4770      	bx	lr
 800ce30:	2000008c 	.word	0x2000008c

0800ce34 <abort>:
 800ce34:	b508      	push	{r3, lr}
 800ce36:	2006      	movs	r0, #6
 800ce38:	f000 f82c 	bl	800ce94 <raise>
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	f7f5 faff 	bl	8002440 <_exit>

0800ce42 <_raise_r>:
 800ce42:	291f      	cmp	r1, #31
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4604      	mov	r4, r0
 800ce48:	460d      	mov	r5, r1
 800ce4a:	d904      	bls.n	800ce56 <_raise_r+0x14>
 800ce4c:	2316      	movs	r3, #22
 800ce4e:	6003      	str	r3, [r0, #0]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
 800ce56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce58:	b112      	cbz	r2, 800ce60 <_raise_r+0x1e>
 800ce5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce5e:	b94b      	cbnz	r3, 800ce74 <_raise_r+0x32>
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 f831 	bl	800cec8 <_getpid_r>
 800ce66:	462a      	mov	r2, r5
 800ce68:	4601      	mov	r1, r0
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce70:	f000 b818 	b.w	800cea4 <_kill_r>
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d00a      	beq.n	800ce8e <_raise_r+0x4c>
 800ce78:	1c59      	adds	r1, r3, #1
 800ce7a:	d103      	bne.n	800ce84 <_raise_r+0x42>
 800ce7c:	2316      	movs	r3, #22
 800ce7e:	6003      	str	r3, [r0, #0]
 800ce80:	2001      	movs	r0, #1
 800ce82:	e7e7      	b.n	800ce54 <_raise_r+0x12>
 800ce84:	2400      	movs	r4, #0
 800ce86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	4798      	blx	r3
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e7e0      	b.n	800ce54 <_raise_r+0x12>
	...

0800ce94 <raise>:
 800ce94:	4b02      	ldr	r3, [pc, #8]	; (800cea0 <raise+0xc>)
 800ce96:	4601      	mov	r1, r0
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f7ff bfd2 	b.w	800ce42 <_raise_r>
 800ce9e:	bf00      	nop
 800cea0:	2000008c 	.word	0x2000008c

0800cea4 <_kill_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d07      	ldr	r5, [pc, #28]	; (800cec4 <_kill_r+0x20>)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4608      	mov	r0, r1
 800ceae:	4611      	mov	r1, r2
 800ceb0:	602b      	str	r3, [r5, #0]
 800ceb2:	f7f5 fab5 	bl	8002420 <_kill>
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	d102      	bne.n	800cec0 <_kill_r+0x1c>
 800ceba:	682b      	ldr	r3, [r5, #0]
 800cebc:	b103      	cbz	r3, 800cec0 <_kill_r+0x1c>
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	bd38      	pop	{r3, r4, r5, pc}
 800cec2:	bf00      	nop
 800cec4:	2000a8d8 	.word	0x2000a8d8

0800cec8 <_getpid_r>:
 800cec8:	f7f5 baa2 	b.w	8002410 <_getpid>

0800cecc <_init>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	bf00      	nop
 800ced0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced2:	bc08      	pop	{r3}
 800ced4:	469e      	mov	lr, r3
 800ced6:	4770      	bx	lr

0800ced8 <_fini>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr
