
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08010428  08010428  00020428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109fc  080109fc  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080109fc  080109fc  000209fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a04  08010a04  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a04  08010a04  00020a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a08  08010a08  00020a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08010a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6cc  20000238  08010c44  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000a904  08010c44  0003a904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002413b  00000000  00000000  000302ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b8  00000000  00000000  000543e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ff8  00000000  00000000  000599a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018a7  00000000  00000000  0005b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e7e9  00000000  00000000  0005d23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d2eb  00000000  00000000  0008ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107ce7  00000000  00000000  000b8d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000096a8  00000000  00000000  001c09fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001ca0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801040c 	.word	0x0801040c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801040c 	.word	0x0801040c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200d      	movs	r0, #13
 8000f68:	f002 fcf7 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f6c:	200d      	movs	r0, #13
 8000f6e:	f002 fd10 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <eeprom_wait>:
static I2C_HandleTypeDef eeprom_I2C;
static uint32_t last_write;
static bool is_set = false;


static void eeprom_wait() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	while (HAL_GetTick() - last_write <= WRITE_TIMEOUT) {
 8000f84:	bf00      	nop
 8000f86:	f002 fbdd 	bl	8003744 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <eeprom_wait+0x1c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d9f7      	bls.n	8000f86 <eeprom_wait+0x6>

	}
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002a8 	.word	0x200002a8

08000fa0 <eeprom_init>:


void eeprom_init(I2C_HandleTypeDef* eeprom_i2c) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	eeprom_I2C = *eeprom_i2c;
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <eeprom_init+0x28>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2354      	movs	r3, #84	; 0x54
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f00d fa43 	bl	800e43e <memcpy>
	is_set = true;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <eeprom_init+0x2c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000254 	.word	0x20000254
 8000fcc:	200002ac 	.word	0x200002ac

08000fd0 <eeprom_read>:

	return res;
}


HAL_StatusTypeDef eeprom_read(uint32_t address, uint8_t* data, uint32_t size) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	if (!is_set) return HAL_ERROR;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <eeprom_read+0x4c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <eeprom_read+0x1e>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e011      	b.n	8001012 <eeprom_read+0x42>

	eeprom_wait();
 8000fee:	f7ff ffc7 	bl	8000f80 <eeprom_wait>

	// fix to use DMA
//	return HAL_I2C_Mem_Read_DMA(&eeprom_I2C, EEPROM_ADDRESS, address, 1, data, size);

	return HAL_I2C_Mem_Read(&eeprom_I2C, EEPROM_ADDRESS, address, 1, data, size, 10000);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ffe:	9102      	str	r1, [sp, #8]
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	21a0      	movs	r1, #160	; 0xa0
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <eeprom_read+0x50>)
 800100c:	f003 f94a 	bl	80042a4 <HAL_I2C_Mem_Read>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002ac 	.word	0x200002ac
 8001020:	20000254 	.word	0x20000254

08001024 <deserialize_FCC>:
static void serialize_FCC(FCC* data, uint8_t* buffer) {
	memcpy(buffer, data, sizeof(FCC));
}


static void deserialize_FCC(FCC* data, uint8_t* buffer) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	memcpy(data, buffer, sizeof(FCC));
 800102e:	2210      	movs	r2, #16
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f00d fa03 	bl	800e43e <memcpy>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <read_fc_configuration>:


// read the furnace controller configuration
HAL_StatusTypeDef read_fc_configuration(FCC* fcc) {
 8001040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	466b      	mov	r3, sp
 800104c:	461e      	mov	r6, r3
	uint8_t n = sizeof(FCC) / sizeof(uint8_t);
 800104e:	2310      	movs	r3, #16
 8001050:	75bb      	strb	r3, [r7, #22]
	uint8_t fcc_buffer[n];
 8001052:	7db9      	ldrb	r1, [r7, #22]
 8001054:	460b      	mov	r3, r1
 8001056:	3b01      	subs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	b2cb      	uxtb	r3, r1
 800105c:	2200      	movs	r2, #0
 800105e:	4698      	mov	r8, r3
 8001060:	4691      	mov	r9, r2
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001076:	b2cb      	uxtb	r3, r1
 8001078:	2200      	movs	r2, #0
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	00eb      	lsls	r3, r5, #3
 8001088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800108c:	00e2      	lsls	r2, r4, #3
 800108e:	460b      	mov	r3, r1
 8001090:	3307      	adds	r3, #7
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	ebad 0d03 	sub.w	sp, sp, r3
 800109a:	466b      	mov	r3, sp
 800109c:	3300      	adds	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

	for (uint8_t i = 0; i < n; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	e00f      	b.n	80010c6 <read_fc_configuration+0x86>
		if (eeprom_read(i, &fcc_buffer[i], sizeof(fcc_buffer[i])) != HAL_OK)
 80010a6:	7df8      	ldrb	r0, [r7, #23]
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff ff8d 	bl	8000fd0 <eeprom_read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <read_fc_configuration+0x80>
			return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e00b      	b.n	80010d8 <read_fc_configuration+0x98>
	for (uint8_t i = 0; i < n; i++) {
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3301      	adds	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	7dfa      	ldrb	r2, [r7, #23]
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3eb      	bcc.n	80010a6 <read_fc_configuration+0x66>
	}

	deserialize_FCC(fcc, fcc_buffer);
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffa7 	bl	8001024 <deserialize_FCC>

	return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	46b5      	mov	sp, r6
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <MX_GPIO_Init+0x118>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <MX_GPIO_Init+0x118>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <MX_GPIO_Init+0x118>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <MX_GPIO_Init+0x118>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a39      	ldr	r2, [pc, #228]	; (80011fc <MX_GPIO_Init+0x118>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <MX_GPIO_Init+0x118>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b34      	ldr	r3, [pc, #208]	; (80011fc <MX_GPIO_Init+0x118>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a33      	ldr	r2, [pc, #204]	; (80011fc <MX_GPIO_Init+0x118>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <MX_GPIO_Init+0x118>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_GPIO_Init+0x118>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MX_GPIO_Init+0x118>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_GPIO_Init+0x118>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLOWER_Pin|UNDERFLOOR_PUMP_Pin|MIXING_PUMP_Pin|FURNACE_PUMP_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	f24f 0120 	movw	r1, #61472	; 0xf020
 8001160:	4827      	ldr	r0, [pc, #156]	; (8001200 <MX_GPIO_Init+0x11c>)
 8001162:	f002 ffeb 	bl	800413c <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f002 ffe4 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	4821      	ldr	r0, [pc, #132]	; (8001200 <MX_GPIO_Init+0x11c>)
 800117a:	f002 ffdf 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Select_Pin;
 800117e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Select_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	481c      	ldr	r0, [pc, #112]	; (8001204 <MX_GPIO_Init+0x120>)
 8001194:	f002 fe10 	bl	8003db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BLOWER_Pin|UNDERFLOOR_PUMP_Pin|MIXING_PUMP_Pin|FURNACE_PUMP_Pin
 8001198:	f24f 0330 	movw	r3, #61488	; 0xf030
 800119c:	617b      	str	r3, [r7, #20]
                          |LCD_CS_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_GPIO_Init+0x11c>)
 80011b2:	f002 fe01 	bl	8003db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f002 fdf3 	bl	8003db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f002 fde3 	bl	8003db8 <HAL_GPIO_Init>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800

08001208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C1_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <MX_I2C1_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_I2C1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <MX_I2C1_Init+0x74>)
 8001244:	f002 ff92 	bl	800416c <HAL_I2C_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 ffe1 	bl	8002214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C1_Init+0x74>)
 8001256:	f003 fba3 	bl	80049a0 <HAL_I2CEx_ConfigAnalogFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 ffd8 	bl	8002214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_I2C1_Init+0x74>)
 8001268:	f003 fbe5 	bl	8004a36 <HAL_I2CEx_ConfigDigitalFilter>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 ffcf 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b0 	.word	0x200002b0
 8001280:	40005400 	.word	0x40005400
 8001284:	10909cec 	.word	0x10909cec

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ac      	sub	sp, #176	; 0xb0
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2288      	movs	r2, #136	; 0x88
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00d f841 	bl	800e330 <memset>
  if(i2cHandle->Instance==I2C1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_I2C_MspInit+0xb0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d13a      	bne.n	800132e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fa67 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f000 ffa0 	bl	8002214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ec:	23c0      	movs	r3, #192	; 0xc0
 80012ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f2:	2312      	movs	r3, #18
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001304:	2304      	movs	r3, #4
 8001306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_I2C_MspInit+0xb8>)
 8001312:	f002 fd51 	bl	8003db8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_I2C_MspInit+0xb4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_I2C_MspInit+0xb4>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_I2C_MspInit+0xb4>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	37b0      	adds	r7, #176	; 0xb0
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <lcd_cmd>:
	CMD(ST7735S_COLMOD), 0x05,
	CMD(ST7735S_MADCTL), 0xa0,
};


static HAL_StatusTypeDef lcd_cmd(uint8_t cmd) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_RESET);
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <lcd_cmd+0x5c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <lcd_cmd+0x5c>)
 8001354:	8891      	ldrh	r1, [r2, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f002 feef 	bl	800413c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <lcd_cmd+0x60>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <lcd_cmd+0x60>)
 8001364:	8891      	ldrh	r1, [r2, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fee7 	bl	800413c <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(LCD_SPI, &cmd, 1, LCD_MAX_TIMEOUT) != HAL_OK)
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <lcd_cmd+0x64>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	1df9      	adds	r1, r7, #7
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	2201      	movs	r2, #1
 8001378:	f007 f89f 	bl	80084ba <HAL_SPI_Transmit>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <lcd_cmd+0x42>
		return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e008      	b.n	8001398 <lcd_cmd+0x54>

	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <lcd_cmd+0x60>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <lcd_cmd+0x60>)
 800138c:	8891      	ldrh	r1, [r2, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fed3 	bl	800413c <HAL_GPIO_WritePin>
	return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000310 	.word	0x20000310
 80013a4:	20000308 	.word	0x20000308
 80013a8:	20000304 	.word	0x20000304

080013ac <lcd_data>:

static HAL_StatusTypeDef lcd_data(uint8_t data) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_SET);
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <lcd_data+0x5c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <lcd_data+0x5c>)
 80013bc:	8891      	ldrh	r1, [r2, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 febb 	bl	800413c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <lcd_data+0x60>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <lcd_data+0x60>)
 80013cc:	8891      	ldrh	r1, [r2, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 feb3 	bl	800413c <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(LCD_SPI, &data, 1, LCD_MAX_TIMEOUT) != HAL_OK)
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <lcd_data+0x64>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	1df9      	adds	r1, r7, #7
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2201      	movs	r2, #1
 80013e0:	f007 f86b 	bl	80084ba <HAL_SPI_Transmit>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <lcd_data+0x42>
		return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e008      	b.n	8001400 <lcd_data+0x54>

	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <lcd_data+0x60>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <lcd_data+0x60>)
 80013f4:	8891      	ldrh	r1, [r2, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fe9f 	bl	800413c <HAL_GPIO_WritePin>
	return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000310 	.word	0x20000310
 800140c:	20000308 	.word	0x20000308
 8001410:	20000304 	.word	0x20000304

08001414 <lcd_data16>:

static void lcd_data16(uint16_t value) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b29b      	uxth	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffc0 	bl	80013ac <lcd_data>
	lcd_data(value);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffbb 	bl	80013ac <lcd_data>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <lcd_send>:

static HAL_StatusTypeDef lcd_send(uint16_t value) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <lcd_send+0x28>
		if (lcd_cmd(value) != HAL_OK)
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff74 	bl	8001344 <lcd_cmd>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <lcd_send+0x3c>
			return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00a      	b.n	800147c <lcd_send+0x3e>
	}
	else {
		if (lcd_data(value) != HAL_OK)
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff9e 	bl	80013ac <lcd_data>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <lcd_send+0x3c>
			return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <lcd_send+0x3e>
	}

	return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <lcd_init>:


HAL_StatusTypeDef lcd_init(SPI_HandleTypeDef* lcd_spi, LCD_GPIO* lcd_cs, LCD_GPIO* lcd_dc, LCD_GPIO* lcd_rst) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
	LCD_SPI = lcd_spi;
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <lcd_init+0xcc>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6013      	str	r3, [r2, #0]
	LCD_CS = *lcd_cs;
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <lcd_init+0xd0>)
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_DC = *lcd_dc;
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <lcd_init+0xd4>)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ac:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_RST = *lcd_rst;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <lcd_init+0xd8>)
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b8:	e883 0003 	stmia.w	r3, {r0, r1}
	// TODO brightness control GPIO
	is_set = true;
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <lcd_init+0xdc>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LCD_RST.Port, LCD_RST.Pin, GPIO_PIN_RESET);
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <lcd_init+0xd8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <lcd_init+0xd8>)
 80014c8:	8891      	ldrh	r1, [r2, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fe35 	bl	800413c <HAL_GPIO_WritePin>
	HAL_Delay(100); // TODO time could be lower
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f002 f942 	bl	800375c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST.Port, LCD_RST.Pin, GPIO_PIN_SET);
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <lcd_init+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <lcd_init+0xd8>)
 80014de:	8891      	ldrh	r1, [r2, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fe2a 	bl	800413c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f002 f937 	bl	800375c <HAL_Delay>

	for (uint8_t i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
 80014f2:	e00e      	b.n	8001512 <lcd_init+0x8e>
		if (lcd_send(init_table[i]) != HAL_OK)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <lcd_init+0xe0>)
 80014f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff9e 	bl	800143e <lcd_send>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <lcd_init+0x88>
			return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e01c      	b.n	8001546 <lcd_init+0xc2>
	for (uint8_t i = 0; i < sizeof(init_table) / sizeof(init_table[0]); i++) {
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	3301      	adds	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b4b      	cmp	r3, #75	; 0x4b
 8001516:	d9ed      	bls.n	80014f4 <lcd_init+0x70>
	}

	HAL_Delay(200);
 8001518:	20c8      	movs	r0, #200	; 0xc8
 800151a:	f002 f91f 	bl	800375c <HAL_Delay>
	if (lcd_cmd(ST7735S_SLPOUT) != HAL_OK)
 800151e:	2011      	movs	r0, #17
 8001520:	f7ff ff10 	bl	8001344 <lcd_cmd>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <lcd_init+0xaa>
		return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00b      	b.n	8001546 <lcd_init+0xc2>
	HAL_Delay(120);
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f002 f914 	bl	800375c <HAL_Delay>

	if (lcd_cmd(ST7735S_DISPON) != HAL_OK)
 8001534:	2029      	movs	r0, #41	; 0x29
 8001536:	f7ff ff05 	bl	8001344 <lcd_cmd>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <lcd_init+0xc0>
		return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <lcd_init+0xc2>

	return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000304 	.word	0x20000304
 8001554:	20000308 	.word	0x20000308
 8001558:	20000310 	.word	0x20000310
 800155c:	20000318 	.word	0x20000318
 8001560:	20000320 	.word	0x20000320
 8001564:	08010514 	.word	0x08010514

08001568 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 8001576:	202a      	movs	r0, #42	; 0x2a
 8001578:	f7ff fee4 	bl	8001344 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b29b      	uxth	r3, r3
 8001580:	3301      	adds	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff45 	bl	8001414 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff3c 	bl	8001414 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 800159c:	202b      	movs	r0, #43	; 0x2b
 800159e:	f7ff fed1 	bl	8001344 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3302      	adds	r3, #2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff32 	bl	8001414 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff27 	bl	8001414 <lcd_data16>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <lcd_put_pixel>:

void lcd_put_pixel(int16_t x, int16_t y, uint16_t color)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	460b      	mov	r3, r1
 80015dc:	80bb      	strh	r3, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	807b      	strh	r3, [r7, #2]
	buffer[x + y * LCD_WIDTH] = __REV16(color);
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	ba5b      	rev16	r3, r3
 80015ea:	60bb      	str	r3, [r7, #8]
  return result;
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80015f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	440b      	add	r3, r1
 8001600:	b281      	uxth	r1, r0
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <lcd_put_pixel+0x44>)
 8001604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000324 	.word	0x20000324

08001618 <lcd_show>:

HAL_StatusTypeDef lcd_show(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	22a0      	movs	r2, #160	; 0xa0
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ffa0 	bl	8001568 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001628:	202c      	movs	r0, #44	; 0x2c
 800162a:	f7ff fe8b 	bl	8001344 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC.Port, LCD_DC.Pin, GPIO_PIN_SET);
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <lcd_show+0x4c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <lcd_show+0x4c>)
 8001634:	8891      	ldrh	r1, [r2, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fd7f 	bl	800413c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_RESET);
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <lcd_show+0x50>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <lcd_show+0x50>)
 8001644:	8891      	ldrh	r1, [r2, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fd77 	bl	800413c <HAL_GPIO_WritePin>
	return HAL_SPI_Transmit_DMA(LCD_SPI, (uint8_t*)buffer, sizeof(buffer));
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <lcd_show+0x54>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001656:	4906      	ldr	r1, [pc, #24]	; (8001670 <lcd_show+0x58>)
 8001658:	4618      	mov	r0, r3
 800165a:	f007 f8a3 	bl	80087a4 <HAL_SPI_Transmit_DMA>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000310 	.word	0x20000310
 8001668:	20000308 	.word	0x20000308
 800166c:	20000304 	.word	0x20000304
 8001670:	20000324 	.word	0x20000324

08001674 <lcd_transfer_done>:

void lcd_transfer_done(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS.Port, LCD_CS.Pin, GPIO_PIN_SET);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <lcd_transfer_done+0x18>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <lcd_transfer_done+0x18>)
 800167e:	8891      	ldrh	r1, [r2, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fd5a 	bl	800413c <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000308 	.word	0x20000308

08001690 <lcd_is_busy>:

bool lcd_is_busy(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(LCD_SPI) == HAL_SPI_STATE_BUSY)
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <lcd_is_busy+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f007 f987 	bl	80089ac <HAL_SPI_GetState>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d101      	bne.n	80016a8 <lcd_is_busy+0x18>
		return true;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <lcd_is_busy+0x1a>
	else
		return false;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000304 	.word	0x20000304

080016b4 <lcd_full_box>:

void lcd_full_box(int x, int y, int width, int height, uint16_t color) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
	for (uint8_t i = x; i < width + x; i++) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	75fb      	strb	r3, [r7, #23]
 80016c6:	e016      	b.n	80016f6 <lcd_full_box+0x42>
		for (uint8_t j = y; j < height + y; j++) {
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	75bb      	strb	r3, [r7, #22]
 80016cc:	e00a      	b.n	80016e4 <lcd_full_box+0x30>
			lcd_put_pixel(i, j, color);
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	7dba      	ldrb	r2, [r7, #22]
 80016d4:	b211      	sxth	r1, r2
 80016d6:	8c3a      	ldrh	r2, [r7, #32]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff79 	bl	80015d0 <lcd_put_pixel>
		for (uint8_t j = y; j < height + y; j++) {
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	3301      	adds	r3, #1
 80016e2:	75bb      	strb	r3, [r7, #22]
 80016e4:	7dba      	ldrb	r2, [r7, #22]
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	440b      	add	r3, r1
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbee      	blt.n	80016ce <lcd_full_box+0x1a>
	for (uint8_t i = x; i < width + x; i++) {
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	3301      	adds	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	7dfa      	ldrb	r2, [r7, #23]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	440b      	add	r3, r1
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbe2      	blt.n	80016c8 <lcd_full_box+0x14>
		}
	}
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <lcd_empty_box>:

void lcd_empty_box(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint16_t color) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	4613      	mov	r3, r2
 8001728:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = x; i < width + x; i++) {
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e017      	b.n	8001760 <lcd_empty_box+0x54>
		lcd_put_pixel(i, y, color);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b21b      	sxth	r3, r3
 8001734:	79ba      	ldrb	r2, [r7, #6]
 8001736:	b211      	sxth	r1, r2
 8001738:	8c3a      	ldrh	r2, [r7, #32]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff48 	bl	80015d0 <lcd_put_pixel>
		lcd_put_pixel(i, y + height, color);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	b218      	sxth	r0, r3
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	b29a      	uxth	r2, r3
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21b      	sxth	r3, r3
 8001752:	8c3a      	ldrh	r2, [r7, #32]
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff ff3b 	bl	80015d0 <lcd_put_pixel>
	for (uint8_t i = x; i < width + x; i++) {
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	3301      	adds	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	7979      	ldrb	r1, [r7, #5]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	440b      	add	r3, r1
 8001768:	429a      	cmp	r2, r3
 800176a:	dbe1      	blt.n	8001730 <lcd_empty_box+0x24>
	}

	for (uint8_t i = y; i < height + y; i++) {
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	73bb      	strb	r3, [r7, #14]
 8001770:	e017      	b.n	80017a2 <lcd_empty_box+0x96>
		lcd_put_pixel(x, i, color);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	b21b      	sxth	r3, r3
 8001776:	7bba      	ldrb	r2, [r7, #14]
 8001778:	b211      	sxth	r1, r2
 800177a:	8c3a      	ldrh	r2, [r7, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff27 	bl	80015d0 <lcd_put_pixel>
		lcd_put_pixel(x + width, i, color);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	b29a      	uxth	r2, r3
 8001786:	797b      	ldrb	r3, [r7, #5]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	b21b      	sxth	r3, r3
 8001790:	7bba      	ldrb	r2, [r7, #14]
 8001792:	b211      	sxth	r1, r2
 8001794:	8c3a      	ldrh	r2, [r7, #32]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff1a 	bl	80015d0 <lcd_put_pixel>
	for (uint8_t i = y; i < height + y; i++) {
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	3301      	adds	r3, #1
 80017a0:	73bb      	strb	r3, [r7, #14]
 80017a2:	7bba      	ldrb	r2, [r7, #14]
 80017a4:	7939      	ldrb	r1, [r7, #4]
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	440b      	add	r3, r1
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbe1      	blt.n	8001772 <lcd_empty_box+0x66>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}

080017b8 <lcd_draw_background>:
//	for (uint8_t i = min_x; i < max_x; i++) {
//
//	}
}

HAL_StatusTypeDef lcd_draw_background() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af02      	add	r7, sp, #8
	while (lcd_is_busy()) {
 80017be:	bf00      	nop
 80017c0:	f7ff ff66 	bl	8001690 <lcd_is_busy>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1fa      	bne.n	80017c0 <lcd_draw_background+0x8>
	}
	lcd_full_box(0, 0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 80017ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	22a0      	movs	r2, #160	; 0xa0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff ff6c 	bl	80016b4 <lcd_full_box>

	// drawing fire place
	lcd_empty_box(20, 70, 30, 40, BLACK);
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2328      	movs	r3, #40	; 0x28
 80017e2:	221e      	movs	r2, #30
 80017e4:	2146      	movs	r1, #70	; 0x46
 80017e6:	2014      	movs	r0, #20
 80017e8:	f7ff ff90 	bl	800170c <lcd_empty_box>
	lcd_empty_box(50, 97, 80, 0, BLACK);
 80017ec:	2300      	movs	r3, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2250      	movs	r2, #80	; 0x50
 80017f4:	2161      	movs	r1, #97	; 0x61
 80017f6:	2032      	movs	r0, #50	; 0x32
 80017f8:	f7ff ff88 	bl	800170c <lcd_empty_box>
	lcd_empty_box(50, 105, 80, 0, BLACK);
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	2250      	movs	r2, #80	; 0x50
 8001804:	2169      	movs	r1, #105	; 0x69
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f7ff ff80 	bl	800170c <lcd_empty_box>
	lcd_empty_box(130, 97, 0, 9, BLACK);
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2309      	movs	r3, #9
 8001812:	2200      	movs	r2, #0
 8001814:	2161      	movs	r1, #97	; 0x61
 8001816:	2082      	movs	r0, #130	; 0x82
 8001818:	f7ff ff78 	bl	800170c <lcd_empty_box>

	// drawing water tank
	lcd_empty_box(110, 70, 30, 40, BLACK);
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2328      	movs	r3, #40	; 0x28
 8001822:	221e      	movs	r2, #30
 8001824:	2146      	movs	r1, #70	; 0x46
 8001826:	206e      	movs	r0, #110	; 0x6e
 8001828:	f7ff ff70 	bl	800170c <lcd_empty_box>


	// flush the result
	return lcd_show();
 800182c:	f7ff fef4 	bl	8001618 <lcd_show>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <lcd_draw_setting_1>:

HAL_StatusTypeDef lcd_draw_setting_1() {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af02      	add	r7, sp, #8
	while (lcd_is_busy()) {
 800183e:	bf00      	nop
 8001840:	f7ff ff26 	bl	8001690 <lcd_is_busy>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1fa      	bne.n	8001840 <lcd_draw_setting_1+0x8>
	}
	lcd_full_box(0, 0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 800184a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	22a0      	movs	r2, #160	; 0xa0
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ff2c 	bl	80016b4 <lcd_full_box>

	lcd_full_box(50, 50, 10, 30, RED);
 800185c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	231e      	movs	r3, #30
 8001864:	220a      	movs	r2, #10
 8001866:	2132      	movs	r1, #50	; 0x32
 8001868:	2032      	movs	r0, #50	; 0x32
 800186a:	f7ff ff23 	bl	80016b4 <lcd_full_box>

	return lcd_show();
 800186e:	f7ff fed3 	bl	8001618 <lcd_show>
 8001872:	4603      	mov	r3, r0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <lcd_draw_setting_2>:


HAL_StatusTypeDef lcd_draw_setting_2() {
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af02      	add	r7, sp, #8
	while (lcd_is_busy()) {
 8001880:	bf00      	nop
 8001882:	f7ff ff05 	bl	8001690 <lcd_is_busy>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1fa      	bne.n	8001882 <lcd_draw_setting_2+0x8>
	}
	lcd_full_box(0, 0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	22a0      	movs	r2, #160	; 0xa0
 8001896:	2100      	movs	r1, #0
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff ff0b 	bl	80016b4 <lcd_full_box>

	lcd_full_box(20, 20, 100, 60, GREEN);
 800189e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	233c      	movs	r3, #60	; 0x3c
 80018a6:	2264      	movs	r2, #100	; 0x64
 80018a8:	2114      	movs	r1, #20
 80018aa:	2014      	movs	r0, #20
 80018ac:	f7ff ff02 	bl	80016b4 <lcd_full_box>

	return lcd_show();
 80018b0:	f7ff feb2 	bl	8001618 <lcd_show>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <do_counts>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void do_counts() {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	sd_counter++;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <do_counts+0x98>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <do_counts+0x98>)
 80018ca:	801a      	strh	r2, [r3, #0]
	if (do_blowout) {
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <do_counts+0x9c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <do_counts+0x24>
		blowout_activ_time++;
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <do_counts+0xa0>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <do_counts+0xa0>)
 80018de:	801a      	strh	r2, [r3, #0]
	}
	if (stop_blowout) {
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <do_counts+0xa4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <do_counts+0x38>
		blowout_break_time++;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <do_counts+0xa8>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <do_counts+0xa8>)
 80018f2:	801a      	strh	r2, [r3, #0]
	}


	if (sd_counter == 3600) {
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <do_counts+0x98>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80018fc:	d105      	bne.n	800190a <do_counts+0x4e>
		sd_counter = 0;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <do_counts+0x98>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
		do_log = true;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <do_counts+0xac>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
	}

	if (blowout_break_time >= (fcc.blowout_break * 60)) {
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <do_counts+0xa8>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <do_counts+0xb0>)
 8001912:	795b      	ldrb	r3, [r3, #5]
 8001914:	461a      	mov	r2, r3
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4299      	cmp	r1, r3
 8001920:	db05      	blt.n	800192e <do_counts+0x72>
		do_blowout = true;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <do_counts+0x9c>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		stop_blowout = false;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <do_counts+0xa4>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
	}

	if (blowout_activ_time >= fcc.blowout_time) {
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <do_counts+0xb0>)
 8001930:	791b      	ldrb	r3, [r3, #4]
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <do_counts+0xa0>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d805      	bhi.n	8001948 <do_counts+0x8c>
		do_blowout = false;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <do_counts+0x9c>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
		stop_blowout = true;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <do_counts+0xa4>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	}

}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2000a336 	.word	0x2000a336
 8001958:	2000a335 	.word	0x2000a335
 800195c:	2000a338 	.word	0x2000a338
 8001960:	20000051 	.word	0x20000051
 8001964:	2000a33a 	.word	0x2000a33a
 8001968:	20000050 	.word	0x20000050
 800196c:	20000040 	.word	0x20000040

08001970 <__io_putchar>:


int __io_putchar(int ch)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d102      	bne.n	8001984 <__io_putchar+0x14>
    __io_putchar('\r');
 800197e:	200d      	movs	r0, #13
 8001980:	f7ff fff6 	bl	8001970 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001984:	1d39      	adds	r1, r7, #4
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	2201      	movs	r2, #1
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <__io_putchar+0x2c>)
 800198e:	f007 ff99 	bl	80098c4 <HAL_UART_Transmit>

  return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000a668 	.word	0x2000a668

080019a0 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_SPI_TxCpltCallback+0x1c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 80019b0:	f7ff fe60 	bl	8001674 <lcd_transfer_done>
	}
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000a4d4 	.word	0x2000a4d4

080019c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if (htim == &htim7) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d107      	bne.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x20>
	  get_all_temperature(temperature_array, fcc.temperature_offset);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019d8:	f000 ff2e 	bl	8002838 <get_all_temperature>
	  do_counts();
 80019dc:	f7ff ff6e 	bl	80018bc <do_counts>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000a61c 	.word	0x2000a61c
 80019ec:	20000040 	.word	0x20000040
 80019f0:	2000a324 	.word	0x2000a324

080019f4 <read_encoder_data>:


static void read_encoder_data() {
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	encoder_value =__HAL_TIM_GET_COUNTER(&htim2) >> 1;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <read_encoder_data+0x54>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <read_encoder_data+0x58>)
 8001a04:	701a      	strb	r2, [r3, #0]

	if (encoder_value > 16 && encoder_value <= 18){
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <read_encoder_data+0x58>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d90b      	bls.n	8001a26 <read_encoder_data+0x32>
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <read_encoder_data+0x58>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d807      	bhi.n	8001a26 <read_encoder_data+0x32>
		  __HAL_TIM_SET_COUNTER(&htim2, 32);
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <read_encoder_data+0x54>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
		  encoder_value = 16;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <read_encoder_data+0x58>)
 8001a20:	2210      	movs	r2, #16
 8001a22:	701a      	strb	r2, [r3, #0]
	}
	else if (encoder_value > 18) {
		__HAL_TIM_SET_COUNTER(&htim2, 0);
		encoder_value = 0;
	}
}
 8001a24:	e00a      	b.n	8001a3c <read_encoder_data+0x48>
	else if (encoder_value > 18) {
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <read_encoder_data+0x58>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d906      	bls.n	8001a3c <read_encoder_data+0x48>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <read_encoder_data+0x54>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
		encoder_value = 0;
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <read_encoder_data+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000a584 	.word	0x2000a584
 8001a4c:	2000a334 	.word	0x2000a334

08001a50 <activate_pump>:

static void activate_pump(PUMP_GPIO* pump) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pump->Port, pump->Pin, GPIO_PIN_SET);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	f002 fb6a 	bl	800413c <HAL_GPIO_WritePin>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <deactivate_pump>:

static void deactivate_pump(PUMP_GPIO* pump) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pump->Port, pump->Pin, GPIO_PIN_RESET);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	f002 fb5a 	bl	800413c <HAL_GPIO_WritePin>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <is_pump_activated>:

static bool is_pump_activated(PUMP_GPIO* pump) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(pump->Port, pump->Pin) == GPIO_PIN_SET) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	889b      	ldrh	r3, [r3, #4]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f002 fb32 	bl	800410c <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <is_pump_activated+0x22>
		return true;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <is_pump_activated+0x24>
	}
	return false;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <start_preheating>:

static bool start_preheating() {
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

	/*
	 * Rozpoczenie rozpalania
	 * */

	return false;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <wrong_sensor_read>:


static bool wrong_sensor_read() {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_SENSORS; i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	e011      	b.n	8001afc <wrong_sensor_read+0x30>
		if (temperature_array[i] == 500.0f)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <wrong_sensor_read+0x44>)
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001b14 <wrong_sensor_read+0x48>
 8001ae8:	eef4 7a47 	vcmp.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d101      	bne.n	8001af6 <wrong_sensor_read+0x2a>
			return true;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e006      	b.n	8001b04 <wrong_sensor_read+0x38>
	for(uint8_t i = 0; i < NO_SENSORS; i++) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3301      	adds	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d9ea      	bls.n	8001ad8 <wrong_sensor_read+0xc>
	}
	return false;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	2000a324 	.word	0x2000a324
 8001b14:	43fa0000 	.word	0x43fa0000

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1e:	f001 fda8 	bl	8003672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b22:	f000 fb23 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b26:	f7ff fadd 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b2a:	f7ff fa0b 	bl	8000f44 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b2e:	f7ff fb6b 	bl	8001208 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001b32:	f001 fb87 	bl	8003244 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001b36:	f001 fc6d 	bl	8003414 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b3a:	f001 fc9b 	bl	8003474 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001b3e:	f001 fbb7 	bl	80032b0 <MX_TIM7_Init>
  MX_SDMMC1_SD_Init();
 8001b42:	f001 f871 	bl	8002c28 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001b46:	f009 fa13 	bl	800af70 <MX_FATFS_Init>
  MX_RTC_Init();
 8001b4a:	f000 feb5 	bl	80028b8 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b4e:	f001 f91f 	bl	8002d90 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b52:	f001 fb23 	bl	800319c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8001b56:	488d      	ldr	r0, [pc, #564]	; (8001d8c <main+0x274>)
 8001b58:	f007 f974 	bl	8008e44 <HAL_TIM_Base_Start>
  OW_init(&huart3, &htim6); // init One Wire DS18B20 library
 8001b5c:	498b      	ldr	r1, [pc, #556]	; (8001d8c <main+0x274>)
 8001b5e:	488c      	ldr	r0, [pc, #560]	; (8001d90 <main+0x278>)
 8001b60:	f000 fdd0 	bl	8002704 <OW_init>
  eeprom_init(&hi2c1);		// init EEPROM library
 8001b64:	488b      	ldr	r0, [pc, #556]	; (8001d94 <main+0x27c>)
 8001b66:	f7ff fa1b 	bl	8000fa0 <eeprom_init>
  menu_init(&encoder_value, &enc_btn, &fcc, temperature_array); // init Menu library
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <main+0x280>)
 8001b6c:	4a8b      	ldr	r2, [pc, #556]	; (8001d9c <main+0x284>)
 8001b6e:	498c      	ldr	r1, [pc, #560]	; (8001da0 <main+0x288>)
 8001b70:	488c      	ldr	r0, [pc, #560]	; (8001da4 <main+0x28c>)
 8001b72:	f000 fbab 	bl	80022cc <menu_init>

  read_fc_configuration(&fcc); // read furance config from EEPORM
 8001b76:	4889      	ldr	r0, [pc, #548]	; (8001d9c <main+0x284>)
 8001b78:	f7ff fa62 	bl	8001040 <read_fc_configuration>
  if (set_rtc_datatime() != HAL_OK)
 8001b7c:	f000 ff90 	bl	8002aa0 <set_rtc_datatime>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <main+0x74>
	  printf("RTC Error\n");
 8001b86:	4888      	ldr	r0, [pc, #544]	; (8001da8 <main+0x290>)
 8001b88:	f00c fad2 	bl	800e130 <puts>

  // init LCD library
  if (lcd_init(&hspi1, &lcd_cs, &lcd_dc, &lcd_rst) != HAL_OK)
 8001b8c:	4b87      	ldr	r3, [pc, #540]	; (8001dac <main+0x294>)
 8001b8e:	4a88      	ldr	r2, [pc, #544]	; (8001db0 <main+0x298>)
 8001b90:	4988      	ldr	r1, [pc, #544]	; (8001db4 <main+0x29c>)
 8001b92:	4889      	ldr	r0, [pc, #548]	; (8001db8 <main+0x2a0>)
 8001b94:	f7ff fc76 	bl	8001484 <lcd_init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <main+0x8c>
	  printf("LCD ERROR\n");
 8001b9e:	4887      	ldr	r0, [pc, #540]	; (8001dbc <main+0x2a4>)
 8001ba0:	f00c fac6 	bl	800e130 <puts>

  get_all_temperature(temperature_array, fcc.temperature_offset);  // read temperatures
 8001ba4:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <main+0x284>)
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	487b      	ldr	r0, [pc, #492]	; (8001d98 <main+0x280>)
 8001bac:	f000 fe44 	bl	8002838 <get_all_temperature>

  HAL_TIM_Base_Start_IT(&htim7);
 8001bb0:	4883      	ldr	r0, [pc, #524]	; (8001dc0 <main+0x2a8>)
 8001bb2:	f007 f9af 	bl	8008f14 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bb6:	213c      	movs	r1, #60	; 0x3c
 8001bb8:	4882      	ldr	r0, [pc, #520]	; (8001dc4 <main+0x2ac>)
 8001bba:	f007 fac1 	bl	8009140 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t last_encoder_value = 255;
 8001bbe:	23ff      	movs	r3, #255	; 0xff
 8001bc0:	71fb      	strb	r3, [r7, #7]
  SD_Controll_Status sd_res;

  while (1) {
	  switch(current_state) {
 8001bc2:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <main+0x2b0>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	f200 8251 	bhi.w	800206e <main+0x556>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <main+0xbc>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001c7f 	.word	0x08001c7f
 8001bdc:	08001d09 	.word	0x08001d09
 8001be0:	08001f29 	.word	0x08001f29
 8001be4:	08001f8d 	.word	0x08001f8d
 8001be8:	08002003 	.word	0x08002003
	  case FSM_IDLE: {
		  deactivate_pump(&furnace_pump);
 8001bec:	4877      	ldr	r0, [pc, #476]	; (8001dcc <main+0x2b4>)
 8001bee:	f7ff ff3f 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&mixing_pump);
 8001bf2:	4877      	ldr	r0, [pc, #476]	; (8001dd0 <main+0x2b8>)
 8001bf4:	f7ff ff3c 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&underfloor_pump);
 8001bf8:	4876      	ldr	r0, [pc, #472]	; (8001dd4 <main+0x2bc>)
 8001bfa:	f7ff ff39 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&blower);
 8001bfe:	4876      	ldr	r0, [pc, #472]	; (8001dd8 <main+0x2c0>)
 8001c00:	f7ff ff36 	bl	8001a70 <deactivate_pump>

		  if (wrong_sensor_read()) {
 8001c04:	f7ff ff62 	bl	8001acc <wrong_sensor_read>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 824e 	bne.w	80020ac <main+0x594>
			  break;
		  }

		  if (temperature_array[0] >= fcc.furnace_turn_off_temperature || start_preheating()) {
 8001c10:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <main+0x280>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <main+0x284>)
 8001c18:	7b5b      	ldrb	r3, [r3, #13]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	da04      	bge.n	8001c36 <main+0x11e>
 8001c2c:	f7ff ff46 	bl	8001abc <start_preheating>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <main+0x12c>
			  last_state = current_state;
 8001c36:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <main+0x2b0>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <main+0x2c4>)
 8001c3c:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_PREHEATING;
 8001c3e:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <main+0x2b0>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		  }

		  if (temperature_array[0] >= FURNACE_OVERHEAT_TEMPERATURE || temperature_array[1] >= OUT_WATER_OVERHEAT_TEMPERATURE) {
 8001c44:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <main+0x280>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001de0 <main+0x2c8>
 8001c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	da0a      	bge.n	8001c6e <main+0x156>
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <main+0x280>)
 8001c5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c5e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001de4 <main+0x2cc>
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	da00      	bge.n	8001c6e <main+0x156>
			  last_state = current_state;
			  current_state = FSM_OVERHEATING;
		  }

		  break;
 8001c6c:	e21f      	b.n	80020ae <main+0x596>
			  last_state = current_state;
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <main+0x2b0>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <main+0x2c4>)
 8001c74:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_OVERHEATING;
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <main+0x2b0>)
 8001c78:	2204      	movs	r2, #4
 8001c7a:	701a      	strb	r2, [r3, #0]
		  break;
 8001c7c:	e217      	b.n	80020ae <main+0x596>
	  }
	  case FSM_PREHEATING: {
		  if (wrong_sensor_read()) {
 8001c7e:	f7ff ff25 	bl	8001acc <wrong_sensor_read>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <main+0x178>
			  current_state = FSM_IDLE;
 8001c88:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <main+0x2b0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			  break;
 8001c8e:	e20e      	b.n	80020ae <main+0x596>
		  }

		  if (fcc.blower_active) {
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <main+0x284>)
 8001c92:	7bdb      	ldrb	r3, [r3, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <main+0x186>
			  activate_pump(&blower);
 8001c98:	484f      	ldr	r0, [pc, #316]	; (8001dd8 <main+0x2c0>)
 8001c9a:	f7ff fed9 	bl	8001a50 <activate_pump>
		  }

		  if (temperature_array[0] >= fcc.furnace_pump_activation_temperature + (fcc.furnace_pump_hysteresis >> 1)) {
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <main+0x280>)
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <main+0x284>)
 8001ca6:	7a9b      	ldrb	r3, [r3, #10]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <main+0x284>)
 8001cac:	7adb      	ldrb	r3, [r3, #11]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	db09      	blt.n	8001cda <main+0x1c2>
			  activate_pump(&furnace_pump);
 8001cc6:	4841      	ldr	r0, [pc, #260]	; (8001dcc <main+0x2b4>)
 8001cc8:	f7ff fec2 	bl	8001a50 <activate_pump>

			  if (fcc.underfloor_pump_active) {
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <main+0x284>)
 8001cce:	7b9b      	ldrb	r3, [r3, #14]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <main+0x1c2>
				  activate_pump(&underfloor_pump);
 8001cd4:	483f      	ldr	r0, [pc, #252]	; (8001dd4 <main+0x2bc>)
 8001cd6:	f7ff febb 	bl	8001a50 <activate_pump>
			  }
		  }

		  if (temperature_array[0] >= fcc.furnace_temperature) {
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <main+0x280>)
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <main+0x284>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	da00      	bge.n	8001cf8 <main+0x1e0>
		  }


		  // TODO przejscie do IDLE gdy nie uda sie rozpalic

		  break;
 8001cf6:	e1da      	b.n	80020ae <main+0x596>
			  last_state = current_state;
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <main+0x2b0>)
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <main+0x2c4>)
 8001cfe:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_WORK;
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <main+0x2b0>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	701a      	strb	r2, [r3, #0]
		  break;
 8001d06:	e1d2      	b.n	80020ae <main+0x596>
	  }
	  case FSM_WORK: {
		  // bledne odczytywanie temperatury
		  if (wrong_sensor_read()) {
 8001d08:	f7ff fee0 	bl	8001acc <wrong_sensor_read>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <main+0x202>
			  current_state = FSM_IDLE;
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <main+0x2b0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
			  break;
 8001d18:	e1c9      	b.n	80020ae <main+0x596>
		  }

		  if (!is_pump_activated(&furnace_pump)) {
 8001d1a:	482c      	ldr	r0, [pc, #176]	; (8001dcc <main+0x2b4>)
 8001d1c:	f7ff feb8 	bl	8001a90 <is_pump_activated>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d012      	beq.n	8001d52 <main+0x23a>
			  activate_pump(&furnace_pump);
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <main+0x2b4>)
 8001d2e:	f7ff fe8f 	bl	8001a50 <activate_pump>

			  if (fcc.underfloor_pump_active && !is_pump_activated(&underfloor_pump)) {
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <main+0x284>)
 8001d34:	7b9b      	ldrb	r3, [r3, #14]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <main+0x23a>
 8001d3a:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <main+0x2bc>)
 8001d3c:	f7ff fea8 	bl	8001a90 <is_pump_activated>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f083 0301 	eor.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <main+0x23a>
				  activate_pump(&underfloor_pump);
 8001d4c:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <main+0x2bc>)
 8001d4e:	f7ff fe7f 	bl	8001a50 <activate_pump>
			  }
		  }

		  // zalacznie dmuchawy
		  if (temperature_array[0] >= fcc.furnace_temperature + (fcc.blower_hysteresis >> 1) && fcc.blower_active) {
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <main+0x280>)
 8001d54:	ed93 7a00 	vldr	s14, [r3]
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <main+0x284>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <main+0x284>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	db36      	blt.n	8001de8 <main+0x2d0>
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <main+0x284>)
 8001d7c:	7bdb      	ldrb	r3, [r3, #15]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d032      	beq.n	8001de8 <main+0x2d0>
			  deactivate_pump(&blower);
 8001d82:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <main+0x2c0>)
 8001d84:	f7ff fe74 	bl	8001a70 <deactivate_pump>
 8001d88:	e049      	b.n	8001e1e <main+0x306>
 8001d8a:	bf00      	nop
 8001d8c:	2000a5d0 	.word	0x2000a5d0
 8001d90:	2000a6f0 	.word	0x2000a6f0
 8001d94:	200002b0 	.word	0x200002b0
 8001d98:	2000a324 	.word	0x2000a324
 8001d9c:	20000040 	.word	0x20000040
 8001da0:	20000018 	.word	0x20000018
 8001da4:	2000a334 	.word	0x2000a334
 8001da8:	08010428 	.word	0x08010428
 8001dac:	20000010 	.word	0x20000010
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000000 	.word	0x20000000
 8001db8:	2000a4d4 	.word	0x2000a4d4
 8001dbc:	08010434 	.word	0x08010434
 8001dc0:	2000a61c 	.word	0x2000a61c
 8001dc4:	2000a584 	.word	0x2000a584
 8001dc8:	2000a33c 	.word	0x2000a33c
 8001dcc:	20000020 	.word	0x20000020
 8001dd0:	20000028 	.word	0x20000028
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	20000038 	.word	0x20000038
 8001ddc:	2000a33d 	.word	0x2000a33d
 8001de0:	42be0000 	.word	0x42be0000
 8001de4:	42b40000 	.word	0x42b40000
		  }
		  else if (temperature_array[0] < fcc.furnace_temperature - (fcc.blower_hysteresis >> 1) && fcc.blower_active) {
 8001de8:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <main+0x560>)
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	4ba3      	ldr	r3, [pc, #652]	; (800207c <main+0x564>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4ba1      	ldr	r3, [pc, #644]	; (800207c <main+0x564>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d506      	bpl.n	8001e1e <main+0x306>
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <main+0x564>)
 8001e12:	7bdb      	ldrb	r3, [r3, #15]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <main+0x306>
			  activate_pump(&blower);
 8001e18:	4899      	ldr	r0, [pc, #612]	; (8002080 <main+0x568>)
 8001e1a:	f7ff fe19 	bl	8001a50 <activate_pump>
		  }

		  // przejscie do przedmuchu
		  if (do_blowout && fcc.blower_active) {
 8001e1e:	4b99      	ldr	r3, [pc, #612]	; (8002084 <main+0x56c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <main+0x324>
 8001e26:	4b95      	ldr	r3, [pc, #596]	; (800207c <main+0x564>)
 8001e28:	7bdb      	ldrb	r3, [r3, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <main+0x324>
			  last_state = current_state;
 8001e2e:	4b96      	ldr	r3, [pc, #600]	; (8002088 <main+0x570>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b96      	ldr	r3, [pc, #600]	; (800208c <main+0x574>)
 8001e34:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_BLOWOUT;
 8001e36:	4b94      	ldr	r3, [pc, #592]	; (8002088 <main+0x570>)
 8001e38:	2205      	movs	r2, #5
 8001e3a:	701a      	strb	r2, [r3, #0]
		  }

		  // zalaczanie pompy mieszajacej
		  if (temperature_array[2] - temperature_array[3] >= fcc.furnace_tank_temperature_difference
 8001e3c:	4b8e      	ldr	r3, [pc, #568]	; (8002078 <main+0x560>)
 8001e3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e42:	4b8d      	ldr	r3, [pc, #564]	; (8002078 <main+0x560>)
 8001e44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e4c:	4b8b      	ldr	r3, [pc, #556]	; (800207c <main+0x564>)
 8001e4e:	7a5b      	ldrb	r3, [r3, #9]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	db17      	blt.n	8001e92 <main+0x37a>
				  && temperature_array[2] >= fcc.water_tank_pump_activation_temperature + (fcc.water_tank_pump_hysteresis >> 1)) {
 8001e62:	4b85      	ldr	r3, [pc, #532]	; (8002078 <main+0x560>)
 8001e64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e68:	4b84      	ldr	r3, [pc, #528]	; (800207c <main+0x564>)
 8001e6a:	79db      	ldrb	r3, [r3, #7]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b83      	ldr	r3, [pc, #524]	; (800207c <main+0x564>)
 8001e70:	7a1b      	ldrb	r3, [r3, #8]
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	db03      	blt.n	8001e92 <main+0x37a>
			  activate_pump(&mixing_pump);
 8001e8a:	4881      	ldr	r0, [pc, #516]	; (8002090 <main+0x578>)
 8001e8c:	f7ff fde0 	bl	8001a50 <activate_pump>
 8001e90:	e02d      	b.n	8001eee <main+0x3d6>
		  }
		  else if (temperature_array[2] - temperature_array[3] < fcc.furnace_tank_temperature_difference
 8001e92:	4b79      	ldr	r3, [pc, #484]	; (8002078 <main+0x560>)
 8001e94:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e98:	4b77      	ldr	r3, [pc, #476]	; (8002078 <main+0x560>)
 8001e9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea2:	4b76      	ldr	r3, [pc, #472]	; (800207c <main+0x564>)
 8001ea4:	7a5b      	ldrb	r3, [r3, #9]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d413      	bmi.n	8001ee0 <main+0x3c8>
				  || temperature_array[2] < fcc.water_tank_pump_activation_temperature - (fcc.water_tank_pump_hysteresis >> 1)) {
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <main+0x560>)
 8001eba:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <main+0x564>)
 8001ec0:	79db      	ldrb	r3, [r3, #7]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b6d      	ldr	r3, [pc, #436]	; (800207c <main+0x564>)
 8001ec6:	7a1b      	ldrb	r3, [r3, #8]
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d503      	bpl.n	8001ee8 <main+0x3d0>
			  deactivate_pump(&mixing_pump);
 8001ee0:	486b      	ldr	r0, [pc, #428]	; (8002090 <main+0x578>)
 8001ee2:	f7ff fdc5 	bl	8001a70 <deactivate_pump>
 8001ee6:	e002      	b.n	8001eee <main+0x3d6>
		  }
		  else {
			  deactivate_pump(&mixing_pump);
 8001ee8:	4869      	ldr	r0, [pc, #420]	; (8002090 <main+0x578>)
 8001eea:	f7ff fdc1 	bl	8001a70 <deactivate_pump>
		  }

		  // przejscie do przegrzania
		  if (temperature_array[0] >= FURNACE_OVERHEAT_TEMPERATURE || temperature_array[1] >= OUT_WATER_OVERHEAT_TEMPERATURE) {
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <main+0x560>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002094 <main+0x57c>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	da0a      	bge.n	8001f18 <main+0x400>
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <main+0x560>)
 8001f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f08:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002098 <main+0x580>
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	da00      	bge.n	8001f18 <main+0x400>
			  last_state = current_state;
			  current_state = FSM_OVERHEATING;
		  }

		  break;
 8001f16:	e0ca      	b.n	80020ae <main+0x596>
			  last_state = current_state;
 8001f18:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <main+0x570>)
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <main+0x574>)
 8001f1e:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_OVERHEATING;
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <main+0x570>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	701a      	strb	r2, [r3, #0]
		  break;
 8001f26:	e0c2      	b.n	80020ae <main+0x596>
	  }
	  case FSM_EXTINCTION: {
		  if (wrong_sensor_read()) {
 8001f28:	f7ff fdd0 	bl	8001acc <wrong_sensor_read>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <main+0x422>
			  current_state = FSM_IDLE;
 8001f32:	4b55      	ldr	r3, [pc, #340]	; (8002088 <main+0x570>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			  break;
 8001f38:	e0b9      	b.n	80020ae <main+0x596>
		  }

		  deactivate_pump(&underfloor_pump);
 8001f3a:	4858      	ldr	r0, [pc, #352]	; (800209c <main+0x584>)
 8001f3c:	f7ff fd98 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&furnace_pump);
 8001f40:	4857      	ldr	r0, [pc, #348]	; (80020a0 <main+0x588>)
 8001f42:	f7ff fd95 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&blower);
 8001f46:	484e      	ldr	r0, [pc, #312]	; (8002080 <main+0x568>)
 8001f48:	f7ff fd92 	bl	8001a70 <deactivate_pump>
		  deactivate_pump(&mixing_pump); // mieszanie wody?
 8001f4c:	4850      	ldr	r0, [pc, #320]	; (8002090 <main+0x578>)
 8001f4e:	f7ff fd8f 	bl	8001a70 <deactivate_pump>

		  if (temperature_array[0] >= FURNACE_OVERHEAT_TEMPERATURE || temperature_array[1] >= OUT_WATER_OVERHEAT_TEMPERATURE) {
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <main+0x560>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002094 <main+0x57c>
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	da0a      	bge.n	8001f7c <main+0x464>
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <main+0x560>)
 8001f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002098 <main+0x580>
 8001f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	da00      	bge.n	8001f7c <main+0x464>
			  last_state = current_state;
			  current_state = FSM_OVERHEATING;
		  }

		  break;
 8001f7a:	e098      	b.n	80020ae <main+0x596>
			  last_state = current_state;
 8001f7c:	4b42      	ldr	r3, [pc, #264]	; (8002088 <main+0x570>)
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <main+0x574>)
 8001f82:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_OVERHEATING;
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <main+0x570>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	701a      	strb	r2, [r3, #0]
		  break;
 8001f8a:	e090      	b.n	80020ae <main+0x596>
	  }
	  case FSM_OVERHEATING: {
		  if (wrong_sensor_read()) {
 8001f8c:	f7ff fd9e 	bl	8001acc <wrong_sensor_read>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <main+0x486>
			  current_state = FSM_OVERHEATING;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <main+0x570>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	701a      	strb	r2, [r3, #0]
			  break;
 8001f9c:	e087      	b.n	80020ae <main+0x596>
		  }

		  activate_pump(&underfloor_pump);
 8001f9e:	483f      	ldr	r0, [pc, #252]	; (800209c <main+0x584>)
 8001fa0:	f7ff fd56 	bl	8001a50 <activate_pump>
		  activate_pump(&mixing_pump);
 8001fa4:	483a      	ldr	r0, [pc, #232]	; (8002090 <main+0x578>)
 8001fa6:	f7ff fd53 	bl	8001a50 <activate_pump>
		  activate_pump(&furnace_pump);
 8001faa:	483d      	ldr	r0, [pc, #244]	; (80020a0 <main+0x588>)
 8001fac:	f7ff fd50 	bl	8001a50 <activate_pump>
		  deactivate_pump(&blower);
 8001fb0:	4833      	ldr	r0, [pc, #204]	; (8002080 <main+0x568>)
 8001fb2:	f7ff fd5d 	bl	8001a70 <deactivate_pump>

		  if (temperature_array[0] <= (float)fcc.furnace_temperature + 20.0f && temperature_array[1] <= 80.0f) {
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <main+0x560>)
 8001fb8:	ed93 7a00 	vldr	s14, [r3]
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <main+0x564>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d900      	bls.n	8001fdc <main+0x4c4>
			  current_state = last_state;
			  last_state = FSM_OVERHEATING;
		  }

		  break;
 8001fda:	e068      	b.n	80020ae <main+0x596>
		  if (temperature_array[0] <= (float)fcc.furnace_temperature + 20.0f && temperature_array[1] <= 80.0f) {
 8001fdc:	4b26      	ldr	r3, [pc, #152]	; (8002078 <main+0x560>)
 8001fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80020a4 <main+0x58c>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d900      	bls.n	8001ff2 <main+0x4da>
		  break;
 8001ff0:	e05d      	b.n	80020ae <main+0x596>
			  current_state = last_state;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <main+0x574>)
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <main+0x570>)
 8001ff8:	701a      	strb	r2, [r3, #0]
			  last_state = FSM_OVERHEATING;
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <main+0x574>)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	701a      	strb	r2, [r3, #0]
		  break;
 8002000:	e055      	b.n	80020ae <main+0x596>
	  }
	  case FSM_BLOWOUT: {
		  if (wrong_sensor_read()) {
 8002002:	f7ff fd63 	bl	8001acc <wrong_sensor_read>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <main+0x4fc>
			  current_state = FSM_IDLE;
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <main+0x570>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			  break;
 8002012:	e04c      	b.n	80020ae <main+0x596>
		  }

		  activate_pump(&blower);
 8002014:	481a      	ldr	r0, [pc, #104]	; (8002080 <main+0x568>)
 8002016:	f7ff fd1b 	bl	8001a50 <activate_pump>

		  if (stop_blowout) {
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <main+0x590>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <main+0x51e>
			  deactivate_pump(&blower);
 8002022:	4817      	ldr	r0, [pc, #92]	; (8002080 <main+0x568>)
 8002024:	f7ff fd24 	bl	8001a70 <deactivate_pump>
			  last_state = current_state;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <main+0x570>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <main+0x574>)
 800202e:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_WORK;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <main+0x570>)
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
		  }

		  if (temperature_array[0] >= FURNACE_OVERHEAT_TEMPERATURE || temperature_array[1] >= OUT_WATER_OVERHEAT_TEMPERATURE) {
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <main+0x560>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002094 <main+0x57c>
 8002040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	da0a      	bge.n	8002060 <main+0x548>
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <main+0x560>)
 800204c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002050:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002098 <main+0x580>
 8002054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	da00      	bge.n	8002060 <main+0x548>
			  last_state = FSM_WORK;
			  current_state = FSM_OVERHEATING;
		  }

		  break;
 800205e:	e026      	b.n	80020ae <main+0x596>
			  last_state = FSM_WORK;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <main+0x574>)
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
			  current_state = FSM_OVERHEATING;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <main+0x570>)
 8002068:	2204      	movs	r2, #4
 800206a:	701a      	strb	r2, [r3, #0]
		  break;
 800206c:	e01f      	b.n	80020ae <main+0x596>
	  }
	  default: {
		  current_state = FSM_IDLE;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <main+0x570>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
		  break;
 8002074:	e01b      	b.n	80020ae <main+0x596>
 8002076:	bf00      	nop
 8002078:	2000a324 	.word	0x2000a324
 800207c:	20000040 	.word	0x20000040
 8002080:	20000038 	.word	0x20000038
 8002084:	2000a335 	.word	0x2000a335
 8002088:	2000a33c 	.word	0x2000a33c
 800208c:	2000a33d 	.word	0x2000a33d
 8002090:	20000028 	.word	0x20000028
 8002094:	42be0000 	.word	0x42be0000
 8002098:	42b40000 	.word	0x42b40000
 800209c:	20000030 	.word	0x20000030
 80020a0:	20000020 	.word	0x20000020
 80020a4:	42a00000 	.word	0x42a00000
 80020a8:	20000051 	.word	0x20000051
			  break;
 80020ac:	bf00      	nop
	  }
	  }

	  read_encoder_data(); // read data from encoder
 80020ae:	f7ff fca1 	bl	80019f4 <read_encoder_data>
	  if (last_encoder_value != encoder_value) {
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <main+0x634>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d008      	beq.n	80020ce <main+0x5b6>
		  printf("Encoder = %d\n", encoder_value);
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <main+0x634>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4823      	ldr	r0, [pc, #140]	; (8002150 <main+0x638>)
 80020c4:	f00b ffce 	bl	800e064 <iprintf>
	  	  last_encoder_value = encoder_value;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <main+0x634>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	71fb      	strb	r3, [r7, #7]
	  }

	  if (render_menu() != HAL_OK) {
 80020ce:	f000 f91f 	bl	8002310 <render_menu>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <main+0x5d0>
		  printf("SPI DMA error! Error code = %d\n", hspi1.State);
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <main+0x63c>)
 80020da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	481d      	ldr	r0, [pc, #116]	; (8002158 <main+0x640>)
 80020e4:	f00b ffbe 	bl	800e064 <iprintf>
	  }

	  printf("T1= %f C\tT2= %f C\n", temperature_array[0], temperature_array[1]);
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <main+0x644>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa2b 	bl	8000548 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <main+0x644>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9cd 2300 	strd	r2, r3, [sp]
 8002108:	4622      	mov	r2, r4
 800210a:	462b      	mov	r3, r5
 800210c:	4814      	ldr	r0, [pc, #80]	; (8002160 <main+0x648>)
 800210e:	f00b ffa9 	bl	800e064 <iprintf>

	  if (do_log) {
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <main+0x64c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d013      	beq.n	8002142 <main+0x62a>
		  do_log = false;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <main+0x64c>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
		  sd_res = log_data(temperature_array[0]);
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <main+0x644>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	eeb0 0a67 	vmov.f32	s0, s15
 800212a:	f000 fcf7 	bl	8002b1c <log_data>
 800212e:	4603      	mov	r3, r0
 8002130:	71bb      	strb	r3, [r7, #6]
		  if (sd_res != SD_OK)
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <main+0x62a>
			  printf("SD ERROR %d\t", sd_res);
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	4619      	mov	r1, r3
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <main+0x650>)
 800213e:	f00b ff91 	bl	800e064 <iprintf>
	  }

	  HAL_Delay(50);
 8002142:	2032      	movs	r0, #50	; 0x32
 8002144:	f001 fb0a 	bl	800375c <HAL_Delay>
	  switch(current_state) {
 8002148:	e53b      	b.n	8001bc2 <main+0xaa>
 800214a:	bf00      	nop
 800214c:	2000a334 	.word	0x2000a334
 8002150:	08010440 	.word	0x08010440
 8002154:	2000a4d4 	.word	0x2000a4d4
 8002158:	08010450 	.word	0x08010450
 800215c:	2000a324 	.word	0x2000a324
 8002160:	08010470 	.word	0x08010470
 8002164:	20000050 	.word	0x20000050
 8002168:	08010484 	.word	0x08010484

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b096      	sub	sp, #88	; 0x58
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	2244      	movs	r2, #68	; 0x44
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f00c f8d8 	bl	800e330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800218e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002192:	f002 fcab 	bl	8004aec <HAL_PWREx_ControlVoltageScaling>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800219c:	f000 f83a 	bl	8002214 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80021a0:	2318      	movs	r3, #24
 80021a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021b0:	2360      	movs	r3, #96	; 0x60
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b4:	2302      	movs	r3, #2
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021b8:	2301      	movs	r3, #1
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021c0:	2328      	movs	r3, #40	; 0x28
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021c4:	2307      	movs	r3, #7
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80021c8:	2304      	movs	r3, #4
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fcdf 	bl	8004b98 <HAL_RCC_OscConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80021e0:	f000 f818 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e4:	230f      	movs	r3, #15
 80021e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e8:	2303      	movs	r3, #3
 80021ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	2104      	movs	r1, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 f8a7 	bl	8005350 <HAL_RCC_ClockConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002208:	f000 f804 	bl	8002214 <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	3758      	adds	r7, #88	; 0x58
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x8>
	...

08002220 <get_menu_screen>:
	return HAL_OK;

}


static Menu get_menu_screen() {
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	switch (menu_option) {
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <get_menu_screen+0xa8>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d847      	bhi.n	80022bc <get_menu_screen+0x9c>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <get_menu_screen+0x14>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002279 	.word	0x08002279
 8002238:	0800227d 	.word	0x0800227d
 800223c:	08002281 	.word	0x08002281
 8002240:	08002285 	.word	0x08002285
 8002244:	08002289 	.word	0x08002289
 8002248:	0800228d 	.word	0x0800228d
 800224c:	08002291 	.word	0x08002291
 8002250:	08002295 	.word	0x08002295
 8002254:	08002299 	.word	0x08002299
 8002258:	0800229d 	.word	0x0800229d
 800225c:	080022a1 	.word	0x080022a1
 8002260:	080022a5 	.word	0x080022a5
 8002264:	080022a9 	.word	0x080022a9
 8002268:	080022ad 	.word	0x080022ad
 800226c:	080022b1 	.word	0x080022b1
 8002270:	080022b5 	.word	0x080022b5
 8002274:	080022b9 	.word	0x080022b9
	case 0:
		return MENU_MAIN;
 8002278:	2300      	movs	r3, #0
 800227a:	e020      	b.n	80022be <get_menu_screen+0x9e>
	case 1:
		return MENU_FURNACE_TEMP;
 800227c:	2301      	movs	r3, #1
 800227e:	e01e      	b.n	80022be <get_menu_screen+0x9e>
	case 2:
		return MENU_BLOWER_HYST;
 8002280:	2302      	movs	r3, #2
 8002282:	e01c      	b.n	80022be <get_menu_screen+0x9e>
	case 3:
		return MENU_BLOWER_MIN;
 8002284:	2303      	movs	r3, #3
 8002286:	e01a      	b.n	80022be <get_menu_screen+0x9e>
	case 4:
		return MENU_BLOWER_MAX;
 8002288:	2304      	movs	r3, #4
 800228a:	e018      	b.n	80022be <get_menu_screen+0x9e>
	case 5:
		return MENU_BLOWOUT_TIME;
 800228c:	2305      	movs	r3, #5
 800228e:	e016      	b.n	80022be <get_menu_screen+0x9e>
	case 6:
		return MENU_BLOWOUT_BREAK;
 8002290:	2306      	movs	r3, #6
 8002292:	e014      	b.n	80022be <get_menu_screen+0x9e>
	case 7:
		return MENU_WATER_TANK_TEMP;
 8002294:	2307      	movs	r3, #7
 8002296:	e012      	b.n	80022be <get_menu_screen+0x9e>
	case 8:
		return MENU_WATER_TANK_PUMP_ACTIV;
 8002298:	2308      	movs	r3, #8
 800229a:	e010      	b.n	80022be <get_menu_screen+0x9e>
	case 9:
		return MENU_WATER_TANK_PUMP_HYST;
 800229c:	2309      	movs	r3, #9
 800229e:	e00e      	b.n	80022be <get_menu_screen+0x9e>
	case 10:
		return MENU_WATER_TANK_TEMP_DIFF;
 80022a0:	230a      	movs	r3, #10
 80022a2:	e00c      	b.n	80022be <get_menu_screen+0x9e>
	case 11:
		return MENU_FURNACE_PUMP_ACTIV;
 80022a4:	230b      	movs	r3, #11
 80022a6:	e00a      	b.n	80022be <get_menu_screen+0x9e>
	case 12:
		return MENU_FURNACE_PUMP_HYST;
 80022a8:	230c      	movs	r3, #12
 80022aa:	e008      	b.n	80022be <get_menu_screen+0x9e>
	case 13:
		return MENU_TEMP_OFFSET;
 80022ac:	230d      	movs	r3, #13
 80022ae:	e006      	b.n	80022be <get_menu_screen+0x9e>
	case 14:
		return MENU_FURNACE_TURN_OFF_TEMP;
 80022b0:	230e      	movs	r3, #14
 80022b2:	e004      	b.n	80022be <get_menu_screen+0x9e>
	case 15:
		return MENU_UNDERFLOOR_PUMP_ACTIV;
 80022b4:	230f      	movs	r3, #15
 80022b6:	e002      	b.n	80022be <get_menu_screen+0x9e>
	case 16:
		return MENU_BLOWER_ACTIV;
 80022b8:	2310      	movs	r3, #16
 80022ba:	e000      	b.n	80022be <get_menu_screen+0x9e>
	default:
		return MENU_MAIN;
 80022bc:	2300      	movs	r3, #0
	}
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	2000a351 	.word	0x2000a351

080022cc <menu_init>:


void menu_init(uint8_t* encoder_value, LCD_GPIO* encoder_button, FCC* furnace_config, float* temperature_array) {
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
	ENCODER_VALUE = encoder_value;
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <menu_init+0x34>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6013      	str	r3, [r2, #0]
	ENCODER_BUTTON = encoder_button;
 80022e0:	4a08      	ldr	r2, [pc, #32]	; (8002304 <menu_init+0x38>)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6013      	str	r3, [r2, #0]
	FURNACE_CONFIG = furnace_config;
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <menu_init+0x3c>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6013      	str	r3, [r2, #0]
	TEMPERATURE_ARRAY = temperature_array;
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <menu_init+0x40>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000a340 	.word	0x2000a340
 8002304:	2000a344 	.word	0x2000a344
 8002308:	2000a348 	.word	0x2000a348
 800230c:	2000a34c 	.word	0x2000a34c

08002310 <render_menu>:


HAL_StatusTypeDef render_menu() {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
	if (!menu_locked) {
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <render_menu+0x94>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <render_menu+0x2c>
		menu_option = *ENCODER_VALUE;
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <render_menu+0x98>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <render_menu+0x9c>)
 800232c:	701a      	strb	r2, [r3, #0]
		menu_locked = false;
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <render_menu+0x94>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
		submenu_locked = true;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <render_menu+0xa0>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e011      	b.n	8002360 <render_menu+0x50>
	}
	else if (!submenu_locked) {
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <render_menu+0xa0>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	f083 0301 	eor.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <render_menu+0x50>
		submenu_option = *ENCODER_VALUE;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <render_menu+0x98>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <render_menu+0xa4>)
 8002352:	701a      	strb	r2, [r3, #0]
		menu_locked = true;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <render_menu+0x94>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
		submenu_locked = false;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <render_menu+0xa0>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
	}

	Menu screen = get_menu_screen();
 8002360:	f7ff ff5e 	bl	8002220 <get_menu_screen>
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]

	switch (screen) {
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d00e      	beq.n	800238c <render_menu+0x7c>
 800236e:	2b02      	cmp	r3, #2
 8002370:	dc10      	bgt.n	8002394 <render_menu+0x84>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <render_menu+0x6c>
 8002376:	2b01      	cmp	r3, #1
 8002378:	d004      	beq.n	8002384 <render_menu+0x74>
 800237a:	e00b      	b.n	8002394 <render_menu+0x84>
		case MENU_MAIN: {
			return lcd_draw_background();
 800237c:	f7ff fa1c 	bl	80017b8 <lcd_draw_background>
 8002380:	4603      	mov	r3, r0
 8002382:	e00a      	b.n	800239a <render_menu+0x8a>
		}
		case MENU_FURNACE_TEMP: {
			return lcd_draw_setting_1();
 8002384:	f7ff fa58 	bl	8001838 <lcd_draw_setting_1>
 8002388:	4603      	mov	r3, r0
 800238a:	e006      	b.n	800239a <render_menu+0x8a>
			break;
		}
		case MENU_BLOWER_HYST: {
			return lcd_draw_setting_2();
 800238c:	f7ff fa75 	bl	800187a <lcd_draw_setting_2>
 8002390:	4603      	mov	r3, r0
 8002392:	e002      	b.n	800239a <render_menu+0x8a>
			break;
		}
		default: {
			return lcd_draw_background();
 8002394:	f7ff fa10 	bl	80017b8 <lcd_draw_background>
 8002398:	4603      	mov	r3, r0
			break;
		}
	}

	return HAL_OK;
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000a350 	.word	0x2000a350
 80023a8:	2000a340 	.word	0x2000a340
 80023ac:	2000a351 	.word	0x2000a351
 80023b0:	20000052 	.word	0x20000052
 80023b4:	2000a352 	.word	0x2000a352

080023b8 <delay_us>:
};
static uint8_t retry_measure = 0;
static uint8_t cannot_read_attempt = 0;


static void delay_us(uint32_t delay) {
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&OW_Tim, 0);
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <delay_us+0x2c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&OW_Tim) < delay) {
 80023c8:	bf00      	nop
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <delay_us+0x2c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d8f9      	bhi.n	80023ca <delay_us+0x12>

	}
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	2000a354 	.word	0x2000a354

080023e8 <set_baudrate>:


static void set_baudrate(uint32_t baudrate)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  OW_UART.Init.BaudRate = baudrate;
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <set_baudrate+0x28>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6053      	str	r3, [r2, #4]

  if (HAL_HalfDuplex_Init(&OW_UART) != HAL_OK)
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <set_baudrate+0x28>)
 80023f8:	f007 fa0e 	bl	8009818 <HAL_HalfDuplex_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <set_baudrate+0x1e>
  {
    Error_Handler();
 8002402:	f7ff ff07 	bl	8002214 <Error_Handler>
  }
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000a3a0 	.word	0x2000a3a0

08002414 <wire_init>:


static HAL_StatusTypeDef wire_init() {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800241a:	23f0      	movs	r3, #240	; 0xf0
 800241c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8002422:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002426:	f7ff ffdf 	bl	80023e8 <set_baudrate>
	HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 800242a:	1df9      	adds	r1, r7, #7
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	2201      	movs	r2, #1
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <wire_init+0x50>)
 8002434:	f007 fa46 	bl	80098c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&OW_UART, &data_in, 1, HAL_MAX_DELAY);
 8002438:	1db9      	adds	r1, r7, #6
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	2201      	movs	r2, #1
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <wire_init+0x50>)
 8002442:	f007 fac9 	bl	80099d8 <HAL_UART_Receive>
	set_baudrate(115200);
 8002446:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800244a:	f7ff ffcd 	bl	80023e8 <set_baudrate>

	if (data_in != 0xf0) return HAL_OK;
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	2bf0      	cmp	r3, #240	; 0xf0
 8002452:	d001      	beq.n	8002458 <wire_init+0x44>
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <wire_init+0x46>
	else return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000a3a0 	.word	0x2000a3a0

08002468 <Write_DQ>:


static void Write_DQ(int value) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	if (value) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <Write_DQ+0x24>
		uint8_t data_out = 0xff;
 8002476:	23ff      	movs	r3, #255	; 0xff
 8002478:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 800247a:	f107 010f 	add.w	r1, r7, #15
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2201      	movs	r2, #1
 8002484:	4808      	ldr	r0, [pc, #32]	; (80024a8 <Write_DQ+0x40>)
 8002486:	f007 fa1d 	bl	80098c4 <HAL_UART_Transmit>
	}
	else {
		uint8_t data_out = 0x0;
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
	}
}
 800248a:	e009      	b.n	80024a0 <Write_DQ+0x38>
		uint8_t data_out = 0x0;
 800248c:	2300      	movs	r3, #0
 800248e:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 8002490:	f107 010e 	add.w	r1, r7, #14
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	2201      	movs	r2, #1
 800249a:	4803      	ldr	r0, [pc, #12]	; (80024a8 <Write_DQ+0x40>)
 800249c:	f007 fa12 	bl	80098c4 <HAL_UART_Transmit>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000a3a0 	.word	0x2000a3a0

080024ac <Read_DQ>:


static uint8_t Read_DQ(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xFF;
 80024b2:	23ff      	movs	r3, #255	; 0xff
 80024b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&OW_UART, &data_out, 1, HAL_MAX_DELAY);
 80024ba:	1df9      	adds	r1, r7, #7
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	2201      	movs	r2, #1
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <Read_DQ+0x3c>)
 80024c4:	f007 f9fe 	bl	80098c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&OW_UART, &data_in, 1, HAL_MAX_DELAY);
 80024c8:	1db9      	adds	r1, r7, #6
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	2201      	movs	r2, #1
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <Read_DQ+0x3c>)
 80024d2:	f007 fa81 	bl	80099d8 <HAL_UART_Receive>

	return data_in & 0x01;
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000a3a0 	.word	0x2000a3a0

080024ec <Write_byte>:


static void Write_byte(uint8_t byte) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e00b      	b.n	8002514 <Write_byte+0x28>
		Write_DQ(byte & 0x01);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffb0 	bl	8002468 <Write_DQ>
		byte >>= 1;
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3301      	adds	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b07      	cmp	r3, #7
 8002518:	d9f0      	bls.n	80024fc <Write_byte+0x10>
	}
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <Read_byte>:


static uint8_t Read_byte() {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < 8; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	71bb      	strb	r3, [r7, #6]
 8002532:	e00e      	b.n	8002552 <Read_byte+0x2e>
		byte >>= 1;
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	71fb      	strb	r3, [r7, #7]
		if (Read_DQ() == 1)
 800253a:	f7ff ffb7 	bl	80024ac <Read_DQ>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d103      	bne.n	800254c <Read_byte+0x28>
			byte |= 0x80;
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800254a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	3301      	adds	r3, #1
 8002550:	71bb      	strb	r3, [r7, #6]
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d9ed      	bls.n	8002534 <Read_byte+0x10>
		else
			byte |= 0x00;
	}

	return byte;
 8002558:	79fb      	ldrb	r3, [r7, #7]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <byte_crc>:


static uint8_t byte_crc(uint8_t crc, uint8_t byte) {
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	460a      	mov	r2, r1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	4613      	mov	r3, r2
 8002570:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e016      	b.n	80025a6 <byte_crc+0x44>
		uint8_t b = crc ^ byte;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	4053      	eors	r3, r2
 800257e:	73bb      	strb	r3, [r7, #14]
		crc >>= 1;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
		if (b & 0x01)
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <byte_crc+0x38>
			crc ^= 0x8c;
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002596:	43db      	mvns	r3, r3
 8002598:	71fb      	strb	r3, [r7, #7]
		byte >>= 1;
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b07      	cmp	r3, #7
 80025aa:	d9e5      	bls.n	8002578 <byte_crc+0x16>
	}
	return crc;
 80025ac:	79fb      	ldrb	r3, [r7, #7]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <Wire_calculate_crc>:


static uint8_t Wire_calculate_crc(const uint8_t* data, uint8_t lenght) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < lenght; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	73bb      	strb	r3, [r7, #14]
 80025ce:	e00d      	b.n	80025ec <Wire_calculate_crc+0x32>
    	crc = byte_crc(crc, data[i]);
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ffc0 	bl	8002562 <byte_crc>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < lenght; i++)
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	3301      	adds	r3, #1
 80025ea:	73bb      	strb	r3, [r7, #14]
 80025ec:	7bba      	ldrb	r2, [r7, #14]
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3ed      	bcc.n	80025d0 <Wire_calculate_crc+0x16>

    return crc;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <DS18B20_convert_temperature>:


static HAL_StatusTypeDef DS18B20_convert_temperature(uint8_t* ROM) {
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	if (wire_init() != HAL_OK) {
 8002606:	f7ff ff05 	bl	8002414 <wire_init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <DS18B20_convert_temperature+0x16>
			return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e01a      	b.n	800264a <DS18B20_convert_temperature+0x4c>
	}
	Write_byte(DS18B20_MATCH_ROM);
 8002614:	2055      	movs	r0, #85	; 0x55
 8002616:	f7ff ff69 	bl	80024ec <Write_byte>

	for (uint8_t i = 0; i < 8; i++) {
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e009      	b.n	8002634 <DS18B20_convert_temperature+0x36>
		Write_byte(*(ROM + i));
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff5f 	bl	80024ec <Write_byte>
	for (uint8_t i = 0; i < 8; i++) {
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3301      	adds	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b07      	cmp	r3, #7
 8002638:	d9f2      	bls.n	8002620 <DS18B20_convert_temperature+0x22>
	}

	Write_byte(DS18B20_CONVERT_T);
 800263a:	2044      	movs	r0, #68	; 0x44
 800263c:	f7ff ff56 	bl	80024ec <Write_byte>

	delay_us(800);
 8002640:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002644:	f7ff feb8 	bl	80023b8 <delay_us>

	return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DS18B20_read_scrachpad>:


static HAL_StatusTypeDef DS18B20_read_scrachpad(uint8_t* ROM, uint16_t* temperature, uint8_t* sign) {
 8002652:	b590      	push	{r4, r7, lr}
 8002654:	b089      	sub	sp, #36	; 0x24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
	uint8_t crc;
	uint8_t data[9];

	if (wire_init() != HAL_OK)
 800265e:	f7ff fed9 	bl	8002414 <wire_init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <DS18B20_read_scrachpad+0x1a>
		return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e046      	b.n	80026fa <DS18B20_read_scrachpad+0xa8>

	Write_byte(DS18B20_MATCH_ROM);
 800266c:	2055      	movs	r0, #85	; 0x55
 800266e:	f7ff ff3d 	bl	80024ec <Write_byte>

	for (uint8_t i = 0; i < 8; i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	77fb      	strb	r3, [r7, #31]
 8002676:	e009      	b.n	800268c <DS18B20_read_scrachpad+0x3a>
		Write_byte(*(ROM + i));
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff33 	bl	80024ec <Write_byte>
	for (uint8_t i = 0; i < 8; i++) {
 8002686:	7ffb      	ldrb	r3, [r7, #31]
 8002688:	3301      	adds	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	2b07      	cmp	r3, #7
 8002690:	d9f2      	bls.n	8002678 <DS18B20_read_scrachpad+0x26>
	}
	Write_byte(DS18B20_READ_SCRATCHPAD);
 8002692:	20be      	movs	r0, #190	; 0xbe
 8002694:	f7ff ff2a 	bl	80024ec <Write_byte>

	for (uint8_t i = 0; i < 9; i++) {
 8002698:	2300      	movs	r3, #0
 800269a:	77bb      	strb	r3, [r7, #30]
 800269c:	e00c      	b.n	80026b8 <DS18B20_read_scrachpad+0x66>
		data[i] = Read_byte();
 800269e:	7fbc      	ldrb	r4, [r7, #30]
 80026a0:	f7ff ff40 	bl	8002524 <Read_byte>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	f104 0320 	add.w	r3, r4, #32
 80026ac:	443b      	add	r3, r7
 80026ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 9; i++) {
 80026b2:	7fbb      	ldrb	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	77bb      	strb	r3, [r7, #30]
 80026b8:	7fbb      	ldrb	r3, [r7, #30]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d9ef      	bls.n	800269e <DS18B20_read_scrachpad+0x4c>
	}
	crc = Wire_calculate_crc(data, 8);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	2108      	movs	r1, #8
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff78 	bl	80025ba <Wire_calculate_crc>
 80026ca:	4603      	mov	r3, r0
 80026cc:	777b      	strb	r3, [r7, #29]

	if (crc != data[8])
 80026ce:	7f3b      	ldrb	r3, [r7, #28]
 80026d0:	7f7a      	ldrb	r2, [r7, #29]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <DS18B20_read_scrachpad+0x88>
		return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <DS18B20_read_scrachpad+0xa8>

	*temperature = ((data[1] << 13) | (data[0] << 5)) >> 5;
 80026da:	7d7b      	ldrb	r3, [r7, #21]
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	7d3b      	ldrb	r3, [r7, #20]
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	4313      	orrs	r3, r2
 80026e4:	115b      	asrs	r3, r3, #5
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	801a      	strh	r2, [r3, #0]
	*sign = data[1] & 0xf8;
 80026ec:	7d7b      	ldrb	r3, [r7, #21]
 80026ee:	f023 0307 	bic.w	r3, r3, #7
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
	...

08002704 <OW_init>:




void OW_init(UART_HandleTypeDef *one_wire_UART, TIM_HandleTypeDef *one_wire_TIM) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	OW_UART = *one_wire_UART;
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <OW_init+0x34>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	2388      	movs	r3, #136	; 0x88
 8002718:	461a      	mov	r2, r3
 800271a:	f00b fe90 	bl	800e43e <memcpy>
	OW_Tim = *one_wire_TIM;
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <OW_init+0x38>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	234c      	movs	r3, #76	; 0x4c
 8002728:	461a      	mov	r2, r3
 800272a:	f00b fe88 	bl	800e43e <memcpy>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000a3a0 	.word	0x2000a3a0
 800273c:	2000a354 	.word	0x2000a354

08002740 <DS18B20_get_temperature>:

	return HAL_OK;
}


HAL_StatusTypeDef DS18B20_get_temperature(uint8_t* ROM, float* temperature, uint8_t user_offset) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	71fb      	strb	r3, [r7, #7]
	uint16_t raw_temperature;
	uint8_t sign;

	if (DS18B20_convert_temperature(ROM) != HAL_OK)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff ff55 	bl	80025fe <DS18B20_convert_temperature>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <DS18B20_get_temperature+0x1e>
		return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e061      	b.n	8002822 <DS18B20_get_temperature+0xe2>

	if (DS18B20_read_scrachpad(ROM, &raw_temperature, &sign) != HAL_OK)
 800275e:	f107 0215 	add.w	r2, r7, #21
 8002762:	f107 0316 	add.w	r3, r7, #22
 8002766:	4619      	mov	r1, r3
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff ff72 	bl	8002652 <DS18B20_read_scrachpad>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <DS18B20_get_temperature+0x38>
		return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e054      	b.n	8002822 <DS18B20_get_temperature+0xe2>

	if (sign) {
 8002778:	7d7b      	ldrb	r3, [r7, #21]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <DS18B20_get_temperature+0x46>
		raw_temperature = (~(raw_temperature)) + 1;
 800277e:	8afb      	ldrh	r3, [r7, #22]
 8002780:	425b      	negs	r3, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	82fb      	strh	r3, [r7, #22]
	}

	*temperature = (raw_temperature / 16.0);
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fecb 	bl	8000524 <__aeabi_i2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <DS18B20_get_temperature+0xec>)
 8002794:	f7fe f85a 	bl	800084c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe fa02 	bl	8000ba8 <__aeabi_d2f>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	601a      	str	r2, [r3, #0]

	if (*temperature == 85.0 && retry_measure < 3) {
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002830 <DS18B20_get_temperature+0xf0>
 80027b4:	eef4 7a47 	vcmp.f32	s15, s14
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	d10f      	bne.n	80027de <DS18B20_get_temperature+0x9e>
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <DS18B20_get_temperature+0xf4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d80b      	bhi.n	80027de <DS18B20_get_temperature+0x9e>
		retry_measure++;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <DS18B20_get_temperature+0xf4>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <DS18B20_get_temperature+0xf4>)
 80027d0:	701a      	strb	r2, [r3, #0]
		DS18B20_get_temperature(ROM, temperature, user_offset);
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff ffb1 	bl	8002740 <DS18B20_get_temperature>
	}
	retry_measure = 0;
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <DS18B20_get_temperature+0xf4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]

	if (sign){
 80027e4:	7d7b      	ldrb	r3, [r7, #21]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00d      	beq.n	8002806 <DS18B20_get_temperature+0xc6>
		*temperature += (float)(OFFSET + user_offset);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	edc3 7a00 	vstr	s15, [r3]
 8002804:	e00c      	b.n	8002820 <DS18B20_get_temperature+0xe0>
	}
	else {
		*temperature -= (float)(OFFSET + user_offset);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	edc3 7a00 	vstr	s15, [r3]
	}

	return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40300000 	.word	0x40300000
 8002830:	42aa0000 	.word	0x42aa0000
 8002834:	2000a428 	.word	0x2000a428

08002838 <get_all_temperature>:


void get_all_temperature(float* temperature_array, uint8_t user_offset) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < NO_SENSORS; i++) {
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e028      	b.n	800289c <get_all_temperature+0x64>
		while(DS18B20_get_temperature(ROM_array[i], (temperature_array + i), user_offset) != HAL_OK && cannot_read_attempt < 10) {
			cannot_read_attempt++;
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <get_all_temperature+0x74>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <get_all_temperature+0x74>)
 8002854:	701a      	strb	r2, [r3, #0]
		while(DS18B20_get_temperature(ROM_array[i], (temperature_array + i), user_offset) != HAL_OK && cannot_read_attempt < 10) {
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <get_all_temperature+0x78>)
 800285c:	1898      	adds	r0, r3, r2
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	4619      	mov	r1, r3
 800286a:	f7ff ff69 	bl	8002740 <DS18B20_get_temperature>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <get_all_temperature+0x44>
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <get_all_temperature+0x74>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d9e6      	bls.n	800284a <get_all_temperature+0x12>
		}
		if (cannot_read_attempt == 10) {
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <get_all_temperature+0x74>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b0a      	cmp	r3, #10
 8002882:	d105      	bne.n	8002890 <get_all_temperature+0x58>
			*(temperature_array + i) = 500.0;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <get_all_temperature+0x7c>)
 800288e:	601a      	str	r2, [r3, #0]
		}
		cannot_read_attempt = 0;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <get_all_temperature+0x74>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NO_SENSORS; i++) {
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	3301      	adds	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d9d9      	bls.n	8002856 <get_all_temperature+0x1e>
	}
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000a429 	.word	0x2000a429
 80028b0:	20000054 	.word	0x20000054
 80028b4:	43fa0000 	.word	0x43fa0000

080028b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028cc:	2300      	movs	r3, #0
 80028ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <MX_RTC_Init+0xb0>)
 80028d2:	4a26      	ldr	r2, [pc, #152]	; (800296c <MX_RTC_Init+0xb4>)
 80028d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <MX_RTC_Init+0xb0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <MX_RTC_Init+0xb0>)
 80028de:	227f      	movs	r2, #127	; 0x7f
 80028e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <MX_RTC_Init+0xb0>)
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <MX_RTC_Init+0xb0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_RTC_Init+0xb0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_RTC_Init+0xb0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_RTC_Init+0xb0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002900:	4819      	ldr	r0, [pc, #100]	; (8002968 <MX_RTC_Init+0xb0>)
 8002902:	f004 fa63 	bl	8006dcc <HAL_RTC_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800290c:	f7ff fc82 	bl	8002214 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8002910:	2321      	movs	r3, #33	; 0x21
 8002912:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x37;
 8002914:	2337      	movs	r3, #55	; 0x37
 8002916:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 8002918:	2325      	movs	r3, #37	; 0x25
 800291a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	480f      	ldr	r0, [pc, #60]	; (8002968 <MX_RTC_Init+0xb0>)
 800292c:	f004 fad6 	bl	8006edc <HAL_RTC_SetTime>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002936:	f7ff fc6d 	bl	8002214 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800293a:	2302      	movs	r3, #2
 800293c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800293e:	2307      	movs	r3, #7
 8002940:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8002942:	2316      	movs	r3, #22
 8002944:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002946:	2324      	movs	r3, #36	; 0x24
 8002948:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_RTC_Init+0xb0>)
 8002952:	f004 fbbc 	bl	80070ce <HAL_RTC_SetDate>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800295c:	f7ff fc5a 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000a42c 	.word	0x2000a42c
 800296c:	40002800 	.word	0x40002800

08002970 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0a4      	sub	sp, #144	; 0x90
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	2288      	movs	r2, #136	; 0x88
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f00b fcd5 	bl	800e330 <memset>
  if(rtcHandle->Instance==RTC)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_RTC_MspInit+0x5c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d118      	bne.n	80029c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fef8 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80029ae:	f7ff fc31 	bl	8002214 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_RTC_MspInit+0x60>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_RTC_MspInit+0x60>)
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3790      	adds	r7, #144	; 0x90
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40002800 	.word	0x40002800
 80029d0:	40021000 	.word	0x40021000

080029d4 <prepare_date>:
#include "sd_controll.h"

#define BUFFER_SIZE 75


static void prepare_date(char* time_string) {
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af04      	add	r7, sp, #16
 80029da:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time = {0};
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef current_date = {0};
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]

	if (HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BCD) != HAL_OK){
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	2201      	movs	r2, #1
 80029f6:	4619      	mov	r1, r3
 80029f8:	480f      	ldr	r0, [pc, #60]	; (8002a38 <prepare_date+0x64>)
 80029fa:	f004 fb0c 	bl	8007016 <HAL_RTC_GetTime>
		// TODO error handle
	}

	if (HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BCD) != HAL_OK){
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	2201      	movs	r2, #1
 8002a04:	4619      	mov	r1, r3
 8002a06:	480c      	ldr	r0, [pc, #48]	; (8002a38 <prepare_date+0x64>)
 8002a08:	f004 fbe8 	bl	80071dc <HAL_RTC_GetDate>
		// TODO error handle
	}

	sprintf(time_string, "%d-%d-20%d %d:%d:%d", current_date.Date, current_date.Month, current_date.Year, current_time.Hours, current_time.Minutes, current_time.Seconds);
 8002a0c:	7abb      	ldrb	r3, [r7, #10]
 8002a0e:	461c      	mov	r4, r3
 8002a10:	7a7b      	ldrb	r3, [r7, #9]
 8002a12:	461d      	mov	r5, r3
 8002a14:	7afb      	ldrb	r3, [r7, #11]
 8002a16:	7b3a      	ldrb	r2, [r7, #12]
 8002a18:	7b79      	ldrb	r1, [r7, #13]
 8002a1a:	7bb8      	ldrb	r0, [r7, #14]
 8002a1c:	9003      	str	r0, [sp, #12]
 8002a1e:	9102      	str	r1, [sp, #8]
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	462b      	mov	r3, r5
 8002a26:	4622      	mov	r2, r4
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <prepare_date+0x68>)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f00b fb88 	bl	800e140 <siprintf>
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdb0      	pop	{r4, r5, r7, pc}
 8002a38:	2000a42c 	.word	0x2000a42c
 8002a3c:	08010494 	.word	0x08010494

08002a40 <prepare_prefix>:

static void prepare_prefix(char* buffer, float temperature) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0a0      	sub	sp, #128	; 0x80
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	ed87 0a00 	vstr	s0, [r7]
	char str[BUFFER_SIZE] = {0};
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a54:	2247      	movs	r2, #71	; 0x47
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00b fc69 	bl	800e330 <memset>
	char date[30];
	prepare_date(date);
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ffb6 	bl	80029d4 <prepare_date>

	sprintf(str, "%s\r\nTemperature: %f\r\n\n", date, temperature);
 8002a68:	6838      	ldr	r0, [r7, #0]
 8002a6a:	f7fd fd6d 	bl	8000548 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	f107 010c 	add.w	r1, r7, #12
 8002a76:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a7e:	460a      	mov	r2, r1
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <prepare_prefix+0x5c>)
 8002a82:	f00b fb5d 	bl	800e140 <siprintf>

	strcpy(buffer, str);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f00b fcce 	bl	800e42e <strcpy>
}
 8002a92:	bf00      	nop
 8002a94:	3778      	adds	r7, #120	; 0x78
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	080104a8 	.word	0x080104a8

08002aa0 <set_rtc_datatime>:


HAL_StatusTypeDef set_rtc_datatime() {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
	sTime.Hours = 11;
 8002ab4:	230b      	movs	r3, #11
 8002ab6:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 59;
 8002ab8:	233b      	movs	r3, #59	; 0x3b
 8002aba:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 55;
 8002abc:	2337      	movs	r3, #55	; 0x37
 8002abe:	71bb      	strb	r3, [r7, #6]
	sTime.TimeFormat = RTC_HOURFORMAT_24;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	71fb      	strb	r3, [r7, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

	RTC_DateTypeDef sDate = {0};
 8002acc:	2300      	movs	r3, #0
 8002ace:	603b      	str	r3, [r7, #0]
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JULY;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	707b      	strb	r3, [r7, #1]
	sDate.Date = 16;
 8002ad8:	2310      	movs	r3, #16
 8002ada:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 24;
 8002adc:	2318      	movs	r3, #24
 8002ade:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <set_rtc_datatime+0x78>)
 8002ae8:	f004 f9f8 	bl	8006edc <HAL_RTC_SetTime>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <set_rtc_datatime+0x56>
		return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00b      	b.n	8002b0e <set_rtc_datatime+0x6e>

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002af6:	463b      	mov	r3, r7
 8002af8:	2201      	movs	r2, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	4806      	ldr	r0, [pc, #24]	; (8002b18 <set_rtc_datatime+0x78>)
 8002afe:	f004 fae6 	bl	80070ce <HAL_RTC_SetDate>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <set_rtc_datatime+0x6c>
		return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <set_rtc_datatime+0x6e>

	return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000a42c 	.word	0x2000a42c

08002b1c <log_data>:


SD_Controll_Status log_data(float temperature) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b28:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8002b2c:	ed83 0a00 	vstr	s0, [r3]
	FRESULT sd_result;
	FATFS SD_FatFS;
	FIL SD_File;
	char buffer[BUFFER_SIZE] = {0};
 8002b30:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b34:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2247      	movs	r2, #71	; 0x47
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f00b fbf4 	bl	800e330 <memset>
	UINT bytes_written = 0;
 8002b48:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b4c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

	sd_result = f_mount(&SD_FatFS, "/", 1);
 8002b54:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4931      	ldr	r1, [pc, #196]	; (8002c20 <log_data+0x104>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00a f8db 	bl	800cd18 <f_mount>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (sd_result != FR_OK) {
 8002b68:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <log_data+0x58>
		return SD_MOUNT_ERROR;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e050      	b.n	8002c16 <log_data+0xfa>
	}

	sd_result = f_open(&SD_File, "temp.txt", FA_OPEN_APPEND | FA_WRITE);
 8002b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b78:	2232      	movs	r2, #50	; 0x32
 8002b7a:	492a      	ldr	r1, [pc, #168]	; (8002c24 <log_data+0x108>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00a f911 	bl	800cda4 <f_open>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (sd_result != FR_OK) {
 8002b88:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <log_data+0x78>
		return SD_FILE_OPEN_ERROR;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e040      	b.n	8002c16 <log_data+0xfa>
	}

	prepare_prefix(buffer, temperature);
 8002b94:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002b98:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	ed93 0a00 	vldr	s0, [r3]
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7ff ff4b 	bl	8002a40 <prepare_prefix>

	sd_result = f_write(&SD_File, buffer, sizeof(buffer), &bytes_written);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	f107 0110 	add.w	r1, r7, #16
 8002bb2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002bb6:	224b      	movs	r2, #75	; 0x4b
 8002bb8:	f00a fab2 	bl	800d120 <f_write>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (sd_result != FR_OK || bytes_written == 0) {
 8002bc2:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <log_data+0xbc>
 8002bca:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8002bce:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <log_data+0xc0>
		return SD_FILE_WRITE_ERROR;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	e01c      	b.n	8002c16 <log_data+0xfa>
	}

	sd_result = f_close(&SD_File);
 8002bdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002be0:	4618      	mov	r0, r3
 8002be2:	f00a fc90 	bl	800d506 <f_close>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (sd_result != FR_OK) {
 8002bec:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <log_data+0xdc>
		return SD_CLOSE_ERROR;
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e00e      	b.n	8002c16 <log_data+0xfa>
	}

	sd_result = f_mount(NULL, "/", 1);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4909      	ldr	r1, [pc, #36]	; (8002c20 <log_data+0x104>)
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f00a f88b 	bl	800cd18 <f_mount>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (sd_result != FR_OK) {
 8002c08:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <log_data+0xf8>
		return SD_DEMOUNT_ERROR;
 8002c10:	2306      	movs	r3, #6
 8002c12:	e000      	b.n	8002c16 <log_data+0xfa>
	}

	return SD_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	080104c0 	.word	0x080104c0
 8002c24:	080104c4 	.word	0x080104c4

08002c28 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <MX_SDMMC1_SD_Init+0x3c>)
 8002c30:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <MX_SDMMC1_SD_Init+0x38>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	2000a450 	.word	0x2000a450
 8002c64:	40012800 	.word	0x40012800

08002c68 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ac      	sub	sp, #176	; 0xb0
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2288      	movs	r2, #136	; 0x88
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00b fb51 	bl	800e330 <memset>
  if(sdHandle->Instance==SDMMC1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3b      	ldr	r2, [pc, #236]	; (8002d80 <HAL_SD_MspInit+0x118>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d16e      	bne.n	8002d76 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002c98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8002cae:	2314      	movs	r3, #20
 8002cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002cbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fd65 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8002cd4:	f7ff fa9e 	bl	8002214 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_SD_MspInit+0x11c>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002d20:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d44:	4619      	mov	r1, r3
 8002d46:	4810      	ldr	r0, [pc, #64]	; (8002d88 <HAL_SD_MspInit+0x120>)
 8002d48:	f001 f836 	bl	8003db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d64:	230c      	movs	r3, #12
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4806      	ldr	r0, [pc, #24]	; (8002d8c <HAL_SD_MspInit+0x124>)
 8002d72:	f001 f821 	bl	8003db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002d76:	bf00      	nop
 8002d78:	37b0      	adds	r7, #176	; 0xb0
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012800 	.word	0x40012800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00

08002d90 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <MX_SPI1_Init+0x78>)
 8002d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002daa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dde:	2207      	movs	r2, #7
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_SPI1_Init+0x74>)
 8002df0:	f005 fac0 	bl	8008374 <HAL_SPI_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002dfa:	f7ff fa0b 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000a4d4 	.word	0x2000a4d4
 8002e08:	40013000 	.word	0x40013000

08002e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_SPI_MspInit+0x108>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d16d      	bne.n	8002f0a <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e38:	6613      	str	r3, [r2, #96]	; 0x60
 8002e3a:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_SPI_MspInit+0x10c>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e86:	2305      	movs	r3, #5
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e94:	f000 ff90 	bl	8003db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481a      	ldr	r0, [pc, #104]	; (8002f1c <HAL_SPI_MspInit+0x110>)
 8002eb4:	f000 ff80 	bl	8003db8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_SPI_MspInit+0x118>)
 8002ebc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002eee:	480c      	ldr	r0, [pc, #48]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002ef0:	f000 fd6a 	bl	80039c8 <HAL_DMA_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002efa:	f7ff f98b 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
 8002f04:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_SPI_MspInit+0x114>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40013000 	.word	0x40013000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	48000400 	.word	0x48000400
 8002f20:	2000a538 	.word	0x2000a538
 8002f24:	40020030 	.word	0x40020030

08002f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_MspInit+0x44>)
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <HAL_MspInit+0x44>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_MspInit+0x44>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_MspInit+0x44>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <NMI_Handler+0x4>

08002f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler+0x4>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <MemManage_Handler+0x4>

08002f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <BusFault_Handler+0x4>

08002f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <UsageFault_Handler+0x4>

08002f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbc:	f000 fbae 	bl	800371c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <DMA1_Channel3_IRQHandler+0x10>)
 8002fca:	f000 fe15 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000a538 	.word	0x2000a538

08002fd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <TIM7_IRQHandler+0x10>)
 8002fde:	f006 f93d 	bl	800925c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000a61c 	.word	0x2000a61c

08002fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return 1;
 8002ff0:	2301      	movs	r3, #1
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_kill>:

int _kill(int pid, int sig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003006:	f00b f9e5 	bl	800e3d4 <__errno>
 800300a:	4603      	mov	r3, r0
 800300c:	2216      	movs	r2, #22
 800300e:	601a      	str	r2, [r3, #0]
  return -1;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_exit>:

void _exit (int status)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ffe7 	bl	8002ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 800302e:	e7fe      	b.n	800302e <_exit+0x12>

08003030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e00a      	b.n	8003058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003042:	f3af 8000 	nop.w
 8003046:	4601      	mov	r1, r0
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	60ba      	str	r2, [r7, #8]
 800304e:	b2ca      	uxtb	r2, r1
 8003050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	dbf0      	blt.n	8003042 <_read+0x12>
  }

  return len;
 8003060:	687b      	ldr	r3, [r7, #4]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e009      	b.n	8003090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	60ba      	str	r2, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fc73 	bl	8001970 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	dbf1      	blt.n	800307c <_write+0x12>
  }
  return len;
 8003098:	687b      	ldr	r3, [r7, #4]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_close>:

int _close(int file)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ca:	605a      	str	r2, [r3, #4]
  return 0;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_isatty>:

int _isatty(int file)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030e2:	2301      	movs	r3, #1
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <_sbrk+0x5c>)
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <_sbrk+0x60>)
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x64>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <_sbrk+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d207      	bcs.n	800314c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800313c:	f00b f94a 	bl	800e3d4 <__errno>
 8003140:	4603      	mov	r3, r0
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e009      	b.n	8003160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <_sbrk+0x64>)
 800315c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20018000 	.word	0x20018000
 800316c:	00002000 	.word	0x00002000
 8003170:	2000a580 	.word	0x2000a580
 8003174:	2000a908 	.word	0x2000a908

08003178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SystemInit+0x20>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SystemInit+0x20>)
 8003184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f00b f8c0 	bl	800e330 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b0:	463b      	mov	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41;
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031d0:	2229      	movs	r2, #41	; 0x29
 80031d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <MX_TIM2_Init+0xa4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031e0:	2301      	movs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80031f0:	2303      	movs	r3, #3
 80031f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031f4:	2300      	movs	r3, #0
 80031f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031f8:	2301      	movs	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 8003200:	2303      	movs	r3, #3
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4619      	mov	r1, r3
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <MX_TIM2_Init+0xa4>)
 800320c:	f005 fef2 	bl	8008ff4 <HAL_TIM_Encoder_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003216:	f7fe fffd 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003222:	463b      	mov	r3, r7
 8003224:	4619      	mov	r1, r3
 8003226:	4806      	ldr	r0, [pc, #24]	; (8003240 <MX_TIM2_Init+0xa4>)
 8003228:	f006 fa02 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003232:	f7fe ffef 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000a584 	.word	0x2000a584

08003244 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <MX_TIM6_Init+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <MX_TIM6_Init+0x64>)
 800325c:	224f      	movs	r2, #79	; 0x4f
 800325e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003276:	f005 fd8d 	bl	8008d94 <HAL_TIM_Base_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003280:	f7fe ffc8 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	; (80032a8 <MX_TIM6_Init+0x64>)
 8003292:	f006 f9cd 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800329c:	f7fe ffba 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	2000a5d0 	.word	0x2000a5d0
 80032ac:	40001000 	.word	0x40001000

080032b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <MX_TIM7_Init+0x68>)
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <MX_TIM7_Init+0x6c>)
 80032c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MX_TIM7_Init+0x68>)
 80032c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80032cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <MX_TIM7_Init+0x68>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <MX_TIM7_Init+0x68>)
 80032d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80032da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_TIM7_Init+0x68>)
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <MX_TIM7_Init+0x68>)
 80032e4:	f005 fd56 	bl	8008d94 <HAL_TIM_Base_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80032ee:	f7fe ff91 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4806      	ldr	r0, [pc, #24]	; (8003318 <MX_TIM7_Init+0x68>)
 8003300:	f006 f996 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800330a:	f7fe ff83 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000a61c 	.word	0x2000a61c
 800331c:	40001400 	.word	0x40001400

08003320 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d128      	bne.n	8003394 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003372:	2303      	movs	r3, #3
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003390:	f000 fd12 	bl	8003db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003394:	bf00      	nop
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIM_Base_MspInit+0x68>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10c      	bne.n	80033cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033b8:	f043 0310 	orr.w	r3, r3, #16
 80033bc:	6593      	str	r3, [r2, #88]	; 0x58
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80033ca:	e018      	b.n	80033fe <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_TIM_Base_MspInit+0x70>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_TIM_Base_MspInit+0x6c>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	210a      	movs	r1, #10
 80033f2:	2037      	movs	r0, #55	; 0x37
 80033f4:	f000 fab1 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033f8:	2037      	movs	r0, #55	; 0x37
 80033fa:	f000 faca 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40001000 	.word	0x40001000
 800340c:	40021000 	.word	0x40021000
 8003410:	40001400 	.word	0x40001400

08003414 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <MX_USART2_UART_Init+0x58>)
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <MX_USART2_UART_Init+0x5c>)
 800341c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_USART2_UART_Init+0x58>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_USART2_UART_Init+0x58>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_USART2_UART_Init+0x58>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003452:	2200      	movs	r2, #0
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_USART2_UART_Init+0x58>)
 8003458:	f006 f990 	bl	800977c <HAL_UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003462:	f7fe fed7 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000a668 	.word	0x2000a668
 8003470:	40004400 	.word	0x40004400

08003474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <MX_USART3_UART_Init+0x64>)
 800347c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 8003480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 800348e:	2200      	movs	r2, #0
 8003490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 800349a:	220c      	movs	r2, #12
 800349c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034b2:	2210      	movs	r2, #16
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_USART3_UART_Init+0x60>)
 80034c0:	f006 f9aa 	bl	8009818 <HAL_HalfDuplex_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80034ca:	f7fe fea3 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2000a6f0 	.word	0x2000a6f0
 80034d8:	40004800 	.word	0x40004800

080034dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0ae      	sub	sp, #184	; 0xb8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	2288      	movs	r2, #136	; 0x88
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00a ff17 	bl	800e330 <memset>
  if(uartHandle->Instance==USART2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_UART_MspInit+0x134>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d13c      	bne.n	8003586 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800350c:	2302      	movs	r3, #2
 800350e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003510:	2304      	movs	r3, #4
 8003512:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4618      	mov	r0, r3
 800351a:	f002 f93d 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003524:	f7fe fe76 	bl	8002214 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_UART_MspInit+0x138>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_UART_MspInit+0x138>)
 800352e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_UART_MspInit+0x138>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_UART_MspInit+0x138>)
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_UART_MspInit+0x138>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_UART_MspInit+0x138>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003558:	230c      	movs	r3, #12
 800355a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003570:	2307      	movs	r3, #7
 8003572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800357a:	4619      	mov	r1, r3
 800357c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003580:	f000 fc1a 	bl	8003db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003584:	e03f      	b.n	8003606 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_UART_MspInit+0x13c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d13a      	bne.n	8003606 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003590:	2304      	movs	r3, #4
 8003592:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003594:	2300      	movs	r3, #0
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4618      	mov	r0, r3
 800359e:	f002 f8fb 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80035a8:	f7fe fe34 	bl	8002214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b6:	6593      	str	r3, [r2, #88]	; 0x58
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	4a12      	ldr	r2, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_UART_MspInit+0x138>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035dc:	2310      	movs	r3, #16
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035e2:	2312      	movs	r3, #18
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035f4:	2307      	movs	r3, #7
 80035f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035fe:	4619      	mov	r1, r3
 8003600:	4806      	ldr	r0, [pc, #24]	; (800361c <HAL_UART_MspInit+0x140>)
 8003602:	f000 fbd9 	bl	8003db8 <HAL_GPIO_Init>
}
 8003606:	bf00      	nop
 8003608:	37b8      	adds	r7, #184	; 0xb8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40004400 	.word	0x40004400
 8003614:	40021000 	.word	0x40021000
 8003618:	40004800 	.word	0x40004800
 800361c:	48000800 	.word	0x48000800

08003620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003624:	f7ff fda8 	bl	8003178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <LoopForever+0x6>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	; (8003660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <LoopForever+0xe>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	; (800366c <LoopForever+0x16>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800364e:	f00a fec7 	bl	800e3e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003652:	f7fe fa61 	bl	8001b18 <main>

08003656 <LoopForever>:

LoopForever:
    b LoopForever
 8003656:	e7fe      	b.n	8003656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003664:	08010a0c 	.word	0x08010a0c
  ldr r2, =_sbss
 8003668:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800366c:	2000a904 	.word	0x2000a904

08003670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC1_2_IRQHandler>

08003672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367c:	2003      	movs	r0, #3
 800367e:	f000 f961 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003682:	200f      	movs	r0, #15
 8003684:	f000 f80e 	bl	80036a4 <HAL_InitTick>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	71fb      	strb	r3, [r7, #7]
 8003692:	e001      	b.n	8003698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003694:	f7ff fc48 	bl	8002f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003698:	79fb      	ldrb	r3, [r7, #7]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_InitTick+0x6c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d023      	beq.n	8003700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_InitTick+0x70>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_InitTick+0x6c>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f96d 	bl	80039ae <HAL_SYSTICK_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d809      	bhi.n	80036f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e0:	2200      	movs	r2, #0
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f000 f937 	bl	800395a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_InitTick+0x74>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e007      	b.n	8003704 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e004      	b.n	8003704 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e001      	b.n	8003704 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2000006c 	.word	0x2000006c
 8003714:	20000064 	.word	0x20000064
 8003718:	20000068 	.word	0x20000068

0800371c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000006c 	.word	0x2000006c
 8003740:	2000a778 	.word	0x2000a778

08003744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	2000a778 	.word	0x2000a778

0800375c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d005      	beq.n	8003782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_Delay+0x44>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003782:	bf00      	nop
 8003784:	f7ff ffde 	bl	8003744 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f7      	bhi.n	8003784 <HAL_Delay+0x28>
  {
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000006c 	.word	0x2000006c

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e098      	b.n	8003b0c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_DMA_Init+0x150>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d80f      	bhi.n	8003a06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_DMA_Init+0x154>)
 80039ee:	4413      	add	r3, r2
 80039f0:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_DMA_Init+0x158>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	009a      	lsls	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_DMA_Init+0x15c>)
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
 8003a04:	e00e      	b.n	8003a24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_DMA_Init+0x160>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_DMA_Init+0x158>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_DMA_Init+0x164>)
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a7e:	d039      	beq.n	8003af4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <HAL_DMA_Init+0x15c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d11a      	bne.n	8003ac0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_DMA_Init+0x168>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f003 031c 	and.w	r3, r3, #28
 8003a96:	210f      	movs	r1, #15
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	4924      	ldr	r1, [pc, #144]	; (8003b30 <HAL_DMA_Init+0x168>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_DMA_Init+0x168>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f003 031c 	and.w	r3, r3, #28
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	491d      	ldr	r1, [pc, #116]	; (8003b30 <HAL_DMA_Init+0x168>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
 8003abe:	e019      	b.n	8003af4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <HAL_DMA_Init+0x16c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 031c 	and.w	r3, r3, #28
 8003acc:	210f      	movs	r1, #15
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	4917      	ldr	r1, [pc, #92]	; (8003b34 <HAL_DMA_Init+0x16c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_DMA_Init+0x16c>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 031c 	and.w	r3, r3, #28
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	4911      	ldr	r1, [pc, #68]	; (8003b34 <HAL_DMA_Init+0x16c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40020407 	.word	0x40020407
 8003b1c:	bffdfff8 	.word	0xbffdfff8
 8003b20:	cccccccd 	.word	0xcccccccd
 8003b24:	40020000 	.word	0x40020000
 8003b28:	bffdfbf8 	.word	0xbffdfbf8
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	400200a8 	.word	0x400200a8
 8003b34:	400204a8 	.word	0x400204a8

08003b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Start_IT+0x20>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e04b      	b.n	8003bf0 <HAL_DMA_Start_IT+0xb8>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13a      	bne.n	8003be2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f8e0 	bl	8003d56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 020e 	orr.w	r2, r2, #14
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e00f      	b.n	8003bd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 020a 	orr.w	r2, r2, #10
 8003bce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e005      	b.n	8003bee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
 8003bec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 031c 	and.w	r3, r3, #28
 8003c18:	2204      	movs	r2, #4
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d026      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x7a>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d021      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f003 021c 	and.w	r2, r3, #28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2104      	movs	r1, #4
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d071      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c70:	e06c      	b.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f003 031c 	and.w	r3, r3, #28
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02e      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xec>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d029      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020a 	bic.w	r2, r2, #10
 8003cac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 021c 	and.w	r2, r3, #28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d038      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ce2:	e033      	b.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 031c 	and.w	r3, r3, #28
 8003cec:	2208      	movs	r2, #8
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d025      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 020e 	bic.w	r2, r2, #14
 8003d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f003 021c 	and.w	r2, r3, #28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
}
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 021c 	and.w	r2, r3, #28
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d108      	bne.n	8003d9a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d98:	e007      	b.n	8003daa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	e17f      	b.n	80040c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8171 	beq.w	80040c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_GPIO_Init+0x40>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d118      	bne.n	8003e98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	f003 0201 	and.w	r2, r3, #1
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d017      	beq.n	8003ed4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2203      	movs	r2, #3
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d123      	bne.n	8003f28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	08da      	lsrs	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3208      	adds	r2, #8
 8003ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	6939      	ldr	r1, [r7, #16]
 8003f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80ac 	beq.w	80040c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <HAL_GPIO_Init+0x330>)
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6e:	4a5e      	ldr	r2, [pc, #376]	; (80040e8 <HAL_GPIO_Init+0x330>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6613      	str	r3, [r2, #96]	; 0x60
 8003f76:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <HAL_GPIO_Init+0x330>)
 8003f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_GPIO_Init+0x334>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	220f      	movs	r2, #15
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fac:	d025      	beq.n	8003ffa <HAL_GPIO_Init+0x242>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4f      	ldr	r2, [pc, #316]	; (80040f0 <HAL_GPIO_Init+0x338>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01f      	beq.n	8003ff6 <HAL_GPIO_Init+0x23e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4e      	ldr	r2, [pc, #312]	; (80040f4 <HAL_GPIO_Init+0x33c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d019      	beq.n	8003ff2 <HAL_GPIO_Init+0x23a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <HAL_GPIO_Init+0x340>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_GPIO_Init+0x236>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4c      	ldr	r2, [pc, #304]	; (80040fc <HAL_GPIO_Init+0x344>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00d      	beq.n	8003fea <HAL_GPIO_Init+0x232>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4b      	ldr	r2, [pc, #300]	; (8004100 <HAL_GPIO_Init+0x348>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x22e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <HAL_GPIO_Init+0x34c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_GPIO_Init+0x22a>
 8003fde:	2306      	movs	r3, #6
 8003fe0:	e00c      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003fe2:	2307      	movs	r3, #7
 8003fe4:	e00a      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	e008      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003fea:	2304      	movs	r3, #4
 8003fec:	e006      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e004      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e002      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_GPIO_Init+0x244>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	f002 0203 	and.w	r2, r2, #3
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	4093      	lsls	r3, r2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800400c:	4937      	ldr	r1, [pc, #220]	; (80040ec <HAL_GPIO_Init+0x334>)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	089b      	lsrs	r3, r3, #2
 8004012:	3302      	adds	r3, #2
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_GPIO_Init+0x350>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43db      	mvns	r3, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4013      	ands	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800403e:	4a32      	ldr	r2, [pc, #200]	; (8004108 <HAL_GPIO_Init+0x350>)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_GPIO_Init+0x350>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <HAL_GPIO_Init+0x350>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_GPIO_Init+0x350>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_GPIO_Init+0x350>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_GPIO_Init+0x350>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_GPIO_Init+0x350>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3301      	adds	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f47f ae78 	bne.w	8003dc8 <HAL_GPIO_Init+0x10>
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	48000400 	.word	0x48000400
 80040f4:	48000800 	.word	0x48000800
 80040f8:	48000c00 	.word	0x48000c00
 80040fc:	48001000 	.word	0x48001000
 8004100:	48001400 	.word	0x48001400
 8004104:	48001800 	.word	0x48001800
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e001      	b.n	800412e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004158:	e002      	b.n	8004160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd f878 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e006      	b.n	80041f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d108      	bne.n	800420e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e007      	b.n	800421e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	f040 80fd 	bne.w	80044c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_I2C_Mem_Read+0x34>
 80042d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0f1      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x4e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0ea      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042fa:	f7ff fa23 	bl	8003744 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2319      	movs	r3, #25
 8004306:	2201      	movs	r2, #1
 8004308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f95b 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0d5      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2222      	movs	r2, #34	; 0x22
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2240      	movs	r2, #64	; 0x40
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800433c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004344:	88f8      	ldrh	r0, [r7, #6]
 8004346:	893a      	ldrh	r2, [r7, #8]
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4603      	mov	r3, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f8bf 	bl	80044d8 <I2C_RequestMemoryRead>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0ad      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2bff      	cmp	r3, #255	; 0xff
 8004374:	d90e      	bls.n	8004394 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	b2da      	uxtb	r2, r3
 8004382:	8979      	ldrh	r1, [r7, #10]
 8004384:	4b52      	ldr	r3, [pc, #328]	; (80044d0 <HAL_I2C_Mem_Read+0x22c>)
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fad5 	bl	800493c <I2C_TransferConfig>
 8004392:	e00f      	b.n	80043b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_I2C_Mem_Read+0x22c>)
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fac4 	bl	800493c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2200      	movs	r2, #0
 80043bc:	2104      	movs	r1, #4
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f902 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07c      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d034      	beq.n	8004474 <HAL_I2C_Mem_Read+0x1d0>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d130      	bne.n	8004474 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f8d3 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e04d      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2bff      	cmp	r3, #255	; 0xff
 8004434:	d90e      	bls.n	8004454 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fa75 	bl	800493c <I2C_TransferConfig>
 8004452:	e00f      	b.n	8004474 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	b2da      	uxtb	r2, r3
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa64 	bl	800493c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d19a      	bne.n	80043b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f936 	bl	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e01a      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2220      	movs	r2, #32
 8004498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_I2C_Mem_Read+0x230>)
 80044a6:	400b      	ands	r3, r1
 80044a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	80002400 	.word	0x80002400
 80044d4:	fe00e800 	.word	0xfe00e800

080044d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	4b20      	ldr	r3, [pc, #128]	; (800457c <I2C_RequestMemoryRead+0xa4>)
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fa1c 	bl	800493c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f8ac 	bl	8004666 <I2C_WaitOnTXISFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e02c      	b.n	8004572 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451e:	893b      	ldrh	r3, [r7, #8]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
 8004528:	e015      	b.n	8004556 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	b29b      	uxth	r3, r3
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f892 	bl	8004666 <I2C_WaitOnTXISFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e012      	b.n	8004572 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2200      	movs	r2, #0
 800455e:	2140      	movs	r1, #64	; 0x40
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f831 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	80002000 	.word	0x80002000

08004580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d007      	beq.n	80045bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	619a      	str	r2, [r3, #24]
  }
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d8:	e031      	b.n	800463e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d02d      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7ff f8af 	bl	8003744 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d122      	bne.n	800463e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d113      	bne.n	800463e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	429a      	cmp	r2, r3
 800465a:	d0be      	beq.n	80045da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004672:	e033      	b.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f87f 	bl	800477c <I2C_IsErrorOccurred>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e031      	b.n	80046ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d025      	beq.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004690:	f7ff f858 	bl	8003744 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11a      	bne.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d013      	beq.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e007      	b.n	80046ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d1c4      	bne.n	8004674 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004700:	e02f      	b.n	8004762 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f838 	bl	800477c <I2C_IsErrorOccurred>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02d      	b.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7ff f815 	bl	8003744 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11a      	bne.n	8004762 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b20      	cmp	r3, #32
 8004738:	d013      	beq.n	8004762 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e007      	b.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d1c8      	bne.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d068      	beq.n	800487a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2210      	movs	r2, #16
 80047ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047b0:	e049      	b.n	8004846 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d045      	beq.n	8004846 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe ffc3 	bl	8003744 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_IsErrorOccurred+0x54>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d13a      	bne.n	8004846 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f2:	d121      	bne.n	8004838 <I2C_IsErrorOccurred+0xbc>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fa:	d01d      	beq.n	8004838 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d01a      	beq.n	8004838 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004810:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004812:	f7fe ff97 	bl	8003744 <HAL_GetTick>
 8004816:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004818:	e00e      	b.n	8004838 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800481a:	f7fe ff93 	bl	8003744 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b19      	cmp	r3, #25
 8004826:	d907      	bls.n	8004838 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f043 0320 	orr.w	r3, r3, #32
 800482e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004836:	e006      	b.n	8004846 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b20      	cmp	r3, #32
 8004844:	d1e9      	bne.n	800481a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b20      	cmp	r3, #32
 8004852:	d003      	beq.n	800485c <I2C_IsErrorOccurred+0xe0>
 8004854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0aa      	beq.n	80047b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2220      	movs	r2, #32
 800486a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800489c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f043 0308 	orr.w	r3, r3, #8
 80048b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f043 0302 	orr.w	r3, r3, #2
 80048d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01c      	beq.n	800492a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff fe45 	bl	8004580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <I2C_IsErrorOccurred+0x1bc>)
 8004902:	400b      	ands	r3, r1
 8004904:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800492a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800492e:	4618      	mov	r0, r3
 8004930:	3728      	adds	r7, #40	; 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	fe00e800 	.word	0xfe00e800

0800493c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	4613      	mov	r3, r2
 800494c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800494e:	897b      	ldrh	r3, [r7, #10]
 8004950:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004954:	7a7b      	ldrb	r3, [r7, #9]
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800495c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	4313      	orrs	r3, r2
 8004966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800496a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	0d5b      	lsrs	r3, r3, #21
 8004976:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <I2C_TransferConfig+0x60>)
 800497c:	430b      	orrs	r3, r1
 800497e:	43db      	mvns	r3, r3
 8004980:	ea02 0103 	and.w	r1, r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	03ff63ff 	.word	0x03ff63ff

080049a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d138      	bne.n	8004a28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e032      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d139      	bne.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e033      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afa:	d130      	bne.n	8004b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b08:	d038      	beq.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2232      	movs	r2, #50	; 0x32
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	0c9b      	lsrs	r3, r3, #18
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b30:	e002      	b.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d102      	bne.n	8004b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f2      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d110      	bne.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e00f      	b.n	8004b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d007      	beq.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b74:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	20000064 	.word	0x20000064
 8004b94:	431bde83 	.word	0x431bde83

08004b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e3ca      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004baa:	4b97      	ldr	r3, [pc, #604]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb4:	4b94      	ldr	r3, [pc, #592]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80e4 	beq.w	8004d94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_RCC_OscConfig+0x4a>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	f040 808b 	bne.w	8004cf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f040 8087 	bne.w	8004cf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004be2:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_RCC_OscConfig+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e3a2      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_RCC_OscConfig+0x7c>
 8004c0a:	4b7f      	ldr	r3, [pc, #508]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c12:	e005      	b.n	8004c20 <HAL_RCC_OscConfig+0x88>
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d223      	bcs.n	8004c6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fd55 	bl	80056d8 <RCC_SetFlashLatencyFromMSIRange>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e383      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c38:	4b73      	ldr	r3, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a72      	ldr	r2, [pc, #456]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	f043 0308 	orr.w	r3, r3, #8
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b70      	ldr	r3, [pc, #448]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	496d      	ldr	r1, [pc, #436]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c56:	4b6c      	ldr	r3, [pc, #432]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4968      	ldr	r1, [pc, #416]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
 8004c6a:	e025      	b.n	8004cb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c6c:	4b66      	ldr	r3, [pc, #408]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c72:	f043 0308 	orr.w	r3, r3, #8
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4960      	ldr	r1, [pc, #384]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	495b      	ldr	r1, [pc, #364]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd15 	bl	80056d8 <RCC_SetFlashLatencyFromMSIRange>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e343      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb8:	f000 fc4a 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	4950      	ldr	r1, [pc, #320]	; (8004e0c <HAL_RCC_OscConfig+0x274>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	4a4e      	ldr	r2, [pc, #312]	; (8004e10 <HAL_RCC_OscConfig+0x278>)
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cd8:	4b4e      	ldr	r3, [pc, #312]	; (8004e14 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fce1 	bl	80036a4 <HAL_InitTick>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d052      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	e327      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d032      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cf8:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a42      	ldr	r2, [pc, #264]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d04:	f7fe fd1e 	bl	8003744 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d0c:	f7fe fd1a 	bl	8003744 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e310      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d1e:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4931      	ldr	r1, [pc, #196]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d48:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	492c      	ldr	r1, [pc, #176]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	e01a      	b.n	8004d94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fceb 	bl	8003744 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d72:	f7fe fce7 	bl	8003744 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e2dd      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d84:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x1da>
 8004d90:	e000      	b.n	8004d94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d074      	beq.n	8004e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d005      	beq.n	8004db2 <HAL_RCC_OscConfig+0x21a>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d10e      	bne.n	8004dca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d10b      	bne.n	8004dca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d064      	beq.n	8004e88 <HAL_RCC_OscConfig+0x2f0>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d160      	bne.n	8004e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e2ba      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x24a>
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e026      	b.n	8004e30 <HAL_RCC_OscConfig+0x298>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_OscConfig+0x280>
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a02      	ldr	r2, [pc, #8]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e014      	b.n	8004e30 <HAL_RCC_OscConfig+0x298>
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	080105ac 	.word	0x080105ac
 8004e10:	20000064 	.word	0x20000064
 8004e14:	20000068 	.word	0x20000068
 8004e18:	4ba0      	ldr	r3, [pc, #640]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a9f      	ldr	r2, [pc, #636]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b9d      	ldr	r3, [pc, #628]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a9c      	ldr	r2, [pc, #624]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fe fc84 	bl	8003744 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e40:	f7fe fc80 	bl	8003744 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e276      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e52:	4b92      	ldr	r3, [pc, #584]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x2a8>
 8004e5e:	e014      	b.n	8004e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe fc70 	bl	8003744 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fe fc6c 	bl	8003744 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e262      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e7a:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x2d0>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d060      	beq.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x310>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d119      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d116      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea8:	4b7c      	ldr	r3, [pc, #496]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x328>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e23f      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	4973      	ldr	r1, [pc, #460]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed4:	e040      	b.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d023      	beq.n	8004f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ede:	4b6f      	ldr	r3, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6e      	ldr	r2, [pc, #440]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fe fc2b 	bl	8003744 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef2:	f7fe fc27 	bl	8003744 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e21d      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f04:	4b65      	ldr	r3, [pc, #404]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	4b62      	ldr	r3, [pc, #392]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	495f      	ldr	r1, [pc, #380]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	e018      	b.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f26:	4b5d      	ldr	r3, [pc, #372]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a5c      	ldr	r2, [pc, #368]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fe fc07 	bl	8003744 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fe fc03 	bl	8003744 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1f9      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4c:	4b53      	ldr	r3, [pc, #332]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03c      	beq.n	8004fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6c:	4b4b      	ldr	r3, [pc, #300]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	4a4a      	ldr	r2, [pc, #296]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fe fbe2 	bl	8003744 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f84:	f7fe fbde 	bl	8003744 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e1d4      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f96:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCC_OscConfig+0x3ec>
 8004fa4:	e01b      	b.n	8004fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fac:	4a3b      	ldr	r2, [pc, #236]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fe fbc5 	bl	8003744 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fe fbc1 	bl	8003744 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1b7      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ef      	bne.n	8004fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80a6 	beq.w	8005138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fec:	2300      	movs	r3, #0
 8004fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10d      	bne.n	8005018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	6593      	str	r3, [r2, #88]	; 0x58
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_OscConfig+0x504>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005014:	2301      	movs	r3, #1
 8005016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_RCC_OscConfig+0x508>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d118      	bne.n	8005056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_RCC_OscConfig+0x508>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_RCC_OscConfig+0x508>)
 800502a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005030:	f7fe fb88 	bl	8003744 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005038:	f7fe fb84 	bl	8003744 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e17a      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_RCC_OscConfig+0x508>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d108      	bne.n	8005070 <HAL_RCC_OscConfig+0x4d8>
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800506e:	e029      	b.n	80050c4 <HAL_RCC_OscConfig+0x52c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b05      	cmp	r3, #5
 8005076:	d115      	bne.n	80050a4 <HAL_RCC_OscConfig+0x50c>
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCC_OscConfig+0x504>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <HAL_RCC_OscConfig+0x504>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	4a03      	ldr	r2, [pc, #12]	; (800509c <HAL_RCC_OscConfig+0x504>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005098:	e014      	b.n	80050c4 <HAL_RCC_OscConfig+0x52c>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	40007000 	.word	0x40007000
 80050a4:	4b9c      	ldr	r3, [pc, #624]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a9b      	ldr	r2, [pc, #620]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b4:	4b98      	ldr	r3, [pc, #608]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	4a97      	ldr	r2, [pc, #604]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80050bc:	f023 0304 	bic.w	r3, r3, #4
 80050c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d016      	beq.n	80050fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fe fb3a 	bl	8003744 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fe fb36 	bl	8003744 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e12a      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ea:	4b8b      	ldr	r3, [pc, #556]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ed      	beq.n	80050d4 <HAL_RCC_OscConfig+0x53c>
 80050f8:	e015      	b.n	8005126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fe fb23 	bl	8003744 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fe fb1f 	bl	8003744 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e113      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005118:	4b7f      	ldr	r3, [pc, #508]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ed      	bne.n	8005102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	4a79      	ldr	r2, [pc, #484]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005136:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80fe 	beq.w	800533e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	2b02      	cmp	r3, #2
 8005148:	f040 80d0 	bne.w	80052ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800514c:	4b72      	ldr	r3, [pc, #456]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0203 	and.w	r2, r3, #3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d130      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	3b01      	subs	r3, #1
 800516c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d127      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d11f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800518c:	2a07      	cmp	r2, #7
 800518e:	bf14      	ite	ne
 8005190:	2201      	movne	r2, #1
 8005192:	2200      	moveq	r2, #0
 8005194:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	3b01      	subs	r3, #1
 80051a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d109      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	3b01      	subs	r3, #1
 80051bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d06e      	beq.n	80052a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d069      	beq.n	800529c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051c8:	4b53      	ldr	r3, [pc, #332]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0ad      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051e4:	4b4c      	ldr	r3, [pc, #304]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a4b      	ldr	r2, [pc, #300]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051f0:	f7fe faa8 	bl	8003744 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fe faa4 	bl	8003744 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e09a      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520a:	4b43      	ldr	r3, [pc, #268]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005216:	4b40      	ldr	r3, [pc, #256]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	4b40      	ldr	r3, [pc, #256]	; (800531c <HAL_RCC_OscConfig+0x784>)
 800521c:	4013      	ands	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005226:	3a01      	subs	r2, #1
 8005228:	0112      	lsls	r2, r2, #4
 800522a:	4311      	orrs	r1, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005230:	0212      	lsls	r2, r2, #8
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005238:	0852      	lsrs	r2, r2, #1
 800523a:	3a01      	subs	r2, #1
 800523c:	0552      	lsls	r2, r2, #21
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005244:	0852      	lsrs	r2, r2, #1
 8005246:	3a01      	subs	r2, #1
 8005248:	0652      	lsls	r2, r2, #25
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005250:	0912      	lsrs	r2, r2, #4
 8005252:	0452      	lsls	r2, r2, #17
 8005254:	430a      	orrs	r2, r1
 8005256:	4930      	ldr	r1, [pc, #192]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 8005258:	4313      	orrs	r3, r2
 800525a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2d      	ldr	r2, [pc, #180]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005274:	f7fe fa66 	bl	8003744 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fe fa62 	bl	8003744 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e058      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800529a:	e050      	b.n	800533e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e04f      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a0:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d148      	bne.n	800533e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b8:	4b17      	ldr	r3, [pc, #92]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c4:	f7fe fa3e 	bl	8003744 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fe fa3a 	bl	8003744 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e030      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x734>
 80052ea:	e028      	b.n	800533e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d023      	beq.n	800533a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a08      	ldr	r2, [pc, #32]	; (8005318 <HAL_RCC_OscConfig+0x780>)
 80052f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fe:	f7fe fa21 	bl	8003744 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005304:	e00c      	b.n	8005320 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005306:	f7fe fa1d 	bl	8003744 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d905      	bls.n	8005320 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e013      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
 8005318:	40021000 	.word	0x40021000
 800531c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_OscConfig+0x7b0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ec      	bne.n	8005306 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_RCC_OscConfig+0x7b0>)
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	4905      	ldr	r1, [pc, #20]	; (8005348 <HAL_RCC_OscConfig+0x7b0>)
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_RCC_OscConfig+0x7b4>)
 8005334:	4013      	ands	r3, r2
 8005336:	60cb      	str	r3, [r1, #12]
 8005338:	e001      	b.n	800533e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	feeefffc 	.word	0xfeeefffc

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0e7      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b75      	ldr	r3, [pc, #468]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d910      	bls.n	8005394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b72      	ldr	r3, [pc, #456]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 0207 	bic.w	r2, r3, #7
 800537a:	4970      	ldr	r1, [pc, #448]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b6e      	ldr	r3, [pc, #440]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cf      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d908      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b0:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4960      	ldr	r1, [pc, #384]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04c      	beq.n	8005468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d6:	4b5a      	ldr	r3, [pc, #360]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d121      	bne.n	8005426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0a6      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d115      	bne.n	8005426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e09a      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005406:	4b4e      	ldr	r3, [pc, #312]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e08e      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005416:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e086      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f023 0203 	bic.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4943      	ldr	r1, [pc, #268]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005434:	4313      	orrs	r3, r2
 8005436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fe f984 	bl	8003744 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	e00a      	b.n	8005456 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005440:	f7fe f980 	bl	8003744 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	; 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e06e      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 020c 	and.w	r2, r3, #12
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	429a      	cmp	r2, r3
 8005466:	d1eb      	bne.n	8005440 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005480:	429a      	cmp	r2, r3
 8005482:	d208      	bcs.n	8005496 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	492b      	ldr	r1, [pc, #172]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d210      	bcs.n	80054c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 0207 	bic.w	r2, r3, #7
 80054ac:	4923      	ldr	r1, [pc, #140]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <HAL_RCC_ClockConfig+0x1ec>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e036      	b.n	8005534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4918      	ldr	r1, [pc, #96]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4910      	ldr	r1, [pc, #64]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005504:	f000 f824 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_RCC_ClockConfig+0x1f0>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	490b      	ldr	r1, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1f4>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	4a09      	ldr	r2, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1f8>)
 8005522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1fc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe f8bb 	bl	80036a4 <HAL_InitTick>
 800552e:	4603      	mov	r3, r0
 8005530:	72fb      	strb	r3, [r7, #11]

  return status;
 8005532:	7afb      	ldrb	r3, [r7, #11]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40022000 	.word	0x40022000
 8005540:	40021000 	.word	0x40021000
 8005544:	080105ac 	.word	0x080105ac
 8005548:	20000064 	.word	0x20000064
 800554c:	20000068 	.word	0x20000068

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x34>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d121      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d11e      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005584:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005590:	4b31      	ldr	r3, [pc, #196]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e005      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <HAL_RCC_GetSysClockFreq+0x10c>)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c0:	e00a      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e004      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d4:	4b23      	ldr	r3, [pc, #140]	; (8005664 <HAL_RCC_GetSysClockFreq+0x114>)
 80055d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d134      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d003      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0xac>
 80055f4:	e005      	b.n	8005602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCC_GetSysClockFreq+0x110>)
 80055f8:	617b      	str	r3, [r7, #20]
      break;
 80055fa:	e005      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_RCC_GetSysClockFreq+0x114>)
 80055fe:	617b      	str	r3, [r7, #20]
      break;
 8005600:	e002      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	617b      	str	r3, [r7, #20]
      break;
 8005606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005608:	4b13      	ldr	r3, [pc, #76]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	3301      	adds	r3, #1
 8005614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	fb03 f202 	mul.w	r2, r3, r2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	0e5b      	lsrs	r3, r3, #25
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	3301      	adds	r3, #1
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005648:	69bb      	ldr	r3, [r7, #24]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000
 800565c:	080105c4 	.word	0x080105c4
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200

08005668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_RCC_GetHCLKFreq+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000064 	.word	0x20000064

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005684:	f7ff fff0 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4904      	ldr	r1, [pc, #16]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40021000 	.word	0x40021000
 80056a8:	080105bc 	.word	0x080105bc

080056ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056b0:	f7ff ffda 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0adb      	lsrs	r3, r3, #11
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	080105bc 	.word	0x080105bc

080056d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056e4:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056f0:	f7ff f9ee 	bl	8004ad0 <HAL_PWREx_GetVoltageRange>
 80056f4:	6178      	str	r0, [r7, #20]
 80056f6:	e014      	b.n	8005722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	4a24      	ldr	r2, [pc, #144]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005702:	6593      	str	r3, [r2, #88]	; 0x58
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005710:	f7ff f9de 	bl	8004ad0 <HAL_PWREx_GetVoltageRange>
 8005714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005728:	d10b      	bne.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d919      	bls.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2ba0      	cmp	r3, #160	; 0xa0
 8005734:	d902      	bls.n	800573c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005736:	2302      	movs	r3, #2
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e013      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800573c:	2301      	movs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e010      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d902      	bls.n	800574e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005748:	2303      	movs	r3, #3
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e00a      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d102      	bne.n	800575a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005754:	2302      	movs	r3, #2
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e004      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d101      	bne.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005760:	2301      	movs	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f023 0207 	bic.w	r2, r3, #7
 800576c:	4909      	ldr	r1, [pc, #36]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005774:	4b07      	ldr	r3, [pc, #28]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	40022000 	.word	0x40022000

08005798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a0:	2300      	movs	r3, #0
 80057a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d041      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057bc:	d02a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c2:	d824      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057c8:	d008      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ce:	d81e      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d010      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057da:	e018      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057dc:	4b86      	ldr	r3, [pc, #536]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a85      	ldr	r2, [pc, #532]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e8:	e015      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f829 	bl	8006848 <RCCEx_PLLSAI1_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057fa:	e00c      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3320      	adds	r3, #32
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f914 	bl	8006a30 <RCCEx_PLLSAI2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	74fb      	strb	r3, [r7, #19]
      break;
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800581c:	4b76      	ldr	r3, [pc, #472]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582a:	4973      	ldr	r1, [pc, #460]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005832:	e001      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d041      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800584c:	d02a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800584e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005852:	d824      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005858:	d008      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800585a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800585e:	d81e      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005868:	d010      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800586a:	e018      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800586c:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005876:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005878:	e015      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f000 ffe1 	bl	8006848 <RCCEx_PLLSAI1_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800588a:	e00c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3320      	adds	r3, #32
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f8cc 	bl	8006a30 <RCCEx_PLLSAI2_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	74fb      	strb	r3, [r7, #19]
      break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80058a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ac:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ba:	494f      	ldr	r1, [pc, #316]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058c2:	e001      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80a0 	beq.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d6:	2300      	movs	r3, #0
 80058d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	4a40      	ldr	r2, [pc, #256]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fa:	6593      	str	r3, [r2, #88]	; 0x58
 80058fc:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005908:	2301      	movs	r3, #1
 800590a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800590c:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3a      	ldr	r2, [pc, #232]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005918:	f7fd ff14 	bl	8003744 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800591e:	e009      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005920:	f7fd ff10 	bl	8003744 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d902      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	74fb      	strb	r3, [r7, #19]
        break;
 8005932:	e005      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005934:	4b31      	ldr	r3, [pc, #196]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ef      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d15c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005946:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005950:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01f      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	429a      	cmp	r2, r3
 8005962:	d019      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	4a20      	ldr	r2, [pc, #128]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005980:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a2:	f7fd fecf 	bl	8003744 <HAL_GetTick>
 80059a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a8:	e00b      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fd fecb 	bl	8003744 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d902      	bls.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	74fb      	strb	r3, [r7, #19]
            break;
 80059c0:	e006      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ec      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e6:	4904      	ldr	r1, [pc, #16]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059ee:	e009      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	74bb      	strb	r3, [r7, #18]
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a04:	7c7b      	ldrb	r3, [r7, #17]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0a:	4b9e      	ldr	r3, [pc, #632]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	4a9d      	ldr	r2, [pc, #628]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a22:	4b98      	ldr	r3, [pc, #608]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	f023 0203 	bic.w	r2, r3, #3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	4994      	ldr	r1, [pc, #592]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a44:	4b8f      	ldr	r3, [pc, #572]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f023 020c 	bic.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	498c      	ldr	r1, [pc, #560]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a66:	4b87      	ldr	r3, [pc, #540]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	4983      	ldr	r1, [pc, #524]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a88:	4b7e      	ldr	r3, [pc, #504]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	497b      	ldr	r1, [pc, #492]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aaa:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab8:	4972      	ldr	r1, [pc, #456]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005acc:	4b6d      	ldr	r3, [pc, #436]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	496a      	ldr	r1, [pc, #424]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aee:	4b65      	ldr	r3, [pc, #404]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	4961      	ldr	r1, [pc, #388]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b10:	4b5c      	ldr	r3, [pc, #368]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	4959      	ldr	r1, [pc, #356]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b32:	4b54      	ldr	r3, [pc, #336]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	4950      	ldr	r1, [pc, #320]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b54:	4b4b      	ldr	r3, [pc, #300]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	4948      	ldr	r1, [pc, #288]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b76:	4b43      	ldr	r3, [pc, #268]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	493f      	ldr	r1, [pc, #252]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d028      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b98:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	4937      	ldr	r1, [pc, #220]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b32      	ldr	r3, [pc, #200]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a31      	ldr	r2, [pc, #196]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
 8005bc4:	e011      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fe36 	bl	8006848 <RCCEx_PLLSAI1_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d028      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	491f      	ldr	r1, [pc, #124]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c14:	d106      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c20:	60d3      	str	r3, [r2, #12]
 8005c22:	e011      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3304      	adds	r3, #4
 8005c32:	2101      	movs	r1, #1
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fe07 	bl	8006848 <RCCEx_PLLSAI1_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02b      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c62:	4908      	ldr	r1, [pc, #32]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c72:	d109      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a02      	ldr	r2, [pc, #8]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7e:	60d3      	str	r3, [r2, #12]
 8005c80:	e014      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c82:	bf00      	nop
 8005c84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c90:	d10c      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2101      	movs	r1, #1
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fdd5 	bl	8006848 <RCCEx_PLLSAI1_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02f      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc6:	4928      	ldr	r1, [pc, #160]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cd6:	d10d      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fdb2 	bl	8006848 <RCCEx_PLLSAI1_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d014      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	74bb      	strb	r3, [r7, #18]
 8005cf2:	e011      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3320      	adds	r3, #32
 8005d02:	2102      	movs	r1, #2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fe93 	bl	8006a30 <RCCEx_PLLSAI2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d14:	7cfb      	ldrb	r3, [r7, #19]
 8005d16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	490d      	ldr	r1, [pc, #52]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d56:	4904      	ldr	r1, [pc, #16]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000

08005d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7e:	d13e      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d80:	4bb2      	ldr	r3, [pc, #712]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d92:	d028      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9a:	f200 8542 	bhi.w	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d005      	beq.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d00e      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005dae:	f000 bd38 	b.w	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005db2:	4ba6      	ldr	r3, [pc, #664]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f040 8532 	bne.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61fb      	str	r3, [r7, #28]
      break;
 8005dc8:	f000 bd2d 	b.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dcc:	4b9f      	ldr	r3, [pc, #636]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f040 8527 	bne.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8005ddc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005de0:	61fb      	str	r3, [r7, #28]
      break;
 8005de2:	f000 bd22 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005de6:	4b99      	ldr	r3, [pc, #612]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df2:	f040 851c 	bne.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8005df6:	4b96      	ldr	r3, [pc, #600]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005df8:	61fb      	str	r3, [r7, #28]
      break;
 8005dfa:	f000 bd18 	b.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dfe:	4b93      	ldr	r3, [pc, #588]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d036      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d840      	bhi.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d003      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005e20:	e039      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e22:	4b8a      	ldr	r3, [pc, #552]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d116      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e2e:	4b87      	ldr	r3, [pc, #540]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e3a:	4b84      	ldr	r3, [pc, #528]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	e005      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e46:	4b81      	ldr	r3, [pc, #516]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	4a80      	ldr	r2, [pc, #512]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e5a:	e01f      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61bb      	str	r3, [r7, #24]
      break;
 8005e60:	e01c      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e62:	4b7a      	ldr	r3, [pc, #488]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d102      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e70:	4b79      	ldr	r3, [pc, #484]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8005e72:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e74:	e012      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
      break;
 8005e7a:	e00f      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e7c:	4b73      	ldr	r3, [pc, #460]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e8a:	4b74      	ldr	r3, [pc, #464]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e8e:	e005      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
      break;
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
      break;
 8005e9a:	bf00      	nop
    }

    switch(PeriphClk)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ea2:	f000 80dd 	beq.w	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eac:	f200 84c1 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eb6:	f000 80d3 	beq.w	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ec0:	f200 84b7 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eca:	f000 835f 	beq.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	f200 84ad 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ede:	f000 847e 	beq.w	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	f200 84a3 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	f000 82cd 	beq.w	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efc:	f200 8499 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	f000 80ab 	beq.w	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	f200 848f 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	f000 8090 	beq.w	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f24:	f200 8485 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d07f      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f36:	f200 847c 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f40:	f000 8403 	beq.w	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	f200 8472 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f54:	f000 83af 	beq.w	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f5e:	f200 8468 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f68:	f000 8379 	beq.w	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	f200 845e 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	f000 8344 	beq.w	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	f200 8456 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d84b      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 844f 	beq.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	2b1f      	cmp	r3, #31
 8005f9a:	f200 844a 	bhi.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	0800618d 	.word	0x0800618d
 8005fa8:	080061fb 	.word	0x080061fb
 8005fac:	08006833 	.word	0x08006833
 8005fb0:	0800628f 	.word	0x0800628f
 8005fb4:	08006833 	.word	0x08006833
 8005fb8:	08006833 	.word	0x08006833
 8005fbc:	08006833 	.word	0x08006833
 8005fc0:	08006315 	.word	0x08006315
 8005fc4:	08006833 	.word	0x08006833
 8005fc8:	08006833 	.word	0x08006833
 8005fcc:	08006833 	.word	0x08006833
 8005fd0:	08006833 	.word	0x08006833
 8005fd4:	08006833 	.word	0x08006833
 8005fd8:	08006833 	.word	0x08006833
 8005fdc:	08006833 	.word	0x08006833
 8005fe0:	0800638d 	.word	0x0800638d
 8005fe4:	08006833 	.word	0x08006833
 8005fe8:	08006833 	.word	0x08006833
 8005fec:	08006833 	.word	0x08006833
 8005ff0:	08006833 	.word	0x08006833
 8005ff4:	08006833 	.word	0x08006833
 8005ff8:	08006833 	.word	0x08006833
 8005ffc:	08006833 	.word	0x08006833
 8006000:	08006833 	.word	0x08006833
 8006004:	08006833 	.word	0x08006833
 8006008:	08006833 	.word	0x08006833
 800600c:	08006833 	.word	0x08006833
 8006010:	08006833 	.word	0x08006833
 8006014:	08006833 	.word	0x08006833
 8006018:	08006833 	.word	0x08006833
 800601c:	08006833 	.word	0x08006833
 8006020:	0800640f 	.word	0x0800640f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	f000 82c1 	beq.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800602c:	f000 bc01 	b.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006036:	f000 fdd9 	bl	8006bec <RCCEx_GetSAIxPeriphCLKFreq>
 800603a:	61f8      	str	r0, [r7, #28]
      break;
 800603c:	e3fa      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800603e:	69b9      	ldr	r1, [r7, #24]
 8006040:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006044:	f000 fdd2 	bl	8006bec <RCCEx_GetSAIxPeriphCLKFreq>
 8006048:	61f8      	str	r0, [r7, #28]
      break;
 800604a:	e3f3      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800604c:	40021000 	.word	0x40021000
 8006050:	0003d090 	.word	0x0003d090
 8006054:	080105c4 	.word	0x080105c4
 8006058:	00f42400 	.word	0x00f42400
 800605c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006060:	4ba9      	ldr	r3, [pc, #676]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006072:	d00c      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800607a:	d87f      	bhi.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006082:	d04e      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800608a:	d01d      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800608c:	e076      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800608e:	4b9e      	ldr	r3, [pc, #632]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d172      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800609a:	4b9b      	ldr	r3, [pc, #620]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80060a6:	4b98      	ldr	r3, [pc, #608]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	e005      	b.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80060b2:	4b95      	ldr	r3, [pc, #596]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	4a93      	ldr	r2, [pc, #588]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80060c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c4:	61fb      	str	r3, [r7, #28]
          break;
 80060c6:	e05b      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060c8:	4b8f      	ldr	r3, [pc, #572]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d4:	d156      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80060d6:	4b8c      	ldr	r3, [pc, #560]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e2:	d14f      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060e4:	4b88      	ldr	r3, [pc, #544]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ee:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	fb03 f202 	mul.w	r2, r3, r2
 80060f8:	4b83      	ldr	r3, [pc, #524]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	3301      	adds	r3, #1
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800610a:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	0d5b      	lsrs	r3, r3, #21
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	3301      	adds	r3, #1
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	61fb      	str	r3, [r7, #28]
          break;
 8006120:	e030      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006122:	4b79      	ldr	r3, [pc, #484]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612e:	d12b      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006130:	4b75      	ldr	r3, [pc, #468]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613c:	d124      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800613e:	4b72      	ldr	r3, [pc, #456]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	fb03 f202 	mul.w	r2, r3, r2
 8006152:	4b6d      	ldr	r3, [pc, #436]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	3301      	adds	r3, #1
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	0d5b      	lsrs	r3, r3, #21
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	3301      	adds	r3, #1
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	61fb      	str	r3, [r7, #28]
          break;
 800617a:	e005      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800617c:	bf00      	nop
 800617e:	e359      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006180:	bf00      	nop
 8006182:	e357      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006184:	bf00      	nop
 8006186:	e355      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006188:	bf00      	nop
        break;
 800618a:	e353      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800618c:	4b5e      	ldr	r3, [pc, #376]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d827      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061bd 	.word	0x080061bd
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061d9 	.word	0x080061d9
          frequency = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7ff fa7a 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 80061b8:	61f8      	str	r0, [r7, #28]
          break;
 80061ba:	e01d      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80061bc:	f7ff f9c8 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80061c0:	61f8      	str	r0, [r7, #28]
          break;
 80061c2:	e019      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061c4:	4b50      	ldr	r3, [pc, #320]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d10f      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80061d2:	4b4f      	ldr	r3, [pc, #316]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80061d4:	61fb      	str	r3, [r7, #28]
          break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061d8:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d107      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80061e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ea:	61fb      	str	r3, [r7, #28]
          break;
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80061ee:	bf00      	nop
 80061f0:	e320      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80061f2:	bf00      	nop
 80061f4:	e31e      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80061f6:	bf00      	nop
        break;
 80061f8:	e31c      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061fa:	4b43      	ldr	r3, [pc, #268]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006200:	f003 030c 	and.w	r3, r3, #12
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b0c      	cmp	r3, #12
 800620a:	d83a      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006249 	.word	0x08006249
 8006218:	08006283 	.word	0x08006283
 800621c:	08006283 	.word	0x08006283
 8006220:	08006283 	.word	0x08006283
 8006224:	08006251 	.word	0x08006251
 8006228:	08006283 	.word	0x08006283
 800622c:	08006283 	.word	0x08006283
 8006230:	08006283 	.word	0x08006283
 8006234:	08006259 	.word	0x08006259
 8006238:	08006283 	.word	0x08006283
 800623c:	08006283 	.word	0x08006283
 8006240:	08006283 	.word	0x08006283
 8006244:	0800626d 	.word	0x0800626d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006248:	f7ff fa1a 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800624c:	61f8      	str	r0, [r7, #28]
          break;
 800624e:	e01d      	b.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006250:	f7ff f97e 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8006254:	61f8      	str	r0, [r7, #28]
          break;
 8006256:	e019      	b.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006258:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006264:	d10f      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006266:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006268:	61fb      	str	r3, [r7, #28]
          break;
 800626a:	e00c      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800626c:	4b26      	ldr	r3, [pc, #152]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d107      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	61fb      	str	r3, [r7, #28]
          break;
 8006280:	e003      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006282:	bf00      	nop
 8006284:	e2d6      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006286:	bf00      	nop
 8006288:	e2d4      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800628a:	bf00      	nop
        break;
 800628c:	e2d2      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800628e:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d021      	beq.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b30      	cmp	r3, #48	; 0x30
 80062a4:	d829      	bhi.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d011      	beq.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d823      	bhi.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d004      	beq.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80062be:	e01c      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062c0:	f7ff f9de 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80062c4:	61f8      	str	r0, [r7, #28]
          break;
 80062c6:	e01d      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80062c8:	f7ff f942 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80062cc:	61f8      	str	r0, [r7, #28]
          break;
 80062ce:	e019      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062dc:	d10f      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80062e0:	61fb      	str	r3, [r7, #28]
          break;
 80062e2:	e00c      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d107      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	61fb      	str	r3, [r7, #28]
          break;
 80062f8:	e003      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80062fa:	bf00      	nop
 80062fc:	e29a      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80062fe:	bf00      	nop
 8006300:	e298      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006302:	bf00      	nop
        break;
 8006304:	e296      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000
 800630c:	080105c4 	.word	0x080105c4
 8006310:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006314:	4b9b      	ldr	r3, [pc, #620]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2bc0      	cmp	r3, #192	; 0xc0
 8006324:	d021      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2bc0      	cmp	r3, #192	; 0xc0
 800632a:	d829      	bhi.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d011      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d823      	bhi.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d004      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006344:	e01c      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006346:	f7ff f99b 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800634a:	61f8      	str	r0, [r7, #28]
          break;
 800634c:	e01d      	b.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800634e:	f7ff f8ff 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8006352:	61f8      	str	r0, [r7, #28]
          break;
 8006354:	e019      	b.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006356:	4b8b      	ldr	r3, [pc, #556]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d10f      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006364:	4b88      	ldr	r3, [pc, #544]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006366:	61fb      	str	r3, [r7, #28]
          break;
 8006368:	e00c      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800636a:	4b86      	ldr	r3, [pc, #536]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d107      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637c:	61fb      	str	r3, [r7, #28]
          break;
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006380:	bf00      	nop
 8006382:	e257      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006384:	bf00      	nop
 8006386:	e255      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006388:	bf00      	nop
        break;
 800638a:	e253      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800638c:	4b7d      	ldr	r3, [pc, #500]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800639e:	d025      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a6:	d82c      	bhi.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ae:	d013      	beq.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d824      	bhi.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	d004      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80063c6:	e01c      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063c8:	f7ff f95a 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80063cc:	61f8      	str	r0, [r7, #28]
          break;
 80063ce:	e01d      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80063d0:	f7ff f8be 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80063d4:	61f8      	str	r0, [r7, #28]
          break;
 80063d6:	e019      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d8:	4b6a      	ldr	r3, [pc, #424]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e4:	d10f      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80063e6:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80063e8:	61fb      	str	r3, [r7, #28]
          break;
 80063ea:	e00c      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063ec:	4b65      	ldr	r3, [pc, #404]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d107      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fe:	61fb      	str	r3, [r7, #28]
          break;
 8006400:	e003      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006402:	bf00      	nop
 8006404:	e216      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006406:	bf00      	nop
 8006408:	e214      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800640a:	bf00      	nop
        break;
 800640c:	e212      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800640e:	4b5d      	ldr	r3, [pc, #372]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006420:	d025      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006428:	d82c      	bhi.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006430:	d013      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d824      	bhi.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d004      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006448:	e01c      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800644a:	f7ff f919 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800644e:	61f8      	str	r0, [r7, #28]
          break;
 8006450:	e01d      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006452:	f7ff f87d 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8006456:	61f8      	str	r0, [r7, #28]
          break;
 8006458:	e019      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800645a:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d10f      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006468:	4b47      	ldr	r3, [pc, #284]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800646a:	61fb      	str	r3, [r7, #28]
          break;
 800646c:	e00c      	b.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800646e:	4b45      	ldr	r3, [pc, #276]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d107      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800647c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006480:	61fb      	str	r3, [r7, #28]
          break;
 8006482:	e003      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006484:	bf00      	nop
 8006486:	e1d5      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006488:	bf00      	nop
 800648a:	e1d3      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800648c:	bf00      	nop
        break;
 800648e:	e1d1      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006490:	4b3c      	ldr	r3, [pc, #240]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064a2:	d00c      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064aa:	d864      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b2:	d008      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ba:	d030      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80064bc:	e05b      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80064be:	f7ff f847 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80064c2:	61f8      	str	r0, [r7, #28]
          break;
 80064c4:	e05c      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d2:	d152      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80064d4:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d04c      	beq.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064e0:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	fb03 f202 	mul.w	r2, r3, r2
 80064f4:	4b23      	ldr	r3, [pc, #140]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	3301      	adds	r3, #1
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006506:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	0e5b      	lsrs	r3, r3, #25
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	3301      	adds	r3, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	61fb      	str	r3, [r7, #28]
          break;
 800651c:	e02d      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652a:	d128      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800652c:	4b15      	ldr	r3, [pc, #84]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d022      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006538:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006542:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	fb03 f202 	mul.w	r2, r3, r2
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	091b      	lsrs	r3, r3, #4
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	3301      	adds	r3, #1
 8006558:	fbb2 f3f3 	udiv	r3, r2, r3
 800655c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	0e5b      	lsrs	r3, r3, #25
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	3301      	adds	r3, #1
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	61fb      	str	r3, [r7, #28]
          break;
 8006574:	e003      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006576:	bf00      	nop
 8006578:	e15c      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800657a:	bf00      	nop
 800657c:	e15a      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800657e:	bf00      	nop
        break;
 8006580:	e158      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
 8006588:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800658c:	4b9d      	ldr	r3, [pc, #628]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006596:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800659e:	f7ff f885 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 80065a2:	61f8      	str	r0, [r7, #28]
        break;
 80065a4:	e146      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fe ffd3 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80065aa:	61f8      	str	r0, [r7, #28]
        break;
 80065ac:	e142      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065ae:	4b95      	ldr	r3, [pc, #596]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	d013      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c8:	d819      	bhi.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d004      	beq.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80065d8:	e011      	b.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065da:	f7ff f851 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80065de:	61f8      	str	r0, [r7, #28]
          break;
 80065e0:	e010      	b.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe ffb5 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80065e6:	61f8      	str	r0, [r7, #28]
          break;
 80065e8:	e00c      	b.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065ea:	4b86      	ldr	r3, [pc, #536]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d104      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80065f8:	4b83      	ldr	r3, [pc, #524]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80065fa:	61fb      	str	r3, [r7, #28]
          break;
 80065fc:	e001      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80065fe:	bf00      	nop
 8006600:	e118      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006602:	bf00      	nop
        break;
 8006604:	e116      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006606:	4b7f      	ldr	r3, [pc, #508]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	d013      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006620:	d819      	bhi.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800662e:	d004      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006630:	e011      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006632:	f7ff f825 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8006636:	61f8      	str	r0, [r7, #28]
          break;
 8006638:	e010      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800663a:	f7fe ff89 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800663e:	61f8      	str	r0, [r7, #28]
          break;
 8006640:	e00c      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006642:	4b70      	ldr	r3, [pc, #448]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d104      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006650:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006652:	61fb      	str	r3, [r7, #28]
          break;
 8006654:	e001      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006656:	bf00      	nop
 8006658:	e0ec      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800665a:	bf00      	nop
        break;
 800665c:	e0ea      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800665e:	4b69      	ldr	r3, [pc, #420]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006670:	d013      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006678:	d819      	bhi.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d004      	beq.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8006688:	e011      	b.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800668a:	f7fe fff9 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800668e:	61f8      	str	r0, [r7, #28]
          break;
 8006690:	e010      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006692:	f7fe ff5d 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8006696:	61f8      	str	r0, [r7, #28]
          break;
 8006698:	e00c      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800669a:	4b5a      	ldr	r3, [pc, #360]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a6:	d104      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80066a8:	4b57      	ldr	r3, [pc, #348]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80066aa:	61fb      	str	r3, [r7, #28]
          break;
 80066ac:	e001      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80066ae:	bf00      	nop
 80066b0:	e0c0      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066b2:	bf00      	nop
        break;
 80066b4:	e0be      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066c8:	d02c      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066d0:	d833      	bhi.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066d8:	d01a      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066e0:	d82b      	bhi.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80066f0:	e023      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f2:	f7fe ffc5 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80066f6:	61f8      	str	r0, [r7, #28]
          break;
 80066f8:	e026      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80066fa:	4b42      	ldr	r3, [pc, #264]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80066fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d11a      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8006708:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800670c:	61fb      	str	r3, [r7, #28]
          break;
 800670e:	e016      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006710:	4b3c      	ldr	r3, [pc, #240]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671c:	d111      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800671e:	4b3a      	ldr	r3, [pc, #232]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006720:	61fb      	str	r3, [r7, #28]
          break;
 8006722:	e00e      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006724:	4b37      	ldr	r3, [pc, #220]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d109      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	61fb      	str	r3, [r7, #28]
          break;
 8006738:	e005      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800673a:	bf00      	nop
 800673c:	e07a      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800673e:	bf00      	nop
 8006740:	e078      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006742:	bf00      	nop
 8006744:	e076      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006746:	bf00      	nop
        break;
 8006748:	e074      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800675c:	d02c      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006764:	d833      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676c:	d01a      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006774:	d82b      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006782:	d004      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006784:	e023      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006786:	f7fe ff7b 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800678a:	61f8      	str	r0, [r7, #28]
          break;
 800678c:	e026      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11a      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800679c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067a0:	61fb      	str	r3, [r7, #28]
          break;
 80067a2:	e016      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b0:	d111      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80067b4:	61fb      	str	r3, [r7, #28]
          break;
 80067b6:	e00e      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d109      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80067c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ca:	61fb      	str	r3, [r7, #28]
          break;
 80067cc:	e005      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80067ce:	bf00      	nop
 80067d0:	e030      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067d2:	bf00      	nop
 80067d4:	e02e      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067d6:	bf00      	nop
 80067d8:	e02c      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067da:	bf00      	nop
        break;
 80067dc:	e02a      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d009      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80067f8:	e012      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7fe ff41 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80067fe:	61f8      	str	r0, [r7, #28]
          break;
 8006800:	e00e      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000
 8006808:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680c:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d101      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800681c:	61fb      	str	r3, [r7, #28]
          break;
 800681e:	bf00      	nop
        break;
 8006820:	e008      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006822:	bf00      	nop
 8006824:	e006      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006832:	bf00      	nop
    }
  }

  return(frequency);
 8006834:	69fb      	ldr	r3, [r7, #28]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000
 8006844:	00f42400 	.word	0x00f42400

08006848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006856:	4b75      	ldr	r3, [pc, #468]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006862:	4b72      	ldr	r3, [pc, #456]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 0203 	and.w	r2, r3, #3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d10d      	bne.n	800688e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
       ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800687a:	4b6c      	ldr	r3, [pc, #432]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	091b      	lsrs	r3, r3, #4
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
       ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d047      	beq.n	800691e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	e044      	b.n	800691e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d018      	beq.n	80068ce <RCCEx_PLLSAI1_Config+0x86>
 800689c:	2b03      	cmp	r3, #3
 800689e:	d825      	bhi.n	80068ec <RCCEx_PLLSAI1_Config+0xa4>
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d002      	beq.n	80068aa <RCCEx_PLLSAI1_Config+0x62>
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d009      	beq.n	80068bc <RCCEx_PLLSAI1_Config+0x74>
 80068a8:	e020      	b.n	80068ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068aa:	4b60      	ldr	r3, [pc, #384]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11d      	bne.n	80068f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ba:	e01a      	b.n	80068f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068bc:	4b5b      	ldr	r3, [pc, #364]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d116      	bne.n	80068f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068cc:	e013      	b.n	80068f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ce:	4b57      	ldr	r3, [pc, #348]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068da:	4b54      	ldr	r3, [pc, #336]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068ea:	e006      	b.n	80068fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]
      break;
 80068f0:	e004      	b.n	80068fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10d      	bne.n	800691e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006902:	4b4a      	ldr	r3, [pc, #296]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6819      	ldr	r1, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	3b01      	subs	r3, #1
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	430b      	orrs	r3, r1
 8006918:	4944      	ldr	r1, [pc, #272]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800691a:	4313      	orrs	r3, r2
 800691c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d17d      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006924:	4b41      	ldr	r3, [pc, #260]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a40      	ldr	r2, [pc, #256]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800692a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800692e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006930:	f7fc ff08 	bl	8003744 <HAL_GetTick>
 8006934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006936:	e009      	b.n	800694c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006938:	f7fc ff04 	bl	8003744 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d902      	bls.n	800694c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	73fb      	strb	r3, [r7, #15]
        break;
 800694a:	e005      	b.n	8006958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800694c:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1ef      	bne.n	8006938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d160      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d111      	bne.n	8006988 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006964:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	0211      	lsls	r1, r2, #8
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68d2      	ldr	r2, [r2, #12]
 800697a:	0912      	lsrs	r2, r2, #4
 800697c:	0452      	lsls	r2, r2, #17
 800697e:	430a      	orrs	r2, r1
 8006980:	492a      	ldr	r1, [pc, #168]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006982:	4313      	orrs	r3, r2
 8006984:	610b      	str	r3, [r1, #16]
 8006986:	e027      	b.n	80069d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d112      	bne.n	80069b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800698e:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006996:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6892      	ldr	r2, [r2, #8]
 800699e:	0211      	lsls	r1, r2, #8
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6912      	ldr	r2, [r2, #16]
 80069a4:	0852      	lsrs	r2, r2, #1
 80069a6:	3a01      	subs	r2, #1
 80069a8:	0552      	lsls	r2, r2, #21
 80069aa:	430a      	orrs	r2, r1
 80069ac:	491f      	ldr	r1, [pc, #124]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]
 80069b2:	e011      	b.n	80069d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069b4:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6892      	ldr	r2, [r2, #8]
 80069c4:	0211      	lsls	r1, r2, #8
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6952      	ldr	r2, [r2, #20]
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	430a      	orrs	r2, r1
 80069d2:	4916      	ldr	r1, [pc, #88]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069d8:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80069de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fc feae 	bl	8003744 <HAL_GetTick>
 80069e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069ea:	e009      	b.n	8006a00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069ec:	f7fc feaa 	bl	8003744 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d902      	bls.n	8006a00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
          break;
 80069fe:	e005      	b.n	8006a0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ef      	beq.n	80069ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	4904      	ldr	r1, [pc, #16]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000

08006a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a3e:	4b6a      	ldr	r3, [pc, #424]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a4a:	4b67      	ldr	r3, [pc, #412]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0203 	and.w	r2, r3, #3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10d      	bne.n	8006a76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a62:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
       ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d047      	beq.n	8006b06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]
 8006a7a:	e044      	b.n	8006b06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d018      	beq.n	8006ab6 <RCCEx_PLLSAI2_Config+0x86>
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d825      	bhi.n	8006ad4 <RCCEx_PLLSAI2_Config+0xa4>
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d002      	beq.n	8006a92 <RCCEx_PLLSAI2_Config+0x62>
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d009      	beq.n	8006aa4 <RCCEx_PLLSAI2_Config+0x74>
 8006a90:	e020      	b.n	8006ad4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a92:	4b55      	ldr	r3, [pc, #340]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11d      	bne.n	8006ada <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aa2:	e01a      	b.n	8006ada <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aa4:	4b50      	ldr	r3, [pc, #320]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d116      	bne.n	8006ade <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ab4:	e013      	b.n	8006ade <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ab6:	4b4c      	ldr	r3, [pc, #304]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10f      	bne.n	8006ae2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ac2:	4b49      	ldr	r3, [pc, #292]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ad2:	e006      	b.n	8006ae2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	e004      	b.n	8006ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aea:	4b3f      	ldr	r3, [pc, #252]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	430b      	orrs	r3, r1
 8006b00:	4939      	ldr	r1, [pc, #228]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d167      	bne.n	8006bdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a35      	ldr	r2, [pc, #212]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b18:	f7fc fe14 	bl	8003744 <HAL_GetTick>
 8006b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b1e:	e009      	b.n	8006b34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b20:	f7fc fe10 	bl	8003744 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d902      	bls.n	8006b34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
        break;
 8006b32:	e005      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b34:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ef      	bne.n	8006b20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d14a      	bne.n	8006bdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d111      	bne.n	8006b70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b4c:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6892      	ldr	r2, [r2, #8]
 8006b5c:	0211      	lsls	r1, r2, #8
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68d2      	ldr	r2, [r2, #12]
 8006b62:	0912      	lsrs	r2, r2, #4
 8006b64:	0452      	lsls	r2, r2, #17
 8006b66:	430a      	orrs	r2, r1
 8006b68:	491f      	ldr	r1, [pc, #124]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	614b      	str	r3, [r1, #20]
 8006b6e:	e011      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6892      	ldr	r2, [r2, #8]
 8006b80:	0211      	lsls	r1, r2, #8
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6912      	ldr	r2, [r2, #16]
 8006b86:	0852      	lsrs	r2, r2, #1
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	0652      	lsls	r2, r2, #25
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	4916      	ldr	r1, [pc, #88]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b94:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fc fdd0 	bl	8003744 <HAL_GetTick>
 8006ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ba6:	e009      	b.n	8006bbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ba8:	f7fc fdcc 	bl	8003744 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d902      	bls.n	8006bbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8006bba:	e005      	b.n	8006bc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	4904      	ldr	r1, [pc, #16]	; (8006be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000

08006bec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b089      	sub	sp, #36	; 0x24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d10c      	bne.n	8006c24 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c0a:	4b6e      	ldr	r3, [pc, #440]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c14:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c1c:	d112      	bne.n	8006c44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c1e:	4b6a      	ldr	r3, [pc, #424]	; (8006dc8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e00f      	b.n	8006c44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2a:	d10b      	bne.n	8006c44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006c2c:	4b65      	ldr	r3, [pc, #404]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c36:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c3e:	d101      	bne.n	8006c44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006c40:	4b61      	ldr	r3, [pc, #388]	; (8006dc8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006c42:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 80b4 	bne.w	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c56:	d003      	beq.n	8006c60 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5e:	d135      	bne.n	8006ccc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006c60:	4b58      	ldr	r3, [pc, #352]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c6c:	f040 80a1 	bne.w	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006c70:	4b54      	ldr	r3, [pc, #336]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 809a 	beq.w	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c7e:	4b51      	ldr	r3, [pc, #324]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	091b      	lsrs	r3, r3, #4
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	3301      	adds	r3, #1
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c92:	4b4c      	ldr	r3, [pc, #304]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006ca4:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006cb0:	2311      	movs	r3, #17
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	e001      	b.n	8006cba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8006cb6:	2307      	movs	r3, #7
 8006cb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	fb03 f202 	mul.w	r2, r3, r2
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006cca:	e072      	b.n	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d133      	bne.n	8006d3a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006cd2:	4b3c      	ldr	r3, [pc, #240]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cde:	d169      	bne.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006ce0:	4b38      	ldr	r3, [pc, #224]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d063      	beq.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006cec:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d00:	4b30      	ldr	r3, [pc, #192]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006d12:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8006d1e:	2311      	movs	r3, #17
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e001      	b.n	8006d28 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8006d24:	2307      	movs	r3, #7
 8006d26:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	fb03 f202 	mul.w	r2, r3, r2
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e03c      	b.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d40:	d003      	beq.n	8006d4a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d48:	d134      	bne.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006d4a:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d56:	d12d      	bne.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d027      	beq.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d64:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	3301      	adds	r3, #1
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d76:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006d78:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d82:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8006d96:	2311      	movs	r3, #17
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e001      	b.n	8006da0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8006d9c:	2307      	movs	r3, #7
 8006d9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	fb03 f202 	mul.w	r2, r3, r2
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	e000      	b.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006db2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006db4:	69fb      	ldr	r3, [r7, #28]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3724      	adds	r7, #36	; 0x24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	001fff68 	.word	0x001fff68

08006dcc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d079      	beq.n	8006ed2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fb fdbc 	bl	8002970 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d058      	beq.n	8006ec0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	22ca      	movs	r2, #202	; 0xca
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2253      	movs	r2, #83	; 0x53
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa4e 	bl	80072c0 <RTC_EnterInitMode>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d127      	bne.n	8006e7e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e40:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	68d2      	ldr	r2, [r2, #12]
 8006e68:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6919      	ldr	r1, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	041a      	lsls	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa52 	bl	8007328 <RTC_ExitInitMode>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d113      	bne.n	8006eb6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0203 	bic.w	r2, r2, #3
 8006e9c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	22ff      	movs	r2, #255	; 0xff
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ebe:	e001      	b.n	8006ec4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RTC_SetTime+0x1a>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e08b      	b.n	800700e <HAL_RTC_SetTime+0x132>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	22ca      	movs	r2, #202	; 0xca
 8006f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2253      	movs	r2, #83	; 0x53
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f9d2 	bl	80072c0 <RTC_EnterInitMode>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d163      	bne.n	8006fee <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d126      	bne.n	8006f7a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fa2d 	bl	80073a4 <RTC_ByteToBcd2>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fa26 	bl	80073a4 <RTC_ByteToBcd2>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f5c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	789b      	ldrb	r3, [r3, #2]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa1e 	bl	80073a4 <RTC_ByteToBcd2>
 8006f68:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f6a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e018      	b.n	8006fac <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f9a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fa0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	78db      	ldrb	r3, [r3, #3]
 8006fa6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f99f 	bl	8007328 <RTC_ExitInitMode>
 8006fea:	4603      	mov	r3, r0
 8006fec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	22ff      	movs	r2, #255	; 0xff
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006ff6:	7cfb      	ldrb	r3, [r7, #19]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800700c:	7cfb      	ldrb	r3, [r7, #19]
}
 800700e:	4618      	mov	r0, r3
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	bd90      	pop	{r4, r7, pc}

08007016 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007044:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007048:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007054:	b2da      	uxtb	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	b2da      	uxtb	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	0d9b      	lsrs	r3, r3, #22
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d11a      	bne.n	80070c4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f9a6 	bl	80073e4 <RTC_Bcd2ToByte>
 8007098:	4603      	mov	r3, r0
 800709a:	461a      	mov	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f99d 	bl	80073e4 <RTC_Bcd2ToByte>
 80070aa:	4603      	mov	r3, r0
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	789b      	ldrb	r3, [r3, #2]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 f994 	bl	80073e4 <RTC_Bcd2ToByte>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070ce:	b590      	push	{r4, r7, lr}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_RTC_SetDate+0x1a>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e075      	b.n	80071d4 <HAL_RTC_SetDate+0x106>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10e      	bne.n	800711c <HAL_RTC_SetDate+0x4e>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b00      	cmp	r3, #0
 8007108:	d008      	beq.n	800711c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	f023 0310 	bic.w	r3, r3, #16
 8007112:	b2db      	uxtb	r3, r3
 8007114:	330a      	adds	r3, #10
 8007116:	b2da      	uxtb	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d11c      	bne.n	800715c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	78db      	ldrb	r3, [r3, #3]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 f93c 	bl	80073a4 <RTC_ByteToBcd2>
 800712c:	4603      	mov	r3, r0
 800712e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f935 	bl	80073a4 <RTC_ByteToBcd2>
 800713a:	4603      	mov	r3, r0
 800713c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800713e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	789b      	ldrb	r3, [r3, #2]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f92d 	bl	80073a4 <RTC_ByteToBcd2>
 800714a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800714c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	e00e      	b.n	800717a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	78db      	ldrb	r3, [r3, #3]
 8007160:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007168:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800716e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	22ca      	movs	r2, #202	; 0xca
 8007180:	625a      	str	r2, [r3, #36]	; 0x24
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2253      	movs	r2, #83	; 0x53
 8007188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f898 	bl	80072c0 <RTC_EnterInitMode>
 8007190:	4603      	mov	r3, r0
 8007192:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8bc 	bl	8007328 <RTC_ExitInitMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	22ff      	movs	r2, #255	; 0xff
 80071ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80071d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	0b5b      	lsrs	r3, r3, #13
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	b2da      	uxtb	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11a      	bne.n	800726c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	78db      	ldrb	r3, [r3, #3]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f8d2 	bl	80073e4 <RTC_Bcd2ToByte>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f8c9 	bl	80073e4 <RTC_Bcd2ToByte>
 8007252:	4603      	mov	r3, r0
 8007254:	461a      	mov	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	789b      	ldrb	r3, [r3, #2]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f8c0 	bl	80073e4 <RTC_Bcd2ToByte>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a0d      	ldr	r2, [pc, #52]	; (80072bc <HAL_RTC_WaitForSynchro+0x44>)
 8007286:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007288:	f7fc fa5c 	bl	8003744 <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800728e:	e009      	b.n	80072a4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007290:	f7fc fa58 	bl	8003744 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800729e:	d901      	bls.n	80072a4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e007      	b.n	80072b4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0ee      	beq.n	8007290 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	0003ff5f 	.word	0x0003ff5f

080072c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d120      	bne.n	800731c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80072e4:	f7fc fa2e 	bl	8003744 <HAL_GetTick>
 80072e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072ea:	e00d      	b.n	8007308 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80072ec:	f7fc fa2a 	bl	8003744 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fa:	d905      	bls.n	8007308 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2203      	movs	r2, #3
 8007304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <RTC_EnterInitMode+0x5c>
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d1e7      	bne.n	80072ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007334:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <RTC_ExitInitMode+0x78>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <RTC_ExitInitMode+0x78>)
 800733a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <RTC_ExitInitMode+0x78>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff ff93 	bl	8007278 <HAL_RTC_WaitForSynchro>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01e      	beq.n	8007396 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2203      	movs	r2, #3
 800735c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	e017      	b.n	8007396 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007366:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <RTC_ExitInitMode+0x78>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	4a0d      	ldr	r2, [pc, #52]	; (80073a0 <RTC_ExitInitMode+0x78>)
 800736c:	f023 0320 	bic.w	r3, r3, #32
 8007370:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ff80 	bl	8007278 <HAL_RTC_WaitForSynchro>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2203      	movs	r2, #3
 8007382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <RTC_ExitInitMode+0x78>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4a04      	ldr	r2, [pc, #16]	; (80073a0 <RTC_ExitInitMode+0x78>)
 8007390:	f043 0320 	orr.w	r3, r3, #32
 8007394:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40002800 	.word	0x40002800

080073a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80073b6:	e005      	b.n	80073c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	3b0a      	subs	r3, #10
 80073c2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	d8f6      	bhi.n	80073b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b2db      	uxtb	r3, r3
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	091b      	lsrs	r3, r3, #4
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	0092      	lsls	r2, r2, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	b2da      	uxtb	r2, r3
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	4413      	add	r3, r2
 800740a:	b2db      	uxtb	r3, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e022      	b.n	8007470 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fb fc13 	bl	8002c68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2203      	movs	r2, #3
 8007446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f814 	bl	8007478 <HAL_SD_InitCard>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e00a      	b.n	8007470 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007478:	b5b0      	push	{r4, r5, r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af04      	add	r7, sp, #16
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007480:	2300      	movs	r3, #0
 8007482:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007490:	2300      	movs	r3, #0
 8007492:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007494:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007498:	f7fe fc68 	bl	8005d6c <HAL_RCCEx_GetPeriphCLKFreq>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e07b      	b.n	80075b0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	09db      	lsrs	r3, r3, #7
 80074bc:	4a3e      	ldr	r2, [pc, #248]	; (80075b8 <HAL_SD_InitCard+0x140>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	091b      	lsrs	r3, r3, #4
 80074c4:	3b02      	subs	r3, #2
 80074c6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681d      	ldr	r5, [r3, #0]
 80074cc:	466c      	mov	r4, sp
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074da:	f107 0308 	add.w	r3, r7, #8
 80074de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074e0:	4628      	mov	r0, r5
 80074e2:	f003 f810 	bl	800a506 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f003 f84e 	bl	800a59c <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800750e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	3302      	adds	r3, #2
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	fbb2 f3f3 	udiv	r3, r2, r3
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800751c:	4a27      	ldr	r2, [pc, #156]	; (80075bc <HAL_SD_InitCard+0x144>)
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	3301      	adds	r3, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f7fc f918 	bl	800375c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fe6b 	bl	8008208 <SD_PowerON>
 8007532:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e02e      	b.n	80075b0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fd8a 	bl	800806c <SD_InitCard>
 8007558:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e01b      	b.n	80075b0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007580:	4618      	mov	r0, r3
 8007582:	f003 f89e 	bl	800a6c2 <SDMMC_CmdBlockLength>
 8007586:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00f      	beq.n	80075ae <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a0b      	ldr	r2, [pc, #44]	; (80075c0 <HAL_SD_InitCard+0x148>)
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bdb0      	pop	{r4, r5, r7, pc}
 80075b8:	014f8b59 	.word	0x014f8b59
 80075bc:	00012110 	.word	0x00012110
 80075c0:	004005ff 	.word	0x004005ff

080075c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b092      	sub	sp, #72	; 0x48
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80075d2:	f7fc f8b7 	bl	8003744 <HAL_GetTick>
 80075d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e1bd      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	f040 81b0 	bne.w	8007964 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800760a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	441a      	add	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007614:	429a      	cmp	r2, r3
 8007616:	d907      	bls.n	8007628 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e1a4      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2203      	movs	r2, #3
 800762c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	2b01      	cmp	r3, #1
 800763e:	d002      	beq.n	8007646 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	025b      	lsls	r3, r3, #9
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	025b      	lsls	r3, r3, #9
 8007650:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007652:	2390      	movs	r3, #144	; 0x90
 8007654:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007656:	2302      	movs	r3, #2
 8007658:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800765e:	2301      	movs	r3, #1
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f107 0214 	add.w	r2, r7, #20
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f002 fffc 	bl	800a66a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d90a      	bls.n	800768e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2202      	movs	r2, #2
 800767c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007684:	4618      	mov	r0, r3
 8007686:	f003 f860 	bl	800a74a <SDMMC_CmdReadMultiBlock>
 800768a:	6478      	str	r0, [r7, #68]	; 0x44
 800768c:	e009      	b.n	80076a2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800769a:	4618      	mov	r0, r3
 800769c:	f003 f833 	bl	800a706 <SDMMC_CmdReadSingleBlock>
 80076a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a7a      	ldr	r2, [pc, #488]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b6:	431a      	orrs	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e151      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80076d2:	e061      	b.n	8007798 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d03c      	beq.n	800775c <HAL_SD_ReadBlocks+0x198>
 80076e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d039      	beq.n	800775c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	643b      	str	r3, [r7, #64]	; 0x40
 80076ec:	e033      	b.n	8007756 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 ff34 	bl	800a560 <SDMMC_ReadFIFO>
 80076f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007704:	3301      	adds	r3, #1
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770a:	3b01      	subs	r3, #1
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	b2da      	uxtb	r2, r3
 8007714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007716:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771a:	3301      	adds	r3, #1
 800771c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	3b01      	subs	r3, #1
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	3301      	adds	r3, #1
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007736:	3b01      	subs	r3, #1
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	b2da      	uxtb	r2, r3
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007746:	3301      	adds	r3, #1
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	3b01      	subs	r3, #1
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007752:	3301      	adds	r3, #1
 8007754:	643b      	str	r3, [r7, #64]	; 0x40
 8007756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007758:	2b07      	cmp	r3, #7
 800775a:	d9c8      	bls.n	80076ee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800775c:	f7fb fff2 	bl	8003744 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007768:	429a      	cmp	r2, r3
 800776a:	d902      	bls.n	8007772 <HAL_SD_ReadBlocks+0x1ae>
 800776c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776e:	2b00      	cmp	r3, #0
 8007770:	d112      	bne.n	8007798 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a48      	ldr	r2, [pc, #288]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 8007778:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e0ec      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d096      	beq.n	80076d4 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d022      	beq.n	80077fa <HAL_SD_ReadBlocks+0x236>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d91f      	bls.n	80077fa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d01b      	beq.n	80077fa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f003 f826 	bl	800a818 <SDMMC_CmdStopTransfer>
 80077cc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80077ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a2f      	ldr	r2, [pc, #188]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e2:	431a      	orrs	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e0bb      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a22      	ldr	r2, [pc, #136]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f043 0208 	orr.w	r2, r3, #8
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e0a1      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d012      	beq.n	8007862 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a15      	ldr	r2, [pc, #84]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	f043 0202 	orr.w	r2, r3, #2
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e087      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d064      	beq.n	800793a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <HAL_SD_ReadBlocks+0x2d4>)
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	f043 0220 	orr.w	r2, r3, #32
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e06d      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
 8007896:	bf00      	nop
 8007898:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f002 fe5d 	bl	800a560 <SDMMC_ReadFIFO>
 80078a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	3301      	adds	r3, #1
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b8:	3b01      	subs	r3, #1
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	3301      	adds	r3, #1
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	3b01      	subs	r3, #1
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	3301      	adds	r3, #1
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e4:	3b01      	subs	r3, #1
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	3301      	adds	r3, #1
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fa:	3b01      	subs	r3, #1
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80078fe:	f7fb ff21 	bl	8003744 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800790a:	429a      	cmp	r2, r3
 800790c:	d902      	bls.n	8007914 <HAL_SD_ReadBlocks+0x350>
 800790e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007910:	2b00      	cmp	r3, #0
 8007912:	d112      	bne.n	800793a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a18      	ldr	r2, [pc, #96]	; (800797c <HAL_SD_ReadBlocks+0x3b8>)
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e01b      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_SD_ReadBlocks+0x38a>
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1a6      	bne.n	800789c <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f240 523a 	movw	r2, #1338	; 0x53a
 8007956:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	e006      	b.n	8007972 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3748      	adds	r7, #72	; 0x48
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	004005ff 	.word	0x004005ff

08007980 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b092      	sub	sp, #72	; 0x48
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800798e:	f7fb fed9 	bl	8003744 <HAL_GetTick>
 8007992:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e165      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	f040 8158 	bne.w	8007c70 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	441a      	add	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d907      	bls.n	80079e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e14c      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2203      	movs	r2, #3
 80079e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2200      	movs	r2, #0
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d002      	beq.n	8007a02 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	025b      	lsls	r3, r3, #9
 8007a00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a02:	f04f 33ff 	mov.w	r3, #4294967295
 8007a06:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	025b      	lsls	r3, r3, #9
 8007a0c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a0e:	2390      	movs	r3, #144	; 0x90
 8007a10:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f107 0218 	add.w	r2, r7, #24
 8007a26:	4611      	mov	r1, r2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f002 fe1e 	bl	800a66a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d90a      	bls.n	8007a4a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 fec6 	bl	800a7d2 <SDMMC_CmdWriteMultiBlock>
 8007a46:	6478      	str	r0, [r7, #68]	; 0x44
 8007a48:	e009      	b.n	8007a5e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 fe99 	bl	800a78e <SDMMC_CmdWriteSingleBlock>
 8007a5c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d012      	beq.n	8007a8a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a87      	ldr	r2, [pc, #540]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a72:	431a      	orrs	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0f9      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a8e:	e065      	b.n	8007b5c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d040      	beq.n	8007b20 <HAL_SD_WriteBlocks+0x1a0>
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d03d      	beq.n	8007b20 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa8:	e037      	b.n	8007b1a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	021a      	lsls	r2, r3, #8
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	3301      	adds	r3, #1
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	041a      	lsls	r2, r3, #16
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	061a      	lsls	r2, r3, #24
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	3301      	adds	r3, #1
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b00:	3b01      	subs	r3, #1
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f107 0214 	add.w	r2, r7, #20
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f002 fd33 	bl	800a57a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b16:	3301      	adds	r3, #1
 8007b18:	643b      	str	r3, [r7, #64]	; 0x40
 8007b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1c:	2b07      	cmp	r3, #7
 8007b1e:	d9c4      	bls.n	8007aaa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007b20:	f7fb fe10 	bl	8003744 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d902      	bls.n	8007b36 <HAL_SD_WriteBlocks+0x1b6>
 8007b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d112      	bne.n	8007b5c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a53      	ldr	r2, [pc, #332]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	431a      	orrs	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e090      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b62:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d092      	beq.n	8007a90 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d022      	beq.n	8007bbe <HAL_SD_WriteBlocks+0x23e>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d91f      	bls.n	8007bbe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d01b      	beq.n	8007bbe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f002 fe44 	bl	800a818 <SDMMC_CmdStopTransfer>
 8007b90:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a3a      	ldr	r2, [pc, #232]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e05f      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d012      	beq.n	8007bf2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2d      	ldr	r2, [pc, #180]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	f043 0208 	orr.w	r2, r3, #8
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e045      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d012      	beq.n	8007c26 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a20      	ldr	r2, [pc, #128]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	f043 0202 	orr.w	r2, r3, #2
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e02b      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <HAL_SD_WriteBlocks+0x308>)
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f043 0210 	orr.w	r2, r3, #16
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e011      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e006      	b.n	8007c7e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
  }
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3748      	adds	r7, #72	; 0x48
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	004005ff 	.word	0x004005ff

08007c8c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9a:	0f9b      	lsrs	r3, r3, #30
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca6:	0e9b      	lsrs	r3, r3, #26
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	0e1b      	lsrs	r3, r3, #24
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cec:	0d1b      	lsrs	r3, r3, #20
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf8:	0c1b      	lsrs	r3, r3, #16
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0a:	0bdb      	lsrs	r3, r3, #15
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1c:	0b9b      	lsrs	r3, r3, #14
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2e:	0b5b      	lsrs	r3, r3, #13
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d40:	0b1b      	lsrs	r3, r3, #12
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d163      	bne.n	8007e24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d60:	009a      	lsls	r2, r3, #2
 8007d62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d66:	4013      	ands	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007d6c:	0f92      	lsrs	r2, r2, #30
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	0edb      	lsrs	r3, r3, #27
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d8a:	0e1b      	lsrs	r3, r3, #24
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d9c:	0d5b      	lsrs	r3, r3, #21
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dae:	0c9b      	lsrs	r3, r3, #18
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc0:	0bdb      	lsrs	r3, r3, #15
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	7e1b      	ldrb	r3, [r3, #24]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	3302      	adds	r3, #2
 8007de4:	2201      	movs	r2, #1
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007dee:	fb03 f202 	mul.w	r2, r3, r2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	7a1b      	ldrb	r3, [r3, #8]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	2201      	movs	r2, #1
 8007e02:	409a      	lsls	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e10:	0a52      	lsrs	r2, r2, #9
 8007e12:	fb03 f202 	mul.w	r2, r3, r2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
 8007e22:	e031      	b.n	8007e88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d11d      	bne.n	8007e68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	3301      	adds	r3, #1
 8007e48:	029a      	lsls	r2, r3, #10
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
 8007e66:	e00f      	b.n	8007e88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a58      	ldr	r2, [pc, #352]	; (8007fd0 <HAL_SD_GetCardCSD+0x344>)
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e09d      	b.n	8007fc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8c:	0b9b      	lsrs	r3, r3, #14
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9e:	09db      	lsrs	r3, r3, #7
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	0fdb      	lsrs	r3, r3, #31
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ecc:	0f5b      	lsrs	r3, r3, #29
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	0e9b      	lsrs	r3, r3, #26
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef0:	0d9b      	lsrs	r3, r3, #22
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	0d5b      	lsrs	r3, r3, #21
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f32:	0bdb      	lsrs	r3, r3, #15
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	0b9b      	lsrs	r3, r3, #14
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5a:	0b5b      	lsrs	r3, r3, #13
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	0b1b      	lsrs	r3, r3, #12
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	0a9b      	lsrs	r3, r3, #10
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	0a1b      	lsrs	r3, r3, #8
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	004005ff 	.word	0x004005ff

08007fd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f970 	bl	8008324 <SD_SendStatus>
 8008044:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	0a5b      	lsrs	r3, r3, #9
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008062:	693b      	ldr	r3, [r7, #16]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b094      	sub	sp, #80	; 0x50
 8008070:	af04      	add	r7, sp, #16
 8008072:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008074:	2301      	movs	r3, #1
 8008076:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f002 fa9c 	bl	800a5ba <SDMMC_GetPowerState>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008088:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800808c:	e0b8      	b.n	8008200 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	2b03      	cmp	r3, #3
 8008094:	d02f      	beq.n	80080f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f002 fc83 	bl	800a9a6 <SDMMC_CmdSendCID>
 80080a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <SD_InitCard+0x40>
    {
      return errorstate;
 80080a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080aa:	e0a9      	b.n	8008200 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f002 fac6 	bl	800a644 <SDMMC_GetResponse>
 80080b8:	4602      	mov	r2, r0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2104      	movs	r1, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 fabd 	bl	800a644 <SDMMC_GetResponse>
 80080ca:	4602      	mov	r2, r0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2108      	movs	r1, #8
 80080d6:	4618      	mov	r0, r3
 80080d8:	f002 fab4 	bl	800a644 <SDMMC_GetResponse>
 80080dc:	4602      	mov	r2, r0
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	210c      	movs	r1, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 faab 	bl	800a644 <SDMMC_GetResponse>
 80080ee:	4602      	mov	r2, r0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d00d      	beq.n	800811a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f107 020e 	add.w	r2, r7, #14
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f002 fc89 	bl	800aa20 <SDMMC_CmdSetRelAdd>
 800810e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <SD_InitCard+0xae>
    {
      return errorstate;
 8008116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008118:	e072      	b.n	8008200 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	2b03      	cmp	r3, #3
 8008120:	d036      	beq.n	8008190 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008122:	89fb      	ldrh	r3, [r7, #14]
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f002 fc53 	bl	800a9e2 <SDMMC_CmdSendCSD>
 800813c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	e05b      	b.n	8008200 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f002 fa78 	bl	800a644 <SDMMC_GetResponse>
 8008154:	4602      	mov	r2, r0
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2104      	movs	r1, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f002 fa6f 	bl	800a644 <SDMMC_GetResponse>
 8008166:	4602      	mov	r2, r0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2108      	movs	r1, #8
 8008172:	4618      	mov	r0, r3
 8008174:	f002 fa66 	bl	800a644 <SDMMC_GetResponse>
 8008178:	4602      	mov	r2, r0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	210c      	movs	r1, #12
 8008184:	4618      	mov	r0, r3
 8008186:	f002 fa5d 	bl	800a644 <SDMMC_GetResponse>
 800818a:	4602      	mov	r2, r0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2104      	movs	r1, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f002 fa54 	bl	800a644 <SDMMC_GetResponse>
 800819c:	4603      	mov	r3, r0
 800819e:	0d1a      	lsrs	r2, r3, #20
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80081a4:	f107 0310 	add.w	r3, r7, #16
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff fd6e 	bl	8007c8c <HAL_SD_GetCardCSD>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081ba:	e021      	b.n	8008200 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	2200      	movs	r2, #0
 80081c8:	461c      	mov	r4, r3
 80081ca:	4615      	mov	r5, r2
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	4608      	mov	r0, r1
 80081d2:	f002 fb43 	bl	800a85c <SDMMC_CmdSelDesel>
 80081d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <SD_InitCard+0x176>
  {
    return errorstate;
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	e00e      	b.n	8008200 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	466c      	mov	r4, sp
 80081ea:	f103 0210 	add.w	r2, r3, #16
 80081ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80081f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081f4:	3304      	adds	r3, #4
 80081f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081f8:	4628      	mov	r0, r5
 80081fa:	f002 f984 	bl	800a506 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3740      	adds	r7, #64	; 0x40
 8008204:	46bd      	mov	sp, r7
 8008206:	bdb0      	pop	{r4, r5, r7, pc}

08008208 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	2300      	movs	r3, #0
 800821a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f002 fb3e 	bl	800a8a2 <SDMMC_CmdGoIdleState>
 8008226:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <SD_PowerON+0x2a>
  {
    return errorstate;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	e072      	b.n	8008318 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f002 fb51 	bl	800a8de <SDMMC_CmdOperCond>
 800823c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f002 fb27 	bl	800a8a2 <SDMMC_CmdGoIdleState>
 8008254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <SD_PowerON+0x5e>
    {
      return errorstate;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	e05b      	b.n	8008318 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826a:	2b01      	cmp	r3, #1
 800826c:	d137      	bne.n	80082de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f002 fb51 	bl	800a91c <SDMMC_CmdAppCommand>
 800827a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d02d      	beq.n	80082de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008282:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008286:	e047      	b.n	8008318 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f002 fb44 	bl	800a91c <SDMMC_CmdAppCommand>
 8008294:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	e03b      	b.n	8008318 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	491e      	ldr	r1, [pc, #120]	; (8008320 <SD_PowerON+0x118>)
 80082a6:	4618      	mov	r0, r3
 80082a8:	f002 fb5a 	bl	800a960 <SDMMC_CmdAppOperCommand>
 80082ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082b8:	e02e      	b.n	8008318 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f002 f9bf 	bl	800a644 <SDMMC_GetResponse>
 80082c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	0fdb      	lsrs	r3, r3, #31
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <SD_PowerON+0xcc>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <SD_PowerON+0xce>
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]

    count++;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d802      	bhi.n	80082ee <SD_PowerON+0xe6>
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0cc      	beq.n	8008288 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d902      	bls.n	80082fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80082f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082fc:	e00c      	b.n	8008318 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	645a      	str	r2, [r3, #68]	; 0x44
 800830e:	e002      	b.n	8008316 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	c1100000 	.word	0xc1100000

08008324 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008338:	e018      	b.n	800836c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f002 fb8b 	bl	800aa62 <SDMMC_CmdSendStatus>
 800834c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	e009      	b.n	800836c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f002 f970 	bl	800a644 <SDMMC_GetResponse>
 8008364:	4602      	mov	r2, r0
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e095      	b.n	80084b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d108      	bne.n	80083a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008396:	d009      	beq.n	80083ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	61da      	str	r2, [r3, #28]
 800839e:	e005      	b.n	80083ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fa fd20 	bl	8002e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083ec:	d902      	bls.n	80083f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	e002      	b.n	80083fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008402:	d007      	beq.n	8008414 <HAL_SPI_Init+0xa0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800840c:	d002      	beq.n	8008414 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	ea42 0103 	orr.w	r1, r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	0c1b      	lsrs	r3, r3, #16
 8008470:	f003 0204 	and.w	r2, r3, #4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008490:	ea42 0103 	orr.w	r1, r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b088      	sub	sp, #32
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_SPI_Transmit+0x22>
 80084d8:	2302      	movs	r3, #2
 80084da:	e15f      	b.n	800879c <HAL_SPI_Transmit+0x2e2>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084e4:	f7fb f92e 	bl	8003744 <HAL_GetTick>
 80084e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d002      	beq.n	8008500 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084fa:	2302      	movs	r3, #2
 80084fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084fe:	e148      	b.n	8008792 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_SPI_Transmit+0x52>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008510:	e13f      	b.n	8008792 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2203      	movs	r2, #3
 8008516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	88fa      	ldrh	r2, [r7, #6]
 800852a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d10f      	bne.n	800857e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800856c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800857c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d007      	beq.n	800859c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800859a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085a4:	d94f      	bls.n	8008646 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <HAL_SPI_Transmit+0xfa>
 80085ae:	8afb      	ldrh	r3, [r7, #22]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d142      	bne.n	800863a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	1c9a      	adds	r2, r3, #2
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085d8:	e02f      	b.n	800863a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d112      	bne.n	800860e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	881a      	ldrh	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	1c9a      	adds	r2, r3, #2
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800860c:	e015      	b.n	800863a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800860e:	f7fb f899 	bl	8003744 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d803      	bhi.n	8008626 <HAL_SPI_Transmit+0x16c>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d102      	bne.n	800862c <HAL_SPI_Transmit+0x172>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008638:	e0ab      	b.n	8008792 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1ca      	bne.n	80085da <HAL_SPI_Transmit+0x120>
 8008644:	e080      	b.n	8008748 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <HAL_SPI_Transmit+0x19a>
 800864e:	8afb      	ldrh	r3, [r7, #22]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d174      	bne.n	800873e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d912      	bls.n	8008684 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	881a      	ldrh	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b02      	subs	r3, #2
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008682:	e05c      	b.n	800873e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80086aa:	e048      	b.n	800873e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d12b      	bne.n	8008712 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d912      	bls.n	80086ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	881a      	ldrh	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	1c9a      	adds	r2, r3, #2
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b02      	subs	r3, #2
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086e8:	e029      	b.n	800873e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	330c      	adds	r3, #12
 80086f4:	7812      	ldrb	r2, [r2, #0]
 80086f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008706:	b29b      	uxth	r3, r3
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008710:	e015      	b.n	800873e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008712:	f7fb f817 	bl	8003744 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d803      	bhi.n	800872a <HAL_SPI_Transmit+0x270>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d102      	bne.n	8008730 <HAL_SPI_Transmit+0x276>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800873c:	e029      	b.n	8008792 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1b1      	bne.n	80086ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fadb 	bl	8008d08 <SPI_EndRxTxTransaction>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10a      	bne.n	800877c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008766:	2300      	movs	r3, #0
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	e003      	b.n	8008792 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800879a:	7ffb      	ldrb	r3, [r7, #31]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_SPI_Transmit_DMA+0x20>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e0d4      	b.n	800896e <HAL_SPI_Transmit_DMA+0x1ca>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d002      	beq.n	80087de <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80087d8:	2302      	movs	r3, #2
 80087da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087dc:	e0c2      	b.n	8008964 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_SPI_Transmit_DMA+0x46>
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087ee:	e0b9      	b.n	8008964 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2203      	movs	r2, #3
 80087f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883a:	d10f      	bne.n	800885c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800885a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	4a45      	ldr	r2, [pc, #276]	; (8008978 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008862:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008868:	4a44      	ldr	r2, [pc, #272]	; (800897c <HAL_SPI_Transmit_DMA+0x1d8>)
 800886a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008870:	4a43      	ldr	r2, [pc, #268]	; (8008980 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008878:	2200      	movs	r2, #0
 800887a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800888a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008894:	d82d      	bhi.n	80088f2 <HAL_SPI_Transmit_DMA+0x14e>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a0:	d127      	bne.n	80088f2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10f      	bne.n	80088d0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088ce:	e010      	b.n	80088f2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088de:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	085b      	lsrs	r3, r3, #1
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3301      	adds	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	4619      	mov	r1, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	330c      	adds	r3, #12
 8008902:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008908:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800890a:	f7fb f915 	bl	8003b38 <HAL_DMA_Start_IT>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008918:	f043 0210 	orr.w	r2, r3, #16
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008924:	e01e      	b.n	8008964 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d007      	beq.n	8008944 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0220 	orr.w	r2, r2, #32
 8008952:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0202 	orr.w	r2, r2, #2
 8008962:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	08008a6f 	.word	0x08008a6f
 800897c:	080089c9 	.word	0x080089c9
 8008980:	08008a8b 	.word	0x08008a8b

08008984 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089ba:	b2db      	uxtb	r3, r3
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089d6:	f7fa feb5 	bl	8003744 <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d03b      	beq.n	8008a62 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0220 	bic.w	r2, r2, #32
 80089f8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0202 	bic.w	r2, r2, #2
 8008a08:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	2164      	movs	r1, #100	; 0x64
 8008a0e:	6978      	ldr	r0, [r7, #20]
 8008a10:	f000 f97a 	bl	8008d08 <SPI_EndRxTxTransaction>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a1e:	f043 0220 	orr.w	r2, r3, #32
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008a5a:	6978      	ldr	r0, [r7, #20]
 8008a5c:	f7ff ff9c 	bl	8008998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a60:	e002      	b.n	8008a68 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008a62:	6978      	ldr	r0, [r7, #20]
 8008a64:	f7f8 ff9c 	bl	80019a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff ff81 	bl	8008984 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0203 	bic.w	r2, r2, #3
 8008aa6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aac:	f043 0210 	orr.w	r2, r3, #16
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff ff6b 	bl	8008998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008adc:	f7fa fe32 	bl	8003744 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4413      	add	r3, r2
 8008aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008aec:	f7fa fe2a 	bl	8003744 <HAL_GetTick>
 8008af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008af2:	4b39      	ldr	r3, [pc, #228]	; (8008bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	015b      	lsls	r3, r3, #5
 8008af8:	0d1b      	lsrs	r3, r3, #20
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	fb02 f303 	mul.w	r3, r2, r3
 8008b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b02:	e054      	b.n	8008bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d050      	beq.n	8008bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b0c:	f7fa fe1a 	bl	8003744 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d902      	bls.n	8008b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d13d      	bne.n	8008b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b3a:	d111      	bne.n	8008b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b44:	d004      	beq.n	8008b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4e:	d107      	bne.n	8008b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b68:	d10f      	bne.n	8008b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e017      	b.n	8008bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	bf0c      	ite	eq
 8008bbe:	2301      	moveq	r3, #1
 8008bc0:	2300      	movne	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d19b      	bne.n	8008b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000064 	.word	0x20000064

08008bdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008bee:	f7fa fda9 	bl	8003744 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008bfe:	f7fa fda1 	bl	8003744 <HAL_GetTick>
 8008c02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008c0c:	4b3d      	ldr	r3, [pc, #244]	; (8008d04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	00da      	lsls	r2, r3, #3
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	0d1b      	lsrs	r3, r3, #20
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c24:	e060      	b.n	8008ce8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c2c:	d107      	bne.n	8008c3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d050      	beq.n	8008ce8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c46:	f7fa fd7d 	bl	8003744 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d902      	bls.n	8008c5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d13d      	bne.n	8008cd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c74:	d111      	bne.n	8008c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c7e:	d004      	beq.n	8008c8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c88:	d107      	bne.n	8008c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca2:	d10f      	bne.n	8008cc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e010      	b.n	8008cfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d196      	bne.n	8008c26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3728      	adds	r7, #40	; 0x28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000064 	.word	0x20000064

08008d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff ff5b 	bl	8008bdc <SPI_WaitFifoStateUntilTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d30:	f043 0220 	orr.w	r2, r3, #32
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e027      	b.n	8008d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fec0 	bl	8008acc <SPI_WaitFlagStateUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d56:	f043 0220 	orr.w	r2, r3, #32
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e014      	b.n	8008d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff34 	bl	8008bdc <SPI_WaitFifoStateUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7e:	f043 0220 	orr.w	r2, r3, #32
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e000      	b.n	8008d8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e049      	b.n	8008e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fa faf0 	bl	80033a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fb6c 	bl	80094b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d001      	beq.n	8008e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e047      	b.n	8008eec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a23      	ldr	r2, [pc, #140]	; (8008ef8 <HAL_TIM_Base_Start+0xb4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01d      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e76:	d018      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1f      	ldr	r2, [pc, #124]	; (8008efc <HAL_TIM_Base_Start+0xb8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1e      	ldr	r2, [pc, #120]	; (8008f00 <HAL_TIM_Base_Start+0xbc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <HAL_TIM_Base_Start+0xc0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d009      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1b      	ldr	r2, [pc, #108]	; (8008f08 <HAL_TIM_Base_Start+0xc4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d004      	beq.n	8008eaa <HAL_TIM_Base_Start+0x66>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <HAL_TIM_Base_Start+0xc8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d115      	bne.n	8008ed6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <HAL_TIM_Base_Start+0xcc>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d015      	beq.n	8008ee8 <HAL_TIM_Base_Start+0xa4>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec2:	d011      	beq.n	8008ee8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed4:	e008      	b.n	8008ee8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e000      	b.n	8008eea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	00010007 	.word	0x00010007

08008f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d001      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e04f      	b.n	8008fcc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a23      	ldr	r2, [pc, #140]	; (8008fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d01d      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f56:	d018      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00e      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d009      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d004      	beq.n	8008f8a <HAL_TIM_Base_Start_IT+0x76>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a19      	ldr	r2, [pc, #100]	; (8008fec <HAL_TIM_Base_Start_IT+0xd8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d115      	bne.n	8008fb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b06      	cmp	r3, #6
 8008f9a:	d015      	beq.n	8008fc8 <HAL_TIM_Base_Start_IT+0xb4>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa2:	d011      	beq.n	8008fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb4:	e008      	b.n	8008fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f042 0201 	orr.w	r2, r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e000      	b.n	8008fca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	40012c00 	.word	0x40012c00
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	00010007 	.word	0x00010007

08008ff4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e097      	b.n	8009138 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d106      	bne.n	8009022 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fa f97f 	bl	8003320 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009038:	f023 0307 	bic.w	r3, r3, #7
 800903c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f000 fa31 	bl	80094b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	4313      	orrs	r3, r2
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009094:	f023 030c 	bic.w	r3, r3, #12
 8009098:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	4313      	orrs	r3, r2
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	011a      	lsls	r2, r3, #4
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	031b      	lsls	r3, r3, #12
 80090c4:	4313      	orrs	r3, r2
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80090da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	011b      	lsls	r3, r3, #4
 80090e6:	4313      	orrs	r3, r2
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009150:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009158:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009160:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009168:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d102      	bne.n	800917c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009176:	7b7b      	ldrb	r3, [r7, #13]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d001      	beq.n	8009180 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e069      	b.n	8009254 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	e031      	b.n	80091f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b04      	cmp	r3, #4
 8009196:	d110      	bne.n	80091ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800919e:	7b3b      	ldrb	r3, [r7, #12]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d001      	beq.n	80091a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e055      	b.n	8009254 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b8:	e01d      	b.n	80091f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d108      	bne.n	80091d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d105      	bne.n	80091d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091c6:	7b7b      	ldrb	r3, [r7, #13]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d102      	bne.n	80091d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091cc:	7b3b      	ldrb	r3, [r7, #12]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d001      	beq.n	80091d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e03e      	b.n	8009254 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2202      	movs	r2, #2
 80091f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_TIM_Encoder_Start+0xc4>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d008      	beq.n	8009214 <HAL_TIM_Encoder_Start+0xd4>
 8009202:	e00f      	b.n	8009224 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2201      	movs	r2, #1
 800920a:	2100      	movs	r1, #0
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f9e9 	bl	80095e4 <TIM_CCxChannelCmd>
      break;
 8009212:	e016      	b.n	8009242 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	2104      	movs	r1, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f9e1 	bl	80095e4 <TIM_CCxChannelCmd>
      break;
 8009222:	e00e      	b.n	8009242 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2201      	movs	r2, #1
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f9d9 	bl	80095e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	2104      	movs	r1, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f9d2 	bl	80095e4 <TIM_CCxChannelCmd>
      break;
 8009240:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0201 	orr.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d020      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01b      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0202 	mvn.w	r2, #2
 8009290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8e4 	bl	8009474 <HAL_TIM_IC_CaptureCallback>
 80092ac:	e005      	b.n	80092ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8d6 	bl	8009460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8e7 	bl	8009488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d020      	beq.n	800930c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01b      	beq.n	800930c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0204 	mvn.w	r2, #4
 80092dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8be 	bl	8009474 <HAL_TIM_IC_CaptureCallback>
 80092f8:	e005      	b.n	8009306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f8b0 	bl	8009460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8c1 	bl	8009488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d020      	beq.n	8009358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01b      	beq.n	8009358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0208 	mvn.w	r2, #8
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2204      	movs	r2, #4
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f898 	bl	8009474 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f88a 	bl	8009460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f89b 	bl	8009488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 0310 	and.w	r3, r3, #16
 800935e:	2b00      	cmp	r3, #0
 8009360:	d020      	beq.n	80093a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f06f 0210 	mvn.w	r2, #16
 8009374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2208      	movs	r2, #8
 800937a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f872 	bl	8009474 <HAL_TIM_IC_CaptureCallback>
 8009390:	e005      	b.n	800939e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f864 	bl	8009460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f875 	bl	8009488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0201 	mvn.w	r2, #1
 80093c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f8 fafc 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00c      	beq.n	80093ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d007      	beq.n	80093ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9b4 	bl	8009754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9ac 	bl	8009768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00c      	beq.n	8009434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800942c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f834 	bl	800949c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0220 	mvn.w	r2, #32
 8009450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f974 	bl	8009740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a40      	ldr	r2, [pc, #256]	; (80095c4 <TIM_Base_SetConfig+0x114>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d013      	beq.n	80094f0 <TIM_Base_SetConfig+0x40>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ce:	d00f      	beq.n	80094f0 <TIM_Base_SetConfig+0x40>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a3d      	ldr	r2, [pc, #244]	; (80095c8 <TIM_Base_SetConfig+0x118>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00b      	beq.n	80094f0 <TIM_Base_SetConfig+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a3c      	ldr	r2, [pc, #240]	; (80095cc <TIM_Base_SetConfig+0x11c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d007      	beq.n	80094f0 <TIM_Base_SetConfig+0x40>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a3b      	ldr	r2, [pc, #236]	; (80095d0 <TIM_Base_SetConfig+0x120>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <TIM_Base_SetConfig+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a3a      	ldr	r2, [pc, #232]	; (80095d4 <TIM_Base_SetConfig+0x124>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d108      	bne.n	8009502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2f      	ldr	r2, [pc, #188]	; (80095c4 <TIM_Base_SetConfig+0x114>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d01f      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009510:	d01b      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a2c      	ldr	r2, [pc, #176]	; (80095c8 <TIM_Base_SetConfig+0x118>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d017      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a2b      	ldr	r2, [pc, #172]	; (80095cc <TIM_Base_SetConfig+0x11c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d013      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a2a      	ldr	r2, [pc, #168]	; (80095d0 <TIM_Base_SetConfig+0x120>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d00f      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <TIM_Base_SetConfig+0x124>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00b      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <TIM_Base_SetConfig+0x128>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d007      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a27      	ldr	r2, [pc, #156]	; (80095dc <TIM_Base_SetConfig+0x12c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d003      	beq.n	800954a <TIM_Base_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a26      	ldr	r2, [pc, #152]	; (80095e0 <TIM_Base_SetConfig+0x130>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d108      	bne.n	800955c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a10      	ldr	r2, [pc, #64]	; (80095c4 <TIM_Base_SetConfig+0x114>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00f      	beq.n	80095a8 <TIM_Base_SetConfig+0xf8>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a12      	ldr	r2, [pc, #72]	; (80095d4 <TIM_Base_SetConfig+0x124>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00b      	beq.n	80095a8 <TIM_Base_SetConfig+0xf8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a11      	ldr	r2, [pc, #68]	; (80095d8 <TIM_Base_SetConfig+0x128>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d007      	beq.n	80095a8 <TIM_Base_SetConfig+0xf8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a10      	ldr	r2, [pc, #64]	; (80095dc <TIM_Base_SetConfig+0x12c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_Base_SetConfig+0xf8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a0f      	ldr	r2, [pc, #60]	; (80095e0 <TIM_Base_SetConfig+0x130>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d103      	bne.n	80095b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	615a      	str	r2, [r3, #20]
}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	40012c00 	.word	0x40012c00
 80095c8:	40000400 	.word	0x40000400
 80095cc:	40000800 	.word	0x40000800
 80095d0:	40000c00 	.word	0x40000c00
 80095d4:	40013400 	.word	0x40013400
 80095d8:	40014000 	.word	0x40014000
 80095dc:	40014400 	.word	0x40014400
 80095e0:	40014800 	.word	0x40014800

080095e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f003 031f 	and.w	r3, r3, #31
 80095f6:	2201      	movs	r2, #1
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a1a      	ldr	r2, [r3, #32]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	43db      	mvns	r3, r3
 8009606:	401a      	ands	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	431a      	orrs	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e068      	b.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a2e      	ldr	r2, [pc, #184]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d004      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a2d      	ldr	r2, [pc, #180]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d108      	bne.n	800968e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009682:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1e      	ldr	r2, [pc, #120]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d01d      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ba:	d018      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a1b      	ldr	r2, [pc, #108]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d013      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a1a      	ldr	r2, [pc, #104]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00e      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a18      	ldr	r2, [pc, #96]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d009      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a13      	ldr	r2, [pc, #76]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d004      	beq.n	80096ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a14      	ldr	r2, [pc, #80]	; (800973c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d10c      	bne.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	40012c00 	.word	0x40012c00
 800972c:	40013400 	.word	0x40013400
 8009730:	40000400 	.word	0x40000400
 8009734:	40000800 	.word	0x40000800
 8009738:	40000c00 	.word	0x40000c00
 800973c:	40014000 	.word	0x40014000

08009740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e040      	b.n	8009810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7f9 fe9c 	bl	80034dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2224      	movs	r2, #36	; 0x24
 80097a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0201 	bic.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc8a 	bl	800a0dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f9cf 	bl	8009b6c <UART_SetConfig>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e01b      	b.n	8009810 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f042 0201 	orr.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fd09 	bl	800a220 <UART_CheckIdleState>
 800980e:	4603      	mov	r3, r0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e048      	b.n	80098bc <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d106      	bne.n	8009840 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7f9 fe4e 	bl	80034dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2224      	movs	r2, #36	; 0x24
 8009844:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc3c 	bl	800a0dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f981 	bl	8009b6c <UART_SetConfig>
 800986a:	4603      	mov	r3, r0
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e023      	b.n	80098bc <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009892:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0208 	orr.w	r2, r2, #8
 80098a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0201 	orr.w	r2, r2, #1
 80098b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fcb3 	bl	800a220 <UART_CheckIdleState>
 80098ba:	4603      	mov	r3, r0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4613      	mov	r3, r2
 80098d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d178      	bne.n	80099ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_UART_Transmit+0x24>
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e071      	b.n	80099d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2221      	movs	r2, #33	; 0x21
 80098f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098fa:	f7f9 ff23 	bl	8003744 <HAL_GetTick>
 80098fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	88fa      	ldrh	r2, [r7, #6]
 8009904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009918:	d108      	bne.n	800992c <HAL_UART_Transmit+0x68>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	e003      	b.n	8009934 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009934:	e030      	b.n	8009998 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2200      	movs	r2, #0
 800993e:	2180      	movs	r1, #128	; 0x80
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fd15 	bl	800a370 <UART_WaitOnFlagUntilTimeout>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e03c      	b.n	80099d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	881a      	ldrh	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009968:	b292      	uxth	r2, r2
 800996a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	3302      	adds	r3, #2
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	e008      	b.n	8009986 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	781a      	ldrb	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	b292      	uxth	r2, r2
 800997e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1c8      	bne.n	8009936 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2200      	movs	r2, #0
 80099ac:	2140      	movs	r1, #64	; 0x40
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f000 fcde 	bl	800a370 <UART_WaitOnFlagUntilTimeout>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e005      	b.n	80099d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e000      	b.n	80099d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80099ce:	2302      	movs	r3, #2
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	; 0x28
 80099dc:	af02      	add	r7, sp, #8
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	4613      	mov	r3, r2
 80099e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	f040 80b6 	bne.w	8009b60 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <HAL_UART_Receive+0x28>
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e0ae      	b.n	8009b62 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2222      	movs	r2, #34	; 0x22
 8009a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a1a:	f7f9 fe93 	bl	8003744 <HAL_GetTick>
 8009a1e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	88fa      	ldrh	r2, [r7, #6]
 8009a24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	88fa      	ldrh	r2, [r7, #6]
 8009a2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d10e      	bne.n	8009a58 <HAL_UART_Receive+0x80>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <HAL_UART_Receive+0x76>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a4c:	e02d      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	22ff      	movs	r2, #255	; 0xff
 8009a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a56:	e028      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10d      	bne.n	8009a7c <HAL_UART_Receive+0xa4>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <HAL_UART_Receive+0x9a>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	22ff      	movs	r2, #255	; 0xff
 8009a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a70:	e01b      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	227f      	movs	r2, #127	; 0x7f
 8009a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a7a:	e016      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a84:	d10d      	bne.n	8009aa2 <HAL_UART_Receive+0xca>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <HAL_UART_Receive+0xc0>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	227f      	movs	r2, #127	; 0x7f
 8009a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a96:	e008      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	223f      	movs	r2, #63	; 0x3f
 8009a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009aa0:	e003      	b.n	8009aaa <HAL_UART_Receive+0xd2>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ab0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aba:	d108      	bne.n	8009ace <HAL_UART_Receive+0xf6>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	e003      	b.n	8009ad6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009ad6:	e037      	b.n	8009b48 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2120      	movs	r1, #32
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fc44 	bl	800a370 <UART_WaitOnFlagUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e033      	b.n	8009b62 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10c      	bne.n	8009b1a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	8a7b      	ldrh	r3, [r7, #18]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	3302      	adds	r3, #2
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	e00d      	b.n	8009b36 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	8a7b      	ldrh	r3, [r7, #18]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	4013      	ands	r3, r2
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	3301      	adds	r3, #1
 8009b34:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1c1      	bne.n	8009ad8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e000      	b.n	8009b62 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009b60:	2302      	movs	r3, #2
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b70:	b08a      	sub	sp, #40	; 0x28
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	431a      	orrs	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4ba4      	ldr	r3, [pc, #656]	; (8009e2c <UART_SetConfig+0x2c0>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	6812      	ldr	r2, [r2, #0]
 8009ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a99      	ldr	r2, [pc, #612]	; (8009e30 <UART_SetConfig+0x2c4>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d004      	beq.n	8009bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be8:	430a      	orrs	r2, r1
 8009bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a90      	ldr	r2, [pc, #576]	; (8009e34 <UART_SetConfig+0x2c8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d126      	bne.n	8009c44 <UART_SetConfig+0xd8>
 8009bf6:	4b90      	ldr	r3, [pc, #576]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d81b      	bhi.n	8009c3c <UART_SetConfig+0xd0>
 8009c04:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <UART_SetConfig+0xa0>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c2d 	.word	0x08009c2d
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c35 	.word	0x08009c35
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c22:	e116      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009c24:	2302      	movs	r3, #2
 8009c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c2a:	e112      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009c2c:	2304      	movs	r3, #4
 8009c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c32:	e10e      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009c34:	2308      	movs	r3, #8
 8009c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c3a:	e10a      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c42:	e106      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a7c      	ldr	r2, [pc, #496]	; (8009e3c <UART_SetConfig+0x2d0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d138      	bne.n	8009cc0 <UART_SetConfig+0x154>
 8009c4e:	4b7a      	ldr	r3, [pc, #488]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c54:	f003 030c 	and.w	r3, r3, #12
 8009c58:	2b0c      	cmp	r3, #12
 8009c5a:	d82d      	bhi.n	8009cb8 <UART_SetConfig+0x14c>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <UART_SetConfig+0xf8>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c99 	.word	0x08009c99
 8009c68:	08009cb9 	.word	0x08009cb9
 8009c6c:	08009cb9 	.word	0x08009cb9
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009ca9 	.word	0x08009ca9
 8009c78:	08009cb9 	.word	0x08009cb9
 8009c7c:	08009cb9 	.word	0x08009cb9
 8009c80:	08009cb9 	.word	0x08009cb9
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009cb9 	.word	0x08009cb9
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c9e:	e0d8      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ca6:	e0d4      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009ca8:	2304      	movs	r3, #4
 8009caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cae:	e0d0      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cb6:	e0cc      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009cb8:	2310      	movs	r3, #16
 8009cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cbe:	e0c8      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5e      	ldr	r2, [pc, #376]	; (8009e40 <UART_SetConfig+0x2d4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d125      	bne.n	8009d16 <UART_SetConfig+0x1aa>
 8009cca:	4b5b      	ldr	r3, [pc, #364]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d016      	beq.n	8009d06 <UART_SetConfig+0x19a>
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d818      	bhi.n	8009d0e <UART_SetConfig+0x1a2>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d00a      	beq.n	8009cf6 <UART_SetConfig+0x18a>
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d814      	bhi.n	8009d0e <UART_SetConfig+0x1a2>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <UART_SetConfig+0x182>
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d008      	beq.n	8009cfe <UART_SetConfig+0x192>
 8009cec:	e00f      	b.n	8009d0e <UART_SetConfig+0x1a2>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cf4:	e0ad      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cfc:	e0a9      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009cfe:	2304      	movs	r3, #4
 8009d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d04:	e0a5      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d06:	2308      	movs	r3, #8
 8009d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d0c:	e0a1      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d0e:	2310      	movs	r3, #16
 8009d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d14:	e09d      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a4a      	ldr	r2, [pc, #296]	; (8009e44 <UART_SetConfig+0x2d8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d125      	bne.n	8009d6c <UART_SetConfig+0x200>
 8009d20:	4b45      	ldr	r3, [pc, #276]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d2c:	d016      	beq.n	8009d5c <UART_SetConfig+0x1f0>
 8009d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8009d30:	d818      	bhi.n	8009d64 <UART_SetConfig+0x1f8>
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	d00a      	beq.n	8009d4c <UART_SetConfig+0x1e0>
 8009d36:	2b80      	cmp	r3, #128	; 0x80
 8009d38:	d814      	bhi.n	8009d64 <UART_SetConfig+0x1f8>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <UART_SetConfig+0x1d8>
 8009d3e:	2b40      	cmp	r3, #64	; 0x40
 8009d40:	d008      	beq.n	8009d54 <UART_SetConfig+0x1e8>
 8009d42:	e00f      	b.n	8009d64 <UART_SetConfig+0x1f8>
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d4a:	e082      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d52:	e07e      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d5a:	e07a      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d62:	e076      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d64:	2310      	movs	r3, #16
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d6a:	e072      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a35      	ldr	r2, [pc, #212]	; (8009e48 <UART_SetConfig+0x2dc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d12a      	bne.n	8009dcc <UART_SetConfig+0x260>
 8009d76:	4b30      	ldr	r3, [pc, #192]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d84:	d01a      	beq.n	8009dbc <UART_SetConfig+0x250>
 8009d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d8a:	d81b      	bhi.n	8009dc4 <UART_SetConfig+0x258>
 8009d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d90:	d00c      	beq.n	8009dac <UART_SetConfig+0x240>
 8009d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d96:	d815      	bhi.n	8009dc4 <UART_SetConfig+0x258>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <UART_SetConfig+0x238>
 8009d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da0:	d008      	beq.n	8009db4 <UART_SetConfig+0x248>
 8009da2:	e00f      	b.n	8009dc4 <UART_SetConfig+0x258>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009daa:	e052      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009dac:	2302      	movs	r3, #2
 8009dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009db2:	e04e      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009db4:	2304      	movs	r3, #4
 8009db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dba:	e04a      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009dbc:	2308      	movs	r3, #8
 8009dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dc2:	e046      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dca:	e042      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	; (8009e30 <UART_SetConfig+0x2c4>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d13a      	bne.n	8009e4c <UART_SetConfig+0x2e0>
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <UART_SetConfig+0x2cc>)
 8009dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009de4:	d01a      	beq.n	8009e1c <UART_SetConfig+0x2b0>
 8009de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009dea:	d81b      	bhi.n	8009e24 <UART_SetConfig+0x2b8>
 8009dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df0:	d00c      	beq.n	8009e0c <UART_SetConfig+0x2a0>
 8009df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df6:	d815      	bhi.n	8009e24 <UART_SetConfig+0x2b8>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <UART_SetConfig+0x298>
 8009dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e00:	d008      	beq.n	8009e14 <UART_SetConfig+0x2a8>
 8009e02:	e00f      	b.n	8009e24 <UART_SetConfig+0x2b8>
 8009e04:	2300      	movs	r3, #0
 8009e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e0a:	e022      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e12:	e01e      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e1a:	e01a      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e22:	e016      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e2a:	e012      	b.n	8009e52 <UART_SetConfig+0x2e6>
 8009e2c:	efff69f3 	.word	0xefff69f3
 8009e30:	40008000 	.word	0x40008000
 8009e34:	40013800 	.word	0x40013800
 8009e38:	40021000 	.word	0x40021000
 8009e3c:	40004400 	.word	0x40004400
 8009e40:	40004800 	.word	0x40004800
 8009e44:	40004c00 	.word	0x40004c00
 8009e48:	40005000 	.word	0x40005000
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a9f      	ldr	r2, [pc, #636]	; (800a0d4 <UART_SetConfig+0x568>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d17a      	bne.n	8009f52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d824      	bhi.n	8009eae <UART_SetConfig+0x342>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <UART_SetConfig+0x300>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009eaf 	.word	0x08009eaf
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009eaf 	.word	0x08009eaf
 8009e7c:	08009e9f 	.word	0x08009e9f
 8009e80:	08009eaf 	.word	0x08009eaf
 8009e84:	08009eaf 	.word	0x08009eaf
 8009e88:	08009eaf 	.word	0x08009eaf
 8009e8c:	08009ea7 	.word	0x08009ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e90:	f7fb fbf6 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8009e94:	61f8      	str	r0, [r7, #28]
        break;
 8009e96:	e010      	b.n	8009eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e98:	4b8f      	ldr	r3, [pc, #572]	; (800a0d8 <UART_SetConfig+0x56c>)
 8009e9a:	61fb      	str	r3, [r7, #28]
        break;
 8009e9c:	e00d      	b.n	8009eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e9e:	f7fb fb57 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8009ea2:	61f8      	str	r0, [r7, #28]
        break;
 8009ea4:	e009      	b.n	8009eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eaa:	61fb      	str	r3, [r7, #28]
        break;
 8009eac:	e005      	b.n	8009eba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80fb 	beq.w	800a0b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d305      	bcc.n	8009ede <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d903      	bls.n	8009ee6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ee4:	e0e8      	b.n	800a0b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	461c      	mov	r4, r3
 8009eec:	4615      	mov	r5, r2
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	022b      	lsls	r3, r5, #8
 8009ef8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009efc:	0222      	lsls	r2, r4, #8
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6849      	ldr	r1, [r1, #4]
 8009f02:	0849      	lsrs	r1, r1, #1
 8009f04:	2000      	movs	r0, #0
 8009f06:	4688      	mov	r8, r1
 8009f08:	4681      	mov	r9, r0
 8009f0a:	eb12 0a08 	adds.w	sl, r2, r8
 8009f0e:	eb43 0b09 	adc.w	fp, r3, r9
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	603b      	str	r3, [r7, #0]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	f7f6 fe90 	bl	8000c48 <__aeabi_uldivmod>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f36:	d308      	bcc.n	8009f4a <UART_SetConfig+0x3de>
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f3e:	d204      	bcs.n	8009f4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	60da      	str	r2, [r3, #12]
 8009f48:	e0b6      	b.n	800a0b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f50:	e0b2      	b.n	800a0b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f5a:	d15e      	bne.n	800a01a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d828      	bhi.n	8009fb6 <UART_SetConfig+0x44a>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x400>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f91 	.word	0x08009f91
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fa1 	.word	0x08009fa1
 8009f78:	08009fb7 	.word	0x08009fb7
 8009f7c:	08009fa7 	.word	0x08009fa7
 8009f80:	08009fb7 	.word	0x08009fb7
 8009f84:	08009fb7 	.word	0x08009fb7
 8009f88:	08009fb7 	.word	0x08009fb7
 8009f8c:	08009faf 	.word	0x08009faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f90:	f7fb fb76 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8009f94:	61f8      	str	r0, [r7, #28]
        break;
 8009f96:	e014      	b.n	8009fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f98:	f7fb fb88 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 8009f9c:	61f8      	str	r0, [r7, #28]
        break;
 8009f9e:	e010      	b.n	8009fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fa0:	4b4d      	ldr	r3, [pc, #308]	; (800a0d8 <UART_SetConfig+0x56c>)
 8009fa2:	61fb      	str	r3, [r7, #28]
        break;
 8009fa4:	e00d      	b.n	8009fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fa6:	f7fb fad3 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8009faa:	61f8      	str	r0, [r7, #28]
        break;
 8009fac:	e009      	b.n	8009fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb2:	61fb      	str	r3, [r7, #28]
        break;
 8009fb4:	e005      	b.n	8009fc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d077      	beq.n	800a0b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	005a      	lsls	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	441a      	add	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b0f      	cmp	r3, #15
 8009fe2:	d916      	bls.n	800a012 <UART_SetConfig+0x4a6>
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fea:	d212      	bcs.n	800a012 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f023 030f 	bic.w	r3, r3, #15
 8009ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	085b      	lsrs	r3, r3, #1
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f003 0307 	and.w	r3, r3, #7
 800a000:	b29a      	uxth	r2, r3
 800a002:	8afb      	ldrh	r3, [r7, #22]
 800a004:	4313      	orrs	r3, r2
 800a006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	8afa      	ldrh	r2, [r7, #22]
 800a00e:	60da      	str	r2, [r3, #12]
 800a010:	e052      	b.n	800a0b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a018:	e04e      	b.n	800a0b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a01a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a01e:	2b08      	cmp	r3, #8
 800a020:	d827      	bhi.n	800a072 <UART_SetConfig+0x506>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <UART_SetConfig+0x4bc>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a04d 	.word	0x0800a04d
 800a02c:	0800a055 	.word	0x0800a055
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	0800a073 	.word	0x0800a073
 800a038:	0800a063 	.word	0x0800a063
 800a03c:	0800a073 	.word	0x0800a073
 800a040:	0800a073 	.word	0x0800a073
 800a044:	0800a073 	.word	0x0800a073
 800a048:	0800a06b 	.word	0x0800a06b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a04c:	f7fb fb18 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800a050:	61f8      	str	r0, [r7, #28]
        break;
 800a052:	e014      	b.n	800a07e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a054:	f7fb fb2a 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 800a058:	61f8      	str	r0, [r7, #28]
        break;
 800a05a:	e010      	b.n	800a07e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a05c:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <UART_SetConfig+0x56c>)
 800a05e:	61fb      	str	r3, [r7, #28]
        break;
 800a060:	e00d      	b.n	800a07e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a062:	f7fb fa75 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800a066:	61f8      	str	r0, [r7, #28]
        break;
 800a068:	e009      	b.n	800a07e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a06e:	61fb      	str	r3, [r7, #28]
        break;
 800a070:	e005      	b.n	800a07e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a07c:	bf00      	nop
    }

    if (pclk != 0U)
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d019      	beq.n	800a0b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	085a      	lsrs	r2, r3, #1
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	441a      	add	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	fbb2 f3f3 	udiv	r3, r2, r3
 800a096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	2b0f      	cmp	r3, #15
 800a09c:	d909      	bls.n	800a0b2 <UART_SetConfig+0x546>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a4:	d205      	bcs.n	800a0b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60da      	str	r2, [r3, #12]
 800a0b0:	e002      	b.n	800a0b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a0c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3728      	adds	r7, #40	; 0x28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40008000 	.word	0x40008000
 800a0d8:	00f42400 	.word	0x00f42400

0800a0dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	f003 0308 	and.w	r3, r3, #8
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00a      	beq.n	800a106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	430a      	orrs	r2, r1
 800a126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00a      	beq.n	800a14a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00a      	beq.n	800a18e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01a      	beq.n	800a1f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1da:	d10a      	bne.n	800a1f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	605a      	str	r2, [r3, #4]
  }
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b098      	sub	sp, #96	; 0x60
 800a224:	af02      	add	r7, sp, #8
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a230:	f7f9 fa88 	bl	8003744 <HAL_GetTick>
 800a234:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0308 	and.w	r3, r3, #8
 800a240:	2b08      	cmp	r3, #8
 800a242:	d12e      	bne.n	800a2a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24c:	2200      	movs	r2, #0
 800a24e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f88c 	bl	800a370 <UART_WaitOnFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d021      	beq.n	800a2a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a272:	653b      	str	r3, [r7, #80]	; 0x50
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27c:	647b      	str	r3, [r7, #68]	; 0x44
 800a27e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e6      	bne.n	800a25e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2220      	movs	r2, #32
 800a294:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e062      	b.n	800a368 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d149      	bne.n	800a344 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f856 	bl	800a370 <UART_WaitOnFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d03c      	beq.n	800a344 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e8:	633b      	str	r3, [r7, #48]	; 0x30
 800a2ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e6      	bne.n	800a2ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0301 	bic.w	r3, r3, #1
 800a312:	64bb      	str	r3, [r7, #72]	; 0x48
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a31c:	61fa      	str	r2, [r7, #28]
 800a31e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	69b9      	ldr	r1, [r7, #24]
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	617b      	str	r3, [r7, #20]
   return(result);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e5      	bne.n	800a2fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2220      	movs	r2, #32
 800a334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e011      	b.n	800a368 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3758      	adds	r7, #88	; 0x58
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a380:	e049      	b.n	800a416 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d045      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38a:	f7f9 f9db 	bl	8003744 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	429a      	cmp	r2, r3
 800a398:	d302      	bcc.n	800a3a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e048      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0304 	and.w	r3, r3, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d031      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d110      	bne.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f838 	bl	800a43e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e029      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f0:	d111      	bne.n	800a416 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f81e 	bl	800a43e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e00f      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69da      	ldr	r2, [r3, #28]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	bf0c      	ite	eq
 800a426:	2301      	moveq	r3, #1
 800a428:	2300      	movne	r3, #0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	429a      	cmp	r2, r3
 800a432:	d0a6      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a43e:	b480      	push	{r7}
 800a440:	b095      	sub	sp, #84	; 0x54
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a464:	643b      	str	r3, [r7, #64]	; 0x40
 800a466:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a46a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e6      	bne.n	800a446 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	61fb      	str	r3, [r7, #28]
   return(result);
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d118      	bne.n	800a4e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f023 0310 	bic.w	r3, r3, #16
 800a4c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6979      	ldr	r1, [r7, #20]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e6      	bne.n	800a4b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a4fa:	bf00      	nop
 800a4fc:	3754      	adds	r7, #84	; 0x54
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a506:	b084      	sub	sp, #16
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	f107 001c 	add.w	r0, r7, #28
 800a514:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	4313      	orrs	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a524:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a528:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a52c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a530:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a534:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a544:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	b004      	add	sp, #16
 800a55e:	4770      	bx	lr

0800a560 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a56e:	4618      	mov	r0, r3
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a5aa:	2002      	movs	r0, #2
 800a5ac:	f7f9 f8d6 	bl	800375c <HAL_Delay>

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0303 	and.w	r3, r3, #3
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5f4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a5fa:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a600:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a610:	f023 030f 	bic.w	r3, r3, #15
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	b2db      	uxtb	r3, r3
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3314      	adds	r3, #20
 800a652:	461a      	mov	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	4413      	add	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a690:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a696:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a69c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0

}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b088      	sub	sp, #32
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff74 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f2:	2110      	movs	r1, #16
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f9d7 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a6fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b088      	sub	sp, #32
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a714:	2311      	movs	r3, #17
 800a716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a718:	2340      	movs	r3, #64	; 0x40
 800a71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ff52 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a732:	f241 3288 	movw	r2, #5000	; 0x1388
 800a736:	2111      	movs	r1, #17
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f9b5 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a73e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a740:	69fb      	ldr	r3, [r7, #28]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3720      	adds	r7, #32
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b088      	sub	sp, #32
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a758:	2312      	movs	r3, #18
 800a75a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ff30 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a776:	f241 3288 	movw	r2, #5000	; 0x1388
 800a77a:	2112      	movs	r1, #18
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f993 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a784:	69fb      	ldr	r3, [r7, #28]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b088      	sub	sp, #32
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a79c:	2318      	movs	r3, #24
 800a79e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ff0e 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7be:	2118      	movs	r1, #24
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f971 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b088      	sub	sp, #32
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a7e0:	2319      	movs	r3, #25
 800a7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff feec 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a7fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a802:	2119      	movs	r1, #25
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f94f 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a80c:	69fb      	ldr	r3, [r7, #28]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a824:	230c      	movs	r3, #12
 800a826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a828:	2340      	movs	r3, #64	; 0x40
 800a82a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a834:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a836:	f107 0308 	add.w	r3, r7, #8
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff feca 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a842:	4a05      	ldr	r2, [pc, #20]	; (800a858 <SDMMC_CmdStopTransfer+0x40>)
 800a844:	210c      	movs	r1, #12
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f92e 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a84c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a84e:	69fb      	ldr	r3, [r7, #28]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3720      	adds	r7, #32
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	05f5e100 	.word	0x05f5e100

0800a85c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a86c:	2307      	movs	r3, #7
 800a86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a870:	2340      	movs	r3, #64	; 0x40
 800a872:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a874:	2300      	movs	r3, #0
 800a876:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a87c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a87e:	f107 0310 	add.w	r3, r7, #16
 800a882:	4619      	mov	r1, r3
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fea6 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88e:	2107      	movs	r1, #7
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f909 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3728      	adds	r7, #40	; 0x28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c0:	f107 0308 	add.w	r3, r7, #8
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe85 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fb23 	bl	800af18 <SDMMC_GetCmdError>
 800a8d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3720      	adds	r7, #32
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b088      	sub	sp, #32
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f0:	2340      	movs	r3, #64	; 0x40
 800a8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8fe:	f107 0308 	add.w	r3, r7, #8
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fe66 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fab6 	bl	800ae7c <SDMMC_GetCmdResp7>
 800a910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a912:	69fb      	ldr	r3, [r7, #28]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3720      	adds	r7, #32
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a92a:	2337      	movs	r3, #55	; 0x37
 800a92c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a92e:	2340      	movs	r3, #64	; 0x40
 800a930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a93c:	f107 0308 	add.w	r3, r7, #8
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff fe47 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a948:	f241 3288 	movw	r2, #5000	; 0x1388
 800a94c:	2137      	movs	r1, #55	; 0x37
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8aa 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800a954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a956:	69fb      	ldr	r3, [r7, #28]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3720      	adds	r7, #32
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a974:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a976:	2329      	movs	r3, #41	; 0x29
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	2340      	movs	r3, #64	; 0x40
 800a97c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a97e:	2300      	movs	r3, #0
 800a980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a988:	f107 0308 	add.w	r3, r7, #8
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fe21 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f9bd 	bl	800ad14 <SDMMC_GetCmdResp3>
 800a99a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a99c:	69fb      	ldr	r3, [r7, #28]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3720      	adds	r7, #32
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b088      	sub	sp, #32
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9b6:	23c0      	movs	r3, #192	; 0xc0
 800a9b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9c4:	f107 0308 	add.w	r3, r7, #8
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff fe03 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f957 	bl	800ac84 <SDMMC_GetCmdResp2>
 800a9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3720      	adds	r7, #32
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b088      	sub	sp, #32
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a9f0:	2309      	movs	r3, #9
 800a9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9f4:	23c0      	movs	r3, #192	; 0xc0
 800a9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fde4 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f938 	bl	800ac84 <SDMMC_GetCmdResp2>
 800aa14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa16:	69fb      	ldr	r3, [r7, #28]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3720      	adds	r7, #32
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa32:	2340      	movs	r3, #64	; 0x40
 800aa34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa36:	2300      	movs	r3, #0
 800aa38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fdc5 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	2103      	movs	r1, #3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f99d 	bl	800ad90 <SDMMC_GetCmdResp6>
 800aa56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa58:	69fb      	ldr	r3, [r7, #28]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3720      	adds	r7, #32
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b088      	sub	sp, #32
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa70:	230d      	movs	r3, #13
 800aa72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa74:	2340      	movs	r3, #64	; 0x40
 800aa76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fda4 	bl	800a5d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aa8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa92:	210d      	movs	r1, #13
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f807 	bl	800aaa8 <SDMMC_GetCmdResp1>
 800aa9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3720      	adds	r7, #32
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	460b      	mov	r3, r1
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aab6:	4b70      	ldr	r3, [pc, #448]	; (800ac78 <SDMMC_GetCmdResp1+0x1d0>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a70      	ldr	r2, [pc, #448]	; (800ac7c <SDMMC_GetCmdResp1+0x1d4>)
 800aabc:	fba2 2303 	umull	r2, r3, r2, r3
 800aac0:	0a5a      	lsrs	r2, r3, #9
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	fb02 f303 	mul.w	r3, r2, r3
 800aac8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	61fa      	str	r2, [r7, #28]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aad8:	e0c9      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aade:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0ef      	beq.n	800aaca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1ea      	bne.n	800aaca <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d004      	beq.n	800ab0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2204      	movs	r2, #4
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab06:	2304      	movs	r3, #4
 800ab08:	e0b1      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e0a6      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	22c5      	movs	r2, #197	; 0xc5
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff fd7f 	bl	800a62a <SDMMC_GetCommandResponse>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d001      	beq.n	800ab3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e099      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7ff fd81 	bl	800a644 <SDMMC_GetResponse>
 800ab42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	4b4e      	ldr	r3, [pc, #312]	; (800ac80 <SDMMC_GetCmdResp1+0x1d8>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e08d      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da02      	bge.n	800ab5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab5c:	e087      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	e080      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab76:	2380      	movs	r3, #128	; 0x80
 800ab78:	e079      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab88:	e071      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab98:	e069      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba8:	e061      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800abb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abb8:	e059      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abc8:	e051      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abd8:	e049      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800abe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800abe8:	e041      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800abf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abf8:	e039      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac08:	e031      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac18:	e029      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac28:	e021      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac38:	e019      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac48:	e011      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac58:	e009      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac68:	e001      	b.n	800ac6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20000064 	.word	0x20000064
 800ac7c:	10624dd3 	.word	0x10624dd3
 800ac80:	fdffe008 	.word	0xfdffe008

0800ac84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac8c:	4b1f      	ldr	r3, [pc, #124]	; (800ad0c <SDMMC_GetCmdResp2+0x88>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <SDMMC_GetCmdResp2+0x8c>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	0a5b      	lsrs	r3, r3, #9
 800ac98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
 800aca0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	60fa      	str	r2, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acb0:	e026      	b.n	800ad00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0ef      	beq.n	800aca2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1ea      	bne.n	800aca2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d004      	beq.n	800ace2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2204      	movs	r2, #4
 800acdc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acde:	2304      	movs	r3, #4
 800ace0:	e00e      	b.n	800ad00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e003      	b.n	800ad00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	22c5      	movs	r2, #197	; 0xc5
 800acfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000064 	.word	0x20000064
 800ad10:	10624dd3 	.word	0x10624dd3

0800ad14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <SDMMC_GetCmdResp3+0x74>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a1a      	ldr	r2, [pc, #104]	; (800ad8c <SDMMC_GetCmdResp3+0x78>)
 800ad22:	fba2 2303 	umull	r2, r3, r2, r3
 800ad26:	0a5b      	lsrs	r3, r3, #9
 800ad28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2c:	fb02 f303 	mul.w	r3, r2, r3
 800ad30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1e5a      	subs	r2, r3, #1
 800ad36:	60fa      	str	r2, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad40:	e01b      	b.n	800ad7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0ef      	beq.n	800ad32 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1ea      	bne.n	800ad32 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad60:	f003 0304 	and.w	r3, r3, #4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2204      	movs	r2, #4
 800ad6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad6e:	2304      	movs	r3, #4
 800ad70:	e003      	b.n	800ad7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	22c5      	movs	r2, #197	; 0xc5
 800ad76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	20000064 	.word	0x20000064
 800ad8c:	10624dd3 	.word	0x10624dd3

0800ad90 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad9e:	4b35      	ldr	r3, [pc, #212]	; (800ae74 <SDMMC_GetCmdResp6+0xe4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a35      	ldr	r2, [pc, #212]	; (800ae78 <SDMMC_GetCmdResp6+0xe8>)
 800ada4:	fba2 2303 	umull	r2, r3, r2, r3
 800ada8:	0a5b      	lsrs	r3, r3, #9
 800adaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adae:	fb02 f303 	mul.w	r3, r2, r3
 800adb2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	1e5a      	subs	r2, r3, #1
 800adb8:	61fa      	str	r2, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d102      	bne.n	800adc4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adc2:	e052      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0ef      	beq.n	800adb4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1ea      	bne.n	800adb4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade2:	f003 0304 	and.w	r3, r3, #4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d004      	beq.n	800adf4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2204      	movs	r2, #4
 800adee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adf0:	2304      	movs	r3, #4
 800adf2:	e03a      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e02f      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7ff fc0d 	bl	800a62a <SDMMC_GetCommandResponse>
 800ae10:	4603      	mov	r3, r0
 800ae12:	461a      	mov	r2, r3
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d001      	beq.n	800ae1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e025      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	22c5      	movs	r2, #197	; 0xc5
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae24:	2100      	movs	r1, #0
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fc0c 	bl	800a644 <SDMMC_GetResponse>
 800ae2c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	0c1b      	lsrs	r3, r3, #16
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e011      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae54:	e009      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae64:	e001      	b.n	800ae6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3720      	adds	r7, #32
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000064 	.word	0x20000064
 800ae78:	10624dd3 	.word	0x10624dd3

0800ae7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae84:	4b22      	ldr	r3, [pc, #136]	; (800af10 <SDMMC_GetCmdResp7+0x94>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a22      	ldr	r2, [pc, #136]	; (800af14 <SDMMC_GetCmdResp7+0x98>)
 800ae8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8e:	0a5b      	lsrs	r3, r3, #9
 800ae90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae94:	fb02 f303 	mul.w	r3, r2, r3
 800ae98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1e5a      	subs	r2, r3, #1
 800ae9e:	60fa      	str	r2, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d102      	bne.n	800aeaa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea8:	e02c      	b.n	800af04 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0ef      	beq.n	800ae9a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1ea      	bne.n	800ae9a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d004      	beq.n	800aeda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2204      	movs	r2, #4
 800aed4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aed6:	2304      	movs	r3, #4
 800aed8:	e014      	b.n	800af04 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e009      	b.n	800af04 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2240      	movs	r2, #64	; 0x40
 800af00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af02:	2300      	movs	r3, #0

}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	20000064 	.word	0x20000064
 800af14:	10624dd3 	.word	0x10624dd3

0800af18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af20:	4b11      	ldr	r3, [pc, #68]	; (800af68 <SDMMC_GetCmdError+0x50>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a11      	ldr	r2, [pc, #68]	; (800af6c <SDMMC_GetCmdError+0x54>)
 800af26:	fba2 2303 	umull	r2, r3, r2, r3
 800af2a:	0a5b      	lsrs	r3, r3, #9
 800af2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	1e5a      	subs	r2, r3, #1
 800af3a:	60fa      	str	r2, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af44:	e009      	b.n	800af5a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f1      	beq.n	800af36 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	22c5      	movs	r2, #197	; 0xc5
 800af56:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20000064 	.word	0x20000064
 800af6c:	10624dd3 	.word	0x10624dd3

0800af70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af74:	4904      	ldr	r1, [pc, #16]	; (800af88 <MX_FATFS_Init+0x18>)
 800af76:	4805      	ldr	r0, [pc, #20]	; (800af8c <MX_FATFS_Init+0x1c>)
 800af78:	f002 fb3c 	bl	800d5f4 <FATFS_LinkDriver>
 800af7c:	4603      	mov	r3, r0
 800af7e:	461a      	mov	r2, r3
 800af80:	4b03      	ldr	r3, [pc, #12]	; (800af90 <MX_FATFS_Init+0x20>)
 800af82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af84:	bf00      	nop
 800af86:	bd80      	pop	{r7, pc}
 800af88:	2000a780 	.word	0x2000a780
 800af8c:	080105f4 	.word	0x080105f4
 800af90:	2000a77c 	.word	0x2000a77c

0800af94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800afae:	f000 f86b 	bl	800b088 <BSP_SD_IsDetected>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d001      	beq.n	800afbc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800afb8:	2302      	movs	r3, #2
 800afba:	e005      	b.n	800afc8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800afbc:	4804      	ldr	r0, [pc, #16]	; (800afd0 <BSP_SD_Init+0x2c>)
 800afbe:	f7fc fa2b 	bl	8007418 <HAL_SD_Init>
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800afc6:	79fb      	ldrb	r3, [r7, #7]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	2000a450 	.word	0x2000a450

0800afd4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	4806      	ldr	r0, [pc, #24]	; (800b00c <BSP_SD_ReadBlocks+0x38>)
 800aff2:	f7fc fae7 	bl	80075c4 <HAL_SD_ReadBlocks>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	2000a450 	.word	0x2000a450

0800b010 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af02      	add	r7, sp, #8
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	4806      	ldr	r0, [pc, #24]	; (800b048 <BSP_SD_WriteBlocks+0x38>)
 800b02e:	f7fc fca7 	bl	8007980 <HAL_SD_WriteBlocks>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2000a450 	.word	0x2000a450

0800b04c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b050:	4805      	ldr	r0, [pc, #20]	; (800b068 <BSP_SD_GetCardState+0x1c>)
 800b052:	f7fc ffeb 	bl	800802c <HAL_SD_GetCardState>
 800b056:	4603      	mov	r3, r0
 800b058:	2b04      	cmp	r3, #4
 800b05a:	bf14      	ite	ne
 800b05c:	2301      	movne	r3, #1
 800b05e:	2300      	moveq	r3, #0
 800b060:	b2db      	uxtb	r3, r3
}
 800b062:	4618      	mov	r0, r3
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	2000a450 	.word	0x2000a450

0800b06c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	4803      	ldr	r0, [pc, #12]	; (800b084 <BSP_SD_GetCardInfo+0x18>)
 800b078:	f7fc ffac 	bl	8007fd4 <HAL_SD_GetCardInfo>
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	2000a450 	.word	0x2000a450

0800b088 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b08e:	2301      	movs	r3, #1
 800b090:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b092:	f000 f80b 	bl	800b0ac <BSP_PlatformIsDetected>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b09c:	2300      	movs	r3, #0
 800b09e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	b2db      	uxtb	r3, r3
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b0b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0ba:	4806      	ldr	r0, [pc, #24]	; (800b0d4 <BSP_PlatformIsDetected+0x28>)
 800b0bc:	f7f9 f826 	bl	800410c <HAL_GPIO_ReadPin>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	48000800 	.word	0x48000800

0800b0d8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <SD_CheckStatus+0x38>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0e8:	f7ff ffb0 	bl	800b04c <BSP_SD_GetCardState>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d107      	bne.n	800b102 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <SD_CheckStatus+0x38>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f023 0301 	bic.w	r3, r3, #1
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <SD_CheckStatus+0x38>)
 800b100:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b102:	4b03      	ldr	r3, [pc, #12]	; (800b110 <SD_CheckStatus+0x38>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	2000006d 	.word	0x2000006d

0800b114 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b11e:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <SD_initialize+0x38>)
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b124:	f7ff ff3e 	bl	800afa4 <BSP_SD_Init>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff ffd1 	bl	800b0d8 <SD_CheckStatus>
 800b136:	4603      	mov	r3, r0
 800b138:	461a      	mov	r2, r3
 800b13a:	4b04      	ldr	r3, [pc, #16]	; (800b14c <SD_initialize+0x38>)
 800b13c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b13e:	4b03      	ldr	r3, [pc, #12]	; (800b14c <SD_initialize+0x38>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b2db      	uxtb	r3, r3
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	2000006d 	.word	0x2000006d

0800b150 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff ffbb 	bl	800b0d8 <SD_CheckStatus>
 800b162:	4603      	mov	r3, r0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	68b8      	ldr	r0, [r7, #8]
 800b18a:	f7ff ff23 	bl	800afd4 <BSP_SD_ReadBlocks>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d107      	bne.n	800b1a4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b194:	bf00      	nop
 800b196:	f7ff ff59 	bl	800b04c <BSP_SD_GetCardState>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1fa      	bne.n	800b196 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b086      	sub	sp, #24
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	603b      	str	r3, [r7, #0]
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	68b8      	ldr	r0, [r7, #8]
 800b1cc:	f7ff ff20 	bl	800b010 <BSP_SD_WriteBlocks>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d107      	bne.n	800b1e6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b1d6:	bf00      	nop
 800b1d8:	f7ff ff38 	bl	800b04c <BSP_SD_GetCardState>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1fa      	bne.n	800b1d8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b08c      	sub	sp, #48	; 0x30
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	603a      	str	r2, [r7, #0]
 800b1fa:	71fb      	strb	r3, [r7, #7]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b206:	4b25      	ldr	r3, [pc, #148]	; (800b29c <SD_ioctl+0xac>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <SD_ioctl+0x28>
 800b214:	2303      	movs	r3, #3
 800b216:	e03c      	b.n	800b292 <SD_ioctl+0xa2>

  switch (cmd)
 800b218:	79bb      	ldrb	r3, [r7, #6]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d834      	bhi.n	800b288 <SD_ioctl+0x98>
 800b21e:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <SD_ioctl+0x34>)
 800b220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b23d 	.word	0x0800b23d
 800b22c:	0800b255 	.word	0x0800b255
 800b230:	0800b26f 	.word	0x0800b26f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b23a:	e028      	b.n	800b28e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b23c:	f107 030c 	add.w	r3, r7, #12
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff ff13 	bl	800b06c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b252:	e01c      	b.n	800b28e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff ff07 	bl	800b06c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	b29a      	uxth	r2, r3
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b26c:	e00f      	b.n	800b28e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b26e:	f107 030c 	add.w	r3, r7, #12
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fefa 	bl	800b06c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	0a5a      	lsrs	r2, r3, #9
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b286:	e002      	b.n	800b28e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b288:	2304      	movs	r3, #4
 800b28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b28e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b292:	4618      	mov	r0, r3
 800b294:	3730      	adds	r7, #48	; 0x30
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	2000006d 	.word	0x2000006d

0800b2a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <disk_status+0x30>)
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	79fa      	ldrb	r2, [r7, #7]
 800b2b8:	4905      	ldr	r1, [pc, #20]	; (800b2d0 <disk_status+0x30>)
 800b2ba:	440a      	add	r2, r1
 800b2bc:	7a12      	ldrb	r2, [r2, #8]
 800b2be:	4610      	mov	r0, r2
 800b2c0:	4798      	blx	r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	2000a7ac 	.word	0x2000a7ac

0800b2d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <disk_initialize+0x48>)
 800b2e6:	5cd3      	ldrb	r3, [r2, r3]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d111      	bne.n	800b310 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	4a0b      	ldr	r2, [pc, #44]	; (800b31c <disk_initialize+0x48>)
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	4a09      	ldr	r2, [pc, #36]	; (800b31c <disk_initialize+0x48>)
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	79fa      	ldrb	r2, [r7, #7]
 800b302:	4906      	ldr	r1, [pc, #24]	; (800b31c <disk_initialize+0x48>)
 800b304:	440a      	add	r2, r1
 800b306:	7a12      	ldrb	r2, [r2, #8]
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	2000a7ac 	.word	0x2000a7ac

0800b320 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	4603      	mov	r3, r0
 800b32e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	4a0a      	ldr	r2, [pc, #40]	; (800b35c <disk_read+0x3c>)
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	689c      	ldr	r4, [r3, #8]
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4a07      	ldr	r2, [pc, #28]	; (800b35c <disk_read+0x3c>)
 800b340:	4413      	add	r3, r2
 800b342:	7a18      	ldrb	r0, [r3, #8]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	47a0      	blx	r4
 800b34c:	4603      	mov	r3, r0
 800b34e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b350:	7dfb      	ldrb	r3, [r7, #23]
}
 800b352:	4618      	mov	r0, r3
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	bd90      	pop	{r4, r7, pc}
 800b35a:	bf00      	nop
 800b35c:	2000a7ac 	.word	0x2000a7ac

0800b360 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	607a      	str	r2, [r7, #4]
 800b36a:	603b      	str	r3, [r7, #0]
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	4a0a      	ldr	r2, [pc, #40]	; (800b39c <disk_write+0x3c>)
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	68dc      	ldr	r4, [r3, #12]
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	4a07      	ldr	r2, [pc, #28]	; (800b39c <disk_write+0x3c>)
 800b380:	4413      	add	r3, r2
 800b382:	7a18      	ldrb	r0, [r3, #8]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	47a0      	blx	r4
 800b38c:	4603      	mov	r3, r0
 800b38e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
}
 800b392:	4618      	mov	r0, r3
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	2000a7ac 	.word	0x2000a7ac

0800b3a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	603a      	str	r2, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	4a09      	ldr	r2, [pc, #36]	; (800b3d8 <disk_ioctl+0x38>)
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	79fa      	ldrb	r2, [r7, #7]
 800b3be:	4906      	ldr	r1, [pc, #24]	; (800b3d8 <disk_ioctl+0x38>)
 800b3c0:	440a      	add	r2, r1
 800b3c2:	7a10      	ldrb	r0, [r2, #8]
 800b3c4:	79b9      	ldrb	r1, [r7, #6]
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2000a7ac 	.word	0x2000a7ac

0800b3dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b3ec:	89fb      	ldrh	r3, [r7, #14]
 800b3ee:	021b      	lsls	r3, r3, #8
 800b3f0:	b21a      	sxth	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	b21b      	sxth	r3, r3
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	b21b      	sxth	r3, r3
 800b3fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b3fe:	89fb      	ldrh	r3, [r7, #14]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3303      	adds	r3, #3
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	021b      	lsls	r3, r3, #8
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	3202      	adds	r2, #2
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	3201      	adds	r2, #1
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	021b      	lsls	r3, r3, #8
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	4313      	orrs	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
	return rv;
 800b444:	68fb      	ldr	r3, [r7, #12]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	887a      	ldrh	r2, [r7, #2]
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	0a1b      	lsrs	r3, r3, #8
 800b46e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	607a      	str	r2, [r7, #4]
 800b476:	887a      	ldrh	r2, [r7, #2]
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	607a      	str	r2, [r7, #4]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	b2d2      	uxtb	r2, r2
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	0a1b      	lsrs	r3, r3, #8
 800b4c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	701a      	strb	r2, [r3, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	1c53      	adds	r3, r2, #1
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	1c59      	adds	r1, r3, #1
 800b504:	6179      	str	r1, [r7, #20]
 800b506:	7812      	ldrb	r2, [r2, #0]
 800b508:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1f1      	bne.n	800b4fa <mem_cpy+0x1a>
	}
}
 800b516:	bf00      	nop
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b522:	b480      	push	{r7}
 800b524:	b087      	sub	sp, #28
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	617a      	str	r2, [r7, #20]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3b01      	subs	r3, #1
 800b542:	607b      	str	r3, [r7, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1f3      	bne.n	800b532 <mem_set+0x10>
}
 800b54a:	bf00      	nop
 800b54c:	bf00      	nop
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b558:	b480      	push	{r7}
 800b55a:	b089      	sub	sp, #36	; 0x24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	61fb      	str	r3, [r7, #28]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	61fa      	str	r2, [r7, #28]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	1c5a      	adds	r2, r3, #1
 800b57e:	61ba      	str	r2, [r7, #24]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	1acb      	subs	r3, r1, r3
 800b584:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3b01      	subs	r3, #1
 800b58a:	607b      	str	r3, [r7, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <mem_cmp+0x40>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d0eb      	beq.n	800b570 <mem_cmp+0x18>

	return r;
 800b598:	697b      	ldr	r3, [r7, #20]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3724      	adds	r7, #36	; 0x24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5b0:	e002      	b.n	800b5b8 <chk_chr+0x12>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	607b      	str	r3, [r7, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <chk_chr+0x26>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d1f2      	bne.n	800b5b2 <chk_chr+0xc>
	return *str;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	e029      	b.n	800b644 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b5f0:	4a27      	ldr	r2, [pc, #156]	; (800b690 <chk_lock+0xb4>)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	4413      	add	r3, r2
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01d      	beq.n	800b63a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b5fe:	4a24      	ldr	r2, [pc, #144]	; (800b690 <chk_lock+0xb4>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	4413      	add	r3, r2
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d116      	bne.n	800b63e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b610:	4a1f      	ldr	r2, [pc, #124]	; (800b690 <chk_lock+0xb4>)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	011b      	lsls	r3, r3, #4
 800b616:	4413      	add	r3, r2
 800b618:	3304      	adds	r3, #4
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b620:	429a      	cmp	r2, r3
 800b622:	d10c      	bne.n	800b63e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b624:	4a1a      	ldr	r2, [pc, #104]	; (800b690 <chk_lock+0xb4>)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	4413      	add	r3, r2
 800b62c:	3308      	adds	r3, #8
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b634:	429a      	cmp	r2, r3
 800b636:	d102      	bne.n	800b63e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b638:	e007      	b.n	800b64a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b63a:	2301      	movs	r3, #1
 800b63c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d9d2      	bls.n	800b5f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d109      	bne.n	800b664 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <chk_lock+0x80>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d101      	bne.n	800b660 <chk_lock+0x84>
 800b65c:	2300      	movs	r3, #0
 800b65e:	e010      	b.n	800b682 <chk_lock+0xa6>
 800b660:	2312      	movs	r3, #18
 800b662:	e00e      	b.n	800b682 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d108      	bne.n	800b67c <chk_lock+0xa0>
 800b66a:	4a09      	ldr	r2, [pc, #36]	; (800b690 <chk_lock+0xb4>)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	4413      	add	r3, r2
 800b672:	330c      	adds	r3, #12
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67a:	d101      	bne.n	800b680 <chk_lock+0xa4>
 800b67c:	2310      	movs	r3, #16
 800b67e:	e000      	b.n	800b682 <chk_lock+0xa6>
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	2000a78c 	.word	0x2000a78c

0800b694 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e002      	b.n	800b6a6 <enq_lock+0x12>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	607b      	str	r3, [r7, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d806      	bhi.n	800b6ba <enq_lock+0x26>
 800b6ac:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <enq_lock+0x40>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	4413      	add	r3, r2
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f2      	bne.n	800b6a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	bf14      	ite	ne
 800b6c0:	2301      	movne	r3, #1
 800b6c2:	2300      	moveq	r3, #0
 800b6c4:	b2db      	uxtb	r3, r3
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	2000a78c 	.word	0x2000a78c

0800b6d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
 800b6e6:	e01f      	b.n	800b728 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6e8:	4a41      	ldr	r2, [pc, #260]	; (800b7f0 <inc_lock+0x118>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	4413      	add	r3, r2
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d113      	bne.n	800b722 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b6fa:	4a3d      	ldr	r2, [pc, #244]	; (800b7f0 <inc_lock+0x118>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	4413      	add	r3, r2
 800b702:	3304      	adds	r3, #4
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d109      	bne.n	800b722 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b70e:	4a38      	ldr	r2, [pc, #224]	; (800b7f0 <inc_lock+0x118>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	4413      	add	r3, r2
 800b716:	3308      	adds	r3, #8
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b71e:	429a      	cmp	r2, r3
 800b720:	d006      	beq.n	800b730 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d9dc      	bls.n	800b6e8 <inc_lock+0x10>
 800b72e:	e000      	b.n	800b732 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b730:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d132      	bne.n	800b79e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e002      	b.n	800b744 <inc_lock+0x6c>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d806      	bhi.n	800b758 <inc_lock+0x80>
 800b74a:	4a29      	ldr	r2, [pc, #164]	; (800b7f0 <inc_lock+0x118>)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	4413      	add	r3, r2
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1f2      	bne.n	800b73e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d101      	bne.n	800b762 <inc_lock+0x8a>
 800b75e:	2300      	movs	r3, #0
 800b760:	e040      	b.n	800b7e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	4922      	ldr	r1, [pc, #136]	; (800b7f0 <inc_lock+0x118>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	011b      	lsls	r3, r3, #4
 800b76c:	440b      	add	r3, r1
 800b76e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	491e      	ldr	r1, [pc, #120]	; (800b7f0 <inc_lock+0x118>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	440b      	add	r3, r1
 800b77c:	3304      	adds	r3, #4
 800b77e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	695a      	ldr	r2, [r3, #20]
 800b784:	491a      	ldr	r1, [pc, #104]	; (800b7f0 <inc_lock+0x118>)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	440b      	add	r3, r1
 800b78c:	3308      	adds	r3, #8
 800b78e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b790:	4a17      	ldr	r2, [pc, #92]	; (800b7f0 <inc_lock+0x118>)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	4413      	add	r3, r2
 800b798:	330c      	adds	r3, #12
 800b79a:	2200      	movs	r2, #0
 800b79c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d009      	beq.n	800b7b8 <inc_lock+0xe0>
 800b7a4:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <inc_lock+0x118>)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	4413      	add	r3, r2
 800b7ac:	330c      	adds	r3, #12
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <inc_lock+0xe0>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e015      	b.n	800b7e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d108      	bne.n	800b7d0 <inc_lock+0xf8>
 800b7be:	4a0c      	ldr	r2, [pc, #48]	; (800b7f0 <inc_lock+0x118>)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	4413      	add	r3, r2
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	e001      	b.n	800b7d4 <inc_lock+0xfc>
 800b7d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7d4:	4906      	ldr	r1, [pc, #24]	; (800b7f0 <inc_lock+0x118>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	440b      	add	r3, r1
 800b7dc:	330c      	adds	r3, #12
 800b7de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3301      	adds	r3, #1
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	2000a78c 	.word	0x2000a78c

0800b7f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d825      	bhi.n	800b854 <dec_lock+0x60>
		n = Files[i].ctr;
 800b808:	4a17      	ldr	r2, [pc, #92]	; (800b868 <dec_lock+0x74>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	011b      	lsls	r3, r3, #4
 800b80e:	4413      	add	r3, r2
 800b810:	330c      	adds	r3, #12
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b816:	89fb      	ldrh	r3, [r7, #14]
 800b818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81c:	d101      	bne.n	800b822 <dec_lock+0x2e>
 800b81e:	2300      	movs	r3, #0
 800b820:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b822:	89fb      	ldrh	r3, [r7, #14]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <dec_lock+0x3a>
 800b828:	89fb      	ldrh	r3, [r7, #14]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b82e:	4a0e      	ldr	r2, [pc, #56]	; (800b868 <dec_lock+0x74>)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	011b      	lsls	r3, r3, #4
 800b834:	4413      	add	r3, r2
 800b836:	330c      	adds	r3, #12
 800b838:	89fa      	ldrh	r2, [r7, #14]
 800b83a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b83c:	89fb      	ldrh	r3, [r7, #14]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d105      	bne.n	800b84e <dec_lock+0x5a>
 800b842:	4a09      	ldr	r2, [pc, #36]	; (800b868 <dec_lock+0x74>)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	4413      	add	r3, r2
 800b84a:	2200      	movs	r2, #0
 800b84c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	737b      	strb	r3, [r7, #13]
 800b852:	e001      	b.n	800b858 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b854:	2302      	movs	r3, #2
 800b856:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b858:	7b7b      	ldrb	r3, [r7, #13]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	2000a78c 	.word	0x2000a78c

0800b86c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]
 800b878:	e010      	b.n	800b89c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b87a:	4a0d      	ldr	r2, [pc, #52]	; (800b8b0 <clear_lock+0x44>)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	011b      	lsls	r3, r3, #4
 800b880:	4413      	add	r3, r2
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	429a      	cmp	r2, r3
 800b888:	d105      	bne.n	800b896 <clear_lock+0x2a>
 800b88a:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <clear_lock+0x44>)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	4413      	add	r3, r2
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d9eb      	bls.n	800b87a <clear_lock+0xe>
	}
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	2000a78c 	.word	0x2000a78c

0800b8b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	78db      	ldrb	r3, [r3, #3]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d034      	beq.n	800b932 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	7858      	ldrb	r0, [r3, #1]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8d8:	2301      	movs	r3, #1
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	f7ff fd40 	bl	800b360 <disk_write>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	73fb      	strb	r3, [r7, #15]
 800b8ea:	e022      	b.n	800b932 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	1ad2      	subs	r2, r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d217      	bcs.n	800b932 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	789b      	ldrb	r3, [r3, #2]
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	e010      	b.n	800b92c <sync_window+0x78>
					wsect += fs->fsize;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	4413      	add	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7858      	ldrb	r0, [r3, #1]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b91e:	2301      	movs	r3, #1
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	f7ff fd1d 	bl	800b360 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3b01      	subs	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d8eb      	bhi.n	800b90a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d01b      	beq.n	800b98c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff ffad 	bl	800b8b4 <sync_window>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d113      	bne.n	800b98c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7858      	ldrb	r0, [r3, #1]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b96e:	2301      	movs	r3, #1
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	f7ff fcd5 	bl	800b320 <disk_read>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b97c:	f04f 33ff 	mov.w	r3, #4294967295
 800b980:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b982:	2301      	movs	r3, #1
 800b984:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff ff87 	bl	800b8b4 <sync_window>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d158      	bne.n	800ba62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d148      	bne.n	800ba4a <sync_fs+0xb2>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	791b      	ldrb	r3, [r3, #4]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d144      	bne.n	800ba4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3330      	adds	r3, #48	; 0x30
 800b9c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff fda9 	bl	800b522 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3330      	adds	r3, #48	; 0x30
 800b9d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fd38 	bl	800b452 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3330      	adds	r3, #48	; 0x30
 800b9e6:	4921      	ldr	r1, [pc, #132]	; (800ba6c <sync_fs+0xd4>)
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff fd4d 	bl	800b488 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3330      	adds	r3, #48	; 0x30
 800b9f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9f6:	491e      	ldr	r1, [pc, #120]	; (800ba70 <sync_fs+0xd8>)
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fd45 	bl	800b488 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3330      	adds	r3, #48	; 0x30
 800ba02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7ff fd3b 	bl	800b488 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3330      	adds	r3, #48	; 0x30
 800ba16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7ff fd31 	bl	800b488 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7858      	ldrb	r0, [r3, #1]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f7ff fc8e 	bl	800b360 <disk_write>
			fs->fsi_flag = 0;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7ff fca4 	bl	800b3a0 <disk_ioctl>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <sync_fs+0xca>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	41615252 	.word	0x41615252
 800ba70:	61417272 	.word	0x61417272

0800ba74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	3b02      	subs	r3, #2
 800ba82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	3b02      	subs	r3, #2
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d301      	bcc.n	800ba94 <clust2sect+0x20>
 800ba90:	2300      	movs	r3, #0
 800ba92:	e008      	b.n	800baa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	895b      	ldrh	r3, [r3, #10]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	fb03 f202 	mul.w	r2, r3, r2
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa4:	4413      	add	r3, r2
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d904      	bls.n	800bad2 <get_fat+0x20>
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d302      	bcc.n	800bad8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bad2:	2301      	movs	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e08f      	b.n	800bbf8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bad8:	f04f 33ff 	mov.w	r3, #4294967295
 800badc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d062      	beq.n	800bbac <get_fat+0xfa>
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	dc7c      	bgt.n	800bbe4 <get_fat+0x132>
 800baea:	2b01      	cmp	r3, #1
 800baec:	d002      	beq.n	800baf4 <get_fat+0x42>
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d042      	beq.n	800bb78 <get_fat+0xc6>
 800baf2:	e077      	b.n	800bbe4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	6a1a      	ldr	r2, [r3, #32]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	0a5b      	lsrs	r3, r3, #9
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6938      	ldr	r0, [r7, #16]
 800bb10:	f7ff ff14 	bl	800b93c <move_window>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d167      	bne.n	800bbea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1c5a      	adds	r2, r3, #1
 800bb1e:	60fa      	str	r2, [r7, #12]
 800bb20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	4413      	add	r3, r2
 800bb28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6a1a      	ldr	r2, [r3, #32]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	0a5b      	lsrs	r3, r3, #9
 800bb36:	4413      	add	r3, r2
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f7ff fefe 	bl	800b93c <move_window>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d153      	bne.n	800bbee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb54:	021b      	lsls	r3, r3, #8
 800bb56:	461a      	mov	r2, r3
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <get_fat+0xbc>
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	091b      	lsrs	r3, r3, #4
 800bb6c:	e002      	b.n	800bb74 <get_fat+0xc2>
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb74:	617b      	str	r3, [r7, #20]
			break;
 800bb76:	e03f      	b.n	800bbf8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	6a1a      	ldr	r2, [r3, #32]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	4413      	add	r3, r2
 800bb82:	4619      	mov	r1, r3
 800bb84:	6938      	ldr	r0, [r7, #16]
 800bb86:	f7ff fed9 	bl	800b93c <move_window>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d130      	bne.n	800bbf2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bb9e:	4413      	add	r3, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fc1b 	bl	800b3dc <ld_word>
 800bba6:	4603      	mov	r3, r0
 800bba8:	617b      	str	r3, [r7, #20]
			break;
 800bbaa:	e025      	b.n	800bbf8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6a1a      	ldr	r2, [r3, #32]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	09db      	lsrs	r3, r3, #7
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6938      	ldr	r0, [r7, #16]
 800bbba:	f7ff febf 	bl	800b93c <move_window>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d118      	bne.n	800bbf6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fc19 	bl	800b40c <ld_dword>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bbe0:	617b      	str	r3, [r7, #20]
			break;
 800bbe2:	e009      	b.n	800bbf8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	e006      	b.n	800bbf8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbea:	bf00      	nop
 800bbec:	e004      	b.n	800bbf8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbee:	bf00      	nop
 800bbf0:	e002      	b.n	800bbf8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbf2:	bf00      	nop
 800bbf4:	e000      	b.n	800bbf8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbf6:	bf00      	nop
		}
	}

	return val;
 800bbf8:	697b      	ldr	r3, [r7, #20]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc02:	b590      	push	{r4, r7, lr}
 800bc04:	b089      	sub	sp, #36	; 0x24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc0e:	2302      	movs	r3, #2
 800bc10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	f240 80d9 	bls.w	800bdcc <put_fat+0x1ca>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f080 80d3 	bcs.w	800bdcc <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	f000 8096 	beq.w	800bd5c <put_fat+0x15a>
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	f300 80cb 	bgt.w	800bdcc <put_fat+0x1ca>
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d002      	beq.n	800bc40 <put_fat+0x3e>
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d06e      	beq.n	800bd1c <put_fat+0x11a>
 800bc3e:	e0c5      	b.n	800bdcc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	69ba      	ldr	r2, [r7, #24]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1a      	ldr	r2, [r3, #32]
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	0a5b      	lsrs	r3, r3, #9
 800bc56:	4413      	add	r3, r2
 800bc58:	4619      	mov	r1, r3
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f7ff fe6e 	bl	800b93c <move_window>
 800bc60:	4603      	mov	r3, r0
 800bc62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc64:	7ffb      	ldrb	r3, [r7, #31]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f040 80a9 	bne.w	800bdbe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	1c59      	adds	r1, r3, #1
 800bc76:	61b9      	str	r1, [r7, #24]
 800bc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7c:	4413      	add	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00d      	beq.n	800bca6 <put_fat+0xa4>
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	b25a      	sxtb	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	b25b      	sxtb	r3, r3
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	e001      	b.n	800bcaa <put_fat+0xa8>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6a1a      	ldr	r2, [r3, #32]
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	0a5b      	lsrs	r3, r3, #9
 800bcbc:	4413      	add	r3, r2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fe3b 	bl	800b93c <move_window>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcca:	7ffb      	ldrb	r3, [r7, #31]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d178      	bne.n	800bdc2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcdc:	4413      	add	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <put_fat+0xf0>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	091b      	lsrs	r3, r3, #4
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	e00e      	b.n	800bd10 <put_fat+0x10e>
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	f023 030f 	bic.w	r3, r3, #15
 800bcfc:	b25a      	sxtb	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	0a1b      	lsrs	r3, r3, #8
 800bd02:	b25b      	sxtb	r3, r3
 800bd04:	f003 030f 	and.w	r3, r3, #15
 800bd08:	b25b      	sxtb	r3, r3
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2201      	movs	r2, #1
 800bd18:	70da      	strb	r2, [r3, #3]
			break;
 800bd1a:	e057      	b.n	800bdcc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a1a      	ldr	r2, [r3, #32]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	4413      	add	r3, r2
 800bd26:	4619      	mov	r1, r3
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff fe07 	bl	800b93c <move_window>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd32:	7ffb      	ldrb	r3, [r7, #31]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d146      	bne.n	800bdc6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd46:	4413      	add	r3, r2
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	b292      	uxth	r2, r2
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff fb7f 	bl	800b452 <st_word>
			fs->wflag = 1;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2201      	movs	r2, #1
 800bd58:	70da      	strb	r2, [r3, #3]
			break;
 800bd5a:	e037      	b.n	800bdcc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6a1a      	ldr	r2, [r3, #32]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	09db      	lsrs	r3, r3, #7
 800bd64:	4413      	add	r3, r2
 800bd66:	4619      	mov	r1, r3
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7ff fde7 	bl	800b93c <move_window>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d128      	bne.n	800bdca <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd8c:	4413      	add	r3, r2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fb3c 	bl	800b40c <ld_dword>
 800bd94:	4603      	mov	r3, r0
 800bd96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd9a:	4323      	orrs	r3, r4
 800bd9c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdac:	4413      	add	r3, r2
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fb69 	bl	800b488 <st_dword>
			fs->wflag = 1;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	70da      	strb	r2, [r3, #3]
			break;
 800bdbc:	e006      	b.n	800bdcc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdbe:	bf00      	nop
 800bdc0:	e004      	b.n	800bdcc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdc2:	bf00      	nop
 800bdc4:	e002      	b.n	800bdcc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdc6:	bf00      	nop
 800bdc8:	e000      	b.n	800bdcc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdca:	bf00      	nop
		}
	}
	return res;
 800bdcc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3724      	adds	r7, #36	; 0x24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}

0800bdd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b088      	sub	sp, #32
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d904      	bls.n	800bdfc <remove_chain+0x26>
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d301      	bcc.n	800be00 <remove_chain+0x2a>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e04b      	b.n	800be98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00c      	beq.n	800be20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be06:	f04f 32ff 	mov.w	r2, #4294967295
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	69b8      	ldr	r0, [r7, #24]
 800be0e:	f7ff fef8 	bl	800bc02 <put_fat>
 800be12:	4603      	mov	r3, r0
 800be14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be16:	7ffb      	ldrb	r3, [r7, #31]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <remove_chain+0x4a>
 800be1c:	7ffb      	ldrb	r3, [r7, #31]
 800be1e:	e03b      	b.n	800be98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be20:	68b9      	ldr	r1, [r7, #8]
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff fe45 	bl	800bab2 <get_fat>
 800be28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d031      	beq.n	800be94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d101      	bne.n	800be3a <remove_chain+0x64>
 800be36:	2302      	movs	r3, #2
 800be38:	e02e      	b.n	800be98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be40:	d101      	bne.n	800be46 <remove_chain+0x70>
 800be42:	2301      	movs	r3, #1
 800be44:	e028      	b.n	800be98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be46:	2200      	movs	r2, #0
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	69b8      	ldr	r0, [r7, #24]
 800be4c:	f7ff fed9 	bl	800bc02 <put_fat>
 800be50:	4603      	mov	r3, r0
 800be52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be54:	7ffb      	ldrb	r3, [r7, #31]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <remove_chain+0x88>
 800be5a:	7ffb      	ldrb	r3, [r7, #31]
 800be5c:	e01c      	b.n	800be98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	691a      	ldr	r2, [r3, #16]
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	3b02      	subs	r3, #2
 800be68:	429a      	cmp	r2, r3
 800be6a:	d20b      	bcs.n	800be84 <remove_chain+0xae>
			fs->free_clst++;
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	791b      	ldrb	r3, [r3, #4]
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d3c6      	bcc.n	800be20 <remove_chain+0x4a>
 800be92:	e000      	b.n	800be96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3720      	adds	r7, #32
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10d      	bne.n	800bed2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d004      	beq.n	800becc <create_chain+0x2c>
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d31b      	bcc.n	800bf04 <create_chain+0x64>
 800becc:	2301      	movs	r3, #1
 800bece:	61bb      	str	r3, [r7, #24]
 800bed0:	e018      	b.n	800bf04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff fdec 	bl	800bab2 <get_fat>
 800beda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d801      	bhi.n	800bee6 <create_chain+0x46>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e070      	b.n	800bfc8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beec:	d101      	bne.n	800bef2 <create_chain+0x52>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	e06a      	b.n	800bfc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d201      	bcs.n	800bf00 <create_chain+0x60>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	e063      	b.n	800bfc8 <create_chain+0x128>
		scl = clst;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d307      	bcc.n	800bf28 <create_chain+0x88>
				ncl = 2;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d901      	bls.n	800bf28 <create_chain+0x88>
 800bf24:	2300      	movs	r3, #0
 800bf26:	e04f      	b.n	800bfc8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf28:	69f9      	ldr	r1, [r7, #28]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fdc1 	bl	800bab2 <get_fat>
 800bf30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00e      	beq.n	800bf56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d003      	beq.n	800bf46 <create_chain+0xa6>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf44:	d101      	bne.n	800bf4a <create_chain+0xaa>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	e03e      	b.n	800bfc8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf4a:	69fa      	ldr	r2, [r7, #28]
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d1da      	bne.n	800bf08 <create_chain+0x68>
 800bf52:	2300      	movs	r3, #0
 800bf54:	e038      	b.n	800bfc8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf58:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5c:	69f9      	ldr	r1, [r7, #28]
 800bf5e:	6938      	ldr	r0, [r7, #16]
 800bf60:	f7ff fe4f 	bl	800bc02 <put_fat>
 800bf64:	4603      	mov	r3, r0
 800bf66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <create_chain+0xe2>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d006      	beq.n	800bf82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf74:	69fa      	ldr	r2, [r7, #28]
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6938      	ldr	r0, [r7, #16]
 800bf7a:	f7ff fe42 	bl	800bc02 <put_fat>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d116      	bne.n	800bfb6 <create_chain+0x116>
		fs->last_clst = ncl;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	3b02      	subs	r3, #2
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d804      	bhi.n	800bfa6 <create_chain+0x106>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	1e5a      	subs	r2, r3, #1
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	791b      	ldrb	r3, [r3, #4]
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	711a      	strb	r2, [r3, #4]
 800bfb4:	e007      	b.n	800bfc6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d102      	bne.n	800bfc2 <create_chain+0x122>
 800bfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc0:	e000      	b.n	800bfc4 <create_chain+0x124>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bfc6:	69fb      	ldr	r3, [r7, #28]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3720      	adds	r7, #32
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	0a5b      	lsrs	r3, r3, #9
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	8952      	ldrh	r2, [r2, #10]
 800bff0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bff4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	1d1a      	adds	r2, r3, #4
 800bffa:	613a      	str	r2, [r7, #16]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <clmt_clust+0x3a>
 800c006:	2300      	movs	r3, #0
 800c008:	e010      	b.n	800c02c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d307      	bcc.n	800c022 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	617b      	str	r3, [r7, #20]
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	3304      	adds	r3, #4
 800c01e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c020:	e7e9      	b.n	800bff6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c022:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	4413      	add	r3, r2
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	371c      	adds	r7, #28
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c04e:	d204      	bcs.n	800c05a <dir_sdi+0x22>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	f003 031f 	and.w	r3, r3, #31
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c05a:	2302      	movs	r3, #2
 800c05c:	e063      	b.n	800c126 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <dir_sdi+0x46>
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d902      	bls.n	800c07e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10c      	bne.n	800c09e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	8912      	ldrh	r2, [r2, #8]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d301      	bcc.n	800c094 <dir_sdi+0x5c>
 800c090:	2302      	movs	r3, #2
 800c092:	e048      	b.n	800c126 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	61da      	str	r2, [r3, #28]
 800c09c:	e029      	b.n	800c0f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	895b      	ldrh	r3, [r3, #10]
 800c0a2:	025b      	lsls	r3, r3, #9
 800c0a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0a6:	e019      	b.n	800c0dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff fd00 	bl	800bab2 <get_fat>
 800c0b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ba:	d101      	bne.n	800c0c0 <dir_sdi+0x88>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e032      	b.n	800c126 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d904      	bls.n	800c0d0 <dir_sdi+0x98>
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d301      	bcc.n	800c0d4 <dir_sdi+0x9c>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	e028      	b.n	800c126 <dir_sdi+0xee>
			ofs -= csz;
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d2e1      	bcs.n	800c0a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c0e4:	6979      	ldr	r1, [r7, #20]
 800c0e6:	6938      	ldr	r0, [r7, #16]
 800c0e8:	f7ff fcc4 	bl	800ba74 <clust2sect>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	69db      	ldr	r3, [r3, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <dir_sdi+0xcc>
 800c100:	2302      	movs	r3, #2
 800c102:	e010      	b.n	800c126 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	69da      	ldr	r2, [r3, #28]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	0a5b      	lsrs	r3, r3, #9
 800c10c:	441a      	add	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11e:	441a      	add	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b086      	sub	sp, #24
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	3320      	adds	r3, #32
 800c144:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <dir_next+0x28>
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c154:	d301      	bcc.n	800c15a <dir_next+0x2c>
 800c156:	2304      	movs	r3, #4
 800c158:	e0aa      	b.n	800c2b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c160:	2b00      	cmp	r3, #0
 800c162:	f040 8098 	bne.w	800c296 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	8912      	ldrh	r2, [r2, #8]
 800c180:	4293      	cmp	r3, r2
 800c182:	f0c0 8088 	bcc.w	800c296 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	61da      	str	r2, [r3, #28]
 800c18c:	2304      	movs	r3, #4
 800c18e:	e08f      	b.n	800c2b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	0a5b      	lsrs	r3, r3, #9
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	8952      	ldrh	r2, [r2, #10]
 800c198:	3a01      	subs	r2, #1
 800c19a:	4013      	ands	r3, r2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d17a      	bne.n	800c296 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7ff fc82 	bl	800bab2 <get_fat>
 800c1ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d801      	bhi.n	800c1ba <dir_next+0x8c>
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	e07a      	b.n	800c2b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c0:	d101      	bne.n	800c1c6 <dir_next+0x98>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e074      	b.n	800c2b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d358      	bcc.n	800c282 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d104      	bne.n	800c1e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	61da      	str	r2, [r3, #28]
 800c1dc:	2304      	movs	r3, #4
 800c1de:	e067      	b.n	800c2b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f7ff fe59 	bl	800bea0 <create_chain>
 800c1ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <dir_next+0xcc>
 800c1f6:	2307      	movs	r3, #7
 800c1f8:	e05a      	b.n	800c2b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d101      	bne.n	800c204 <dir_next+0xd6>
 800c200:	2302      	movs	r3, #2
 800c202:	e055      	b.n	800c2b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d101      	bne.n	800c210 <dir_next+0xe2>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e04f      	b.n	800c2b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f7ff fb4f 	bl	800b8b4 <sync_window>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <dir_next+0xf2>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e047      	b.n	800c2b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3330      	adds	r3, #48	; 0x30
 800c224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff f979 	bl	800b522 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c230:	2300      	movs	r3, #0
 800c232:	613b      	str	r3, [r7, #16]
 800c234:	6979      	ldr	r1, [r7, #20]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7ff fc1c 	bl	800ba74 <clust2sect>
 800c23c:	4602      	mov	r2, r0
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	62da      	str	r2, [r3, #44]	; 0x2c
 800c242:	e012      	b.n	800c26a <dir_next+0x13c>
						fs->wflag = 1;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f7ff fb32 	bl	800b8b4 <sync_window>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <dir_next+0x12c>
 800c256:	2301      	movs	r3, #1
 800c258:	e02a      	b.n	800c2b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	3301      	adds	r3, #1
 800c25e:	613b      	str	r3, [r7, #16]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	62da      	str	r2, [r3, #44]	; 0x2c
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	895b      	ldrh	r3, [r3, #10]
 800c26e:	461a      	mov	r2, r3
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	4293      	cmp	r3, r2
 800c274:	d3e6      	bcc.n	800c244 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	1ad2      	subs	r2, r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c288:	6979      	ldr	r1, [r7, #20]
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f7ff fbf2 	bl	800ba74 <clust2sect>
 800c290:	4602      	mov	r2, r0
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a8:	441a      	add	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff feb4 	bl	800c038 <dir_sdi>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d12b      	bne.n	800c332 <dir_alloc+0x7a>
		n = 0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff fb29 	bl	800b93c <move_window>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d11d      	bne.n	800c330 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2be5      	cmp	r3, #229	; 0xe5
 800c2fc:	d004      	beq.n	800c308 <dir_alloc+0x50>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d107      	bne.n	800c318 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	3301      	adds	r3, #1
 800c30c:	613b      	str	r3, [r7, #16]
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d102      	bne.n	800c31c <dir_alloc+0x64>
 800c316:	e00c      	b.n	800c332 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c318:	2300      	movs	r3, #0
 800c31a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c31c:	2101      	movs	r1, #1
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ff05 	bl	800c12e <dir_next>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0d7      	beq.n	800c2de <dir_alloc+0x26>
 800c32e:	e000      	b.n	800c332 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c330:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	2b04      	cmp	r3, #4
 800c336:	d101      	bne.n	800c33c <dir_alloc+0x84>
 800c338:	2307      	movs	r3, #7
 800c33a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	331a      	adds	r3, #26
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff f841 	bl	800b3dc <ld_word>
 800c35a:	4603      	mov	r3, r0
 800c35c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b03      	cmp	r3, #3
 800c364:	d109      	bne.n	800c37a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	3314      	adds	r3, #20
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff f836 	bl	800b3dc <ld_word>
 800c370:	4603      	mov	r3, r0
 800c372:	041b      	lsls	r3, r3, #16
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c37a:	68fb      	ldr	r3, [r7, #12]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	331a      	adds	r3, #26
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	b292      	uxth	r2, r2
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff f859 	bl	800b452 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d109      	bne.n	800c3bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f103 0214 	add.w	r2, r3, #20
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	0c1b      	lsrs	r3, r3, #16
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7ff f84b 	bl	800b452 <st_word>
	}
}
 800c3bc:	bf00      	nop
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff fe2f 	bl	800c038 <dir_sdi>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <dir_find+0x24>
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	e03e      	b.n	800c466 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	69db      	ldr	r3, [r3, #28]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6938      	ldr	r0, [r7, #16]
 800c3f0:	f7ff faa4 	bl	800b93c <move_window>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d12f      	bne.n	800c45e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <dir_find+0x4e>
 800c40c:	2304      	movs	r3, #4
 800c40e:	75fb      	strb	r3, [r7, #23]
 800c410:	e028      	b.n	800c464 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	330b      	adds	r3, #11
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a1b      	ldr	r3, [r3, #32]
 800c428:	330b      	adds	r3, #11
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	f003 0308 	and.w	r3, r3, #8
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10a      	bne.n	800c44a <dir_find+0x86>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a18      	ldr	r0, [r3, #32]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3324      	adds	r3, #36	; 0x24
 800c43c:	220b      	movs	r2, #11
 800c43e:	4619      	mov	r1, r3
 800c440:	f7ff f88a 	bl	800b558 <mem_cmp>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00b      	beq.n	800c462 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c44a:	2100      	movs	r1, #0
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff fe6e 	bl	800c12e <dir_next>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0c5      	beq.n	800c3e8 <dir_find+0x24>
 800c45c:	e002      	b.n	800c464 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c45e:	bf00      	nop
 800c460:	e000      	b.n	800c464 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c462:	bf00      	nop

	return res;
 800c464:	7dfb      	ldrb	r3, [r7, #23]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3718      	adds	r7, #24
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c47c:	2101      	movs	r1, #1
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff ff1a 	bl	800c2b8 <dir_alloc>
 800c484:	4603      	mov	r3, r0
 800c486:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d11c      	bne.n	800c4c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	4619      	mov	r1, r3
 800c494:	68b8      	ldr	r0, [r7, #8]
 800c496:	f7ff fa51 	bl	800b93c <move_window>
 800c49a:	4603      	mov	r3, r0
 800c49c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d111      	bne.n	800c4c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff f838 	bl	800b522 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a18      	ldr	r0, [r3, #32]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3324      	adds	r3, #36	; 0x24
 800c4ba:	220b      	movs	r2, #11
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f7ff f80f 	bl	800b4e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3324      	adds	r3, #36	; 0x24
 800c4e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c4ea:	220b      	movs	r2, #11
 800c4ec:	2120      	movs	r1, #32
 800c4ee:	68b8      	ldr	r0, [r7, #8]
 800c4f0:	f7ff f817 	bl	800b522 <mem_set>
	si = i = 0; ni = 8;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	2308      	movs	r3, #8
 800c4fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	61fa      	str	r2, [r7, #28]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c50e:	7efb      	ldrb	r3, [r7, #27]
 800c510:	2b20      	cmp	r3, #32
 800c512:	d94e      	bls.n	800c5b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c514:	7efb      	ldrb	r3, [r7, #27]
 800c516:	2b2f      	cmp	r3, #47	; 0x2f
 800c518:	d006      	beq.n	800c528 <create_name+0x54>
 800c51a:	7efb      	ldrb	r3, [r7, #27]
 800c51c:	2b5c      	cmp	r3, #92	; 0x5c
 800c51e:	d110      	bne.n	800c542 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c520:	e002      	b.n	800c528 <create_name+0x54>
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	3301      	adds	r3, #1
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	4413      	add	r3, r2
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b2f      	cmp	r3, #47	; 0x2f
 800c532:	d0f6      	beq.n	800c522 <create_name+0x4e>
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b5c      	cmp	r3, #92	; 0x5c
 800c53e:	d0f0      	beq.n	800c522 <create_name+0x4e>
			break;
 800c540:	e038      	b.n	800c5b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c542:	7efb      	ldrb	r3, [r7, #27]
 800c544:	2b2e      	cmp	r3, #46	; 0x2e
 800c546:	d003      	beq.n	800c550 <create_name+0x7c>
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d30c      	bcc.n	800c56a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2b0b      	cmp	r3, #11
 800c554:	d002      	beq.n	800c55c <create_name+0x88>
 800c556:	7efb      	ldrb	r3, [r7, #27]
 800c558:	2b2e      	cmp	r3, #46	; 0x2e
 800c55a:	d001      	beq.n	800c560 <create_name+0x8c>
 800c55c:	2306      	movs	r3, #6
 800c55e:	e044      	b.n	800c5ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c560:	2308      	movs	r3, #8
 800c562:	613b      	str	r3, [r7, #16]
 800c564:	230b      	movs	r3, #11
 800c566:	617b      	str	r3, [r7, #20]
			continue;
 800c568:	e022      	b.n	800c5b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c56a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	da04      	bge.n	800c57c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c572:	7efb      	ldrb	r3, [r7, #27]
 800c574:	3b80      	subs	r3, #128	; 0x80
 800c576:	4a1f      	ldr	r2, [pc, #124]	; (800c5f4 <create_name+0x120>)
 800c578:	5cd3      	ldrb	r3, [r2, r3]
 800c57a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c57c:	7efb      	ldrb	r3, [r7, #27]
 800c57e:	4619      	mov	r1, r3
 800c580:	481d      	ldr	r0, [pc, #116]	; (800c5f8 <create_name+0x124>)
 800c582:	f7ff f810 	bl	800b5a6 <chk_chr>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <create_name+0xbc>
 800c58c:	2306      	movs	r3, #6
 800c58e:	e02c      	b.n	800c5ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c590:	7efb      	ldrb	r3, [r7, #27]
 800c592:	2b60      	cmp	r3, #96	; 0x60
 800c594:	d905      	bls.n	800c5a2 <create_name+0xce>
 800c596:	7efb      	ldrb	r3, [r7, #27]
 800c598:	2b7a      	cmp	r3, #122	; 0x7a
 800c59a:	d802      	bhi.n	800c5a2 <create_name+0xce>
 800c59c:	7efb      	ldrb	r3, [r7, #27]
 800c59e:	3b20      	subs	r3, #32
 800c5a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	613a      	str	r2, [r7, #16]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	7efa      	ldrb	r2, [r7, #27]
 800c5ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c5b0:	e7a6      	b.n	800c500 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <create_name+0xf4>
 800c5c4:	2306      	movs	r3, #6
 800c5c6:	e010      	b.n	800c5ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2be5      	cmp	r3, #229	; 0xe5
 800c5ce:	d102      	bne.n	800c5d6 <create_name+0x102>
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2205      	movs	r2, #5
 800c5d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5d6:	7efb      	ldrb	r3, [r7, #27]
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d801      	bhi.n	800c5e0 <create_name+0x10c>
 800c5dc:	2204      	movs	r2, #4
 800c5de:	e000      	b.n	800c5e2 <create_name+0x10e>
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	330b      	adds	r3, #11
 800c5e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c5e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	08010608 	.word	0x08010608
 800c5f8:	080104d0 	.word	0x080104d0

0800c5fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c610:	e002      	b.n	800c618 <follow_path+0x1c>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b2f      	cmp	r3, #47	; 0x2f
 800c61e:	d0f8      	beq.n	800c612 <follow_path+0x16>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b5c      	cmp	r3, #92	; 0x5c
 800c626:	d0f4      	beq.n	800c612 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2200      	movs	r2, #0
 800c62c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b1f      	cmp	r3, #31
 800c634:	d80a      	bhi.n	800c64c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2280      	movs	r2, #128	; 0x80
 800c63a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fcf9 	bl	800c038 <dir_sdi>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
 800c64a:	e043      	b.n	800c6d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c64c:	463b      	mov	r3, r7
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff ff3f 	bl	800c4d4 <create_name>
 800c656:	4603      	mov	r3, r0
 800c658:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d134      	bne.n	800c6ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff feaf 	bl	800c3c4 <dir_find>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c670:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00a      	beq.n	800c68e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b04      	cmp	r3, #4
 800c67c:	d127      	bne.n	800c6ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b00      	cmp	r3, #0
 800c686:	d122      	bne.n	800c6ce <follow_path+0xd2>
 800c688:	2305      	movs	r3, #5
 800c68a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c68c:	e01f      	b.n	800c6ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11c      	bne.n	800c6d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	799b      	ldrb	r3, [r3, #6]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6a4:	2305      	movs	r3, #5
 800c6a6:	75fb      	strb	r3, [r7, #23]
 800c6a8:	e014      	b.n	800c6d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b8:	4413      	add	r3, r2
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff fe42 	bl	800c346 <ld_clust>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6c8:	e7c0      	b.n	800c64c <follow_path+0x50>
			if (res != FR_OK) break;
 800c6ca:	bf00      	nop
 800c6cc:	e002      	b.n	800c6d4 <follow_path+0xd8>
				break;
 800c6ce:	bf00      	nop
 800c6d0:	e000      	b.n	800c6d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d2:	bf00      	nop
			}
		}
	}

	return res;
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b087      	sub	sp, #28
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d031      	beq.n	800c758 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	e002      	b.n	800c702 <get_ldnumber+0x24>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	3301      	adds	r3, #1
 800c700:	617b      	str	r3, [r7, #20]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b20      	cmp	r3, #32
 800c708:	d903      	bls.n	800c712 <get_ldnumber+0x34>
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b3a      	cmp	r3, #58	; 0x3a
 800c710:	d1f4      	bne.n	800c6fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b3a      	cmp	r3, #58	; 0x3a
 800c718:	d11c      	bne.n	800c754 <get_ldnumber+0x76>
			tp = *path;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	60fa      	str	r2, [r7, #12]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	3b30      	subs	r3, #48	; 0x30
 800c72a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d80e      	bhi.n	800c750 <get_ldnumber+0x72>
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	429a      	cmp	r2, r3
 800c738:	d10a      	bne.n	800c750 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d107      	bne.n	800c750 <get_ldnumber+0x72>
					vol = (int)i;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	3301      	adds	r3, #1
 800c748:	617b      	str	r3, [r7, #20]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	e002      	b.n	800c75a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c754:	2300      	movs	r3, #0
 800c756:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c758:	693b      	ldr	r3, [r7, #16]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	371c      	adds	r7, #28
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
	...

0800c768 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	70da      	strb	r2, [r3, #3]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295
 800c77e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff f8da 	bl	800b93c <move_window>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <check_fs+0x2a>
 800c78e:	2304      	movs	r3, #4
 800c790:	e038      	b.n	800c804 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3330      	adds	r3, #48	; 0x30
 800c796:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fe1e 	bl	800b3dc <ld_word>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d001      	beq.n	800c7b0 <check_fs+0x48>
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e029      	b.n	800c804 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7b6:	2be9      	cmp	r3, #233	; 0xe9
 800c7b8:	d009      	beq.n	800c7ce <check_fs+0x66>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7c0:	2beb      	cmp	r3, #235	; 0xeb
 800c7c2:	d11e      	bne.n	800c802 <check_fs+0x9a>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c7ca:	2b90      	cmp	r3, #144	; 0x90
 800c7cc:	d119      	bne.n	800c802 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3330      	adds	r3, #48	; 0x30
 800c7d2:	3336      	adds	r3, #54	; 0x36
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe fe19 	bl	800b40c <ld_dword>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7e0:	4a0a      	ldr	r2, [pc, #40]	; (800c80c <check_fs+0xa4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d101      	bne.n	800c7ea <check_fs+0x82>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e00c      	b.n	800c804 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3330      	adds	r3, #48	; 0x30
 800c7ee:	3352      	adds	r3, #82	; 0x52
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fe0b 	bl	800b40c <ld_dword>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4a05      	ldr	r2, [pc, #20]	; (800c810 <check_fs+0xa8>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d101      	bne.n	800c802 <check_fs+0x9a>
 800c7fe:	2300      	movs	r3, #0
 800c800:	e000      	b.n	800c804 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c802:	2302      	movs	r3, #2
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	00544146 	.word	0x00544146
 800c810:	33544146 	.word	0x33544146

0800c814 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b096      	sub	sp, #88	; 0x58
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	4613      	mov	r3, r2
 800c820:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff ff58 	bl	800c6de <get_ldnumber>
 800c82e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	da01      	bge.n	800c83a <find_volume+0x26>
 800c836:	230b      	movs	r3, #11
 800c838:	e22d      	b.n	800cc96 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c83a:	4aa1      	ldr	r2, [pc, #644]	; (800cac0 <find_volume+0x2ac>)
 800c83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <find_volume+0x3a>
 800c84a:	230c      	movs	r3, #12
 800c84c:	e223      	b.n	800cc96 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c852:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	f023 0301 	bic.w	r3, r3, #1
 800c85a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	785b      	ldrb	r3, [r3, #1]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe fd19 	bl	800b2a0 <disk_status>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10c      	bne.n	800c89a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d007      	beq.n	800c896 <find_volume+0x82>
 800c886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c88a:	f003 0304 	and.w	r3, r3, #4
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c892:	230a      	movs	r3, #10
 800c894:	e1ff      	b.n	800cc96 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c896:	2300      	movs	r3, #0
 800c898:	e1fd      	b.n	800cc96 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fd11 	bl	800b2d4 <disk_initialize>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e1e6      	b.n	800cc96 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <find_volume+0xca>
 800c8ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8d2:	f003 0304 	and.w	r3, r3, #4
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c8da:	230a      	movs	r3, #10
 800c8dc:	e1db      	b.n	800cc96 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c8e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8e6:	f7ff ff3f 	bl	800c768 <check_fs>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c8f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d149      	bne.n	800c98c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c8fc:	e01e      	b.n	800c93c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c90c:	4413      	add	r3, r2
 800c90e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	3304      	adds	r3, #4
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d006      	beq.n	800c928 <find_volume+0x114>
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	3308      	adds	r3, #8
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fd74 	bl	800b40c <ld_dword>
 800c924:	4602      	mov	r2, r0
 800c926:	e000      	b.n	800c92a <find_volume+0x116>
 800c928:	2200      	movs	r2, #0
 800c92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	3358      	adds	r3, #88	; 0x58
 800c930:	443b      	add	r3, r7
 800c932:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c938:	3301      	adds	r3, #1
 800c93a:	643b      	str	r3, [r7, #64]	; 0x40
 800c93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d9dd      	bls.n	800c8fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c942:	2300      	movs	r3, #0
 800c944:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <find_volume+0x13e>
 800c94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94e:	3b01      	subs	r3, #1
 800c950:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	3358      	adds	r3, #88	; 0x58
 800c958:	443b      	add	r3, r7
 800c95a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c95e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <find_volume+0x15e>
 800c966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c96a:	f7ff fefd 	bl	800c768 <check_fs>
 800c96e:	4603      	mov	r3, r0
 800c970:	e000      	b.n	800c974 <find_volume+0x160>
 800c972:	2303      	movs	r3, #3
 800c974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d905      	bls.n	800c98c <find_volume+0x178>
 800c980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c982:	3301      	adds	r3, #1
 800c984:	643b      	str	r3, [r7, #64]	; 0x40
 800c986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c988:	2b03      	cmp	r3, #3
 800c98a:	d9e2      	bls.n	800c952 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c98c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c990:	2b04      	cmp	r3, #4
 800c992:	d101      	bne.n	800c998 <find_volume+0x184>
 800c994:	2301      	movs	r3, #1
 800c996:	e17e      	b.n	800cc96 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d901      	bls.n	800c9a4 <find_volume+0x190>
 800c9a0:	230d      	movs	r3, #13
 800c9a2:	e178      	b.n	800cc96 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	3330      	adds	r3, #48	; 0x30
 800c9a8:	330b      	adds	r3, #11
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fe fd16 	bl	800b3dc <ld_word>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9b6:	d001      	beq.n	800c9bc <find_volume+0x1a8>
 800c9b8:	230d      	movs	r3, #13
 800c9ba:	e16c      	b.n	800cc96 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	3330      	adds	r3, #48	; 0x30
 800c9c0:	3316      	adds	r3, #22
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fd0a 	bl	800b3dc <ld_word>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d106      	bne.n	800c9e0 <find_volume+0x1cc>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	3330      	adds	r3, #48	; 0x30
 800c9d6:	3324      	adds	r3, #36	; 0x24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fd17 	bl	800b40c <ld_dword>
 800c9de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	789b      	ldrb	r3, [r3, #2]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d005      	beq.n	800ca04 <find_volume+0x1f0>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	789b      	ldrb	r3, [r3, #2]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d001      	beq.n	800ca04 <find_volume+0x1f0>
 800ca00:	230d      	movs	r3, #13
 800ca02:	e148      	b.n	800cc96 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	789b      	ldrb	r3, [r3, #2]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0c:	fb02 f303 	mul.w	r3, r2, r3
 800ca10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	895b      	ldrh	r3, [r3, #10]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d008      	beq.n	800ca38 <find_volume+0x224>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	895b      	ldrh	r3, [r3, #10]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <find_volume+0x228>
 800ca38:	230d      	movs	r3, #13
 800ca3a:	e12c      	b.n	800cc96 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	3330      	adds	r3, #48	; 0x30
 800ca40:	3311      	adds	r3, #17
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fcca 	bl	800b3dc <ld_word>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	891b      	ldrh	r3, [r3, #8]
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <find_volume+0x24e>
 800ca5e:	230d      	movs	r3, #13
 800ca60:	e119      	b.n	800cc96 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	3330      	adds	r3, #48	; 0x30
 800ca66:	3313      	adds	r3, #19
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fe fcb7 	bl	800b3dc <ld_word>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d106      	bne.n	800ca86 <find_volume+0x272>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	3330      	adds	r3, #48	; 0x30
 800ca7c:	3320      	adds	r3, #32
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fcc4 	bl	800b40c <ld_dword>
 800ca84:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca88:	3330      	adds	r3, #48	; 0x30
 800ca8a:	330e      	adds	r3, #14
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fca5 	bl	800b3dc <ld_word>
 800ca92:	4603      	mov	r3, r0
 800ca94:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <find_volume+0x28c>
 800ca9c:	230d      	movs	r3, #13
 800ca9e:	e0fa      	b.n	800cc96 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800caa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	4413      	add	r3, r2
 800caa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa8:	8912      	ldrh	r2, [r2, #8]
 800caaa:	0912      	lsrs	r2, r2, #4
 800caac:	b292      	uxth	r2, r2
 800caae:	4413      	add	r3, r2
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d204      	bcs.n	800cac4 <find_volume+0x2b0>
 800caba:	230d      	movs	r3, #13
 800cabc:	e0eb      	b.n	800cc96 <find_volume+0x482>
 800cabe:	bf00      	nop
 800cac0:	2000a784 	.word	0x2000a784
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cacc:	8952      	ldrh	r2, [r2, #10]
 800cace:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <find_volume+0x2ca>
 800cada:	230d      	movs	r3, #13
 800cadc:	e0db      	b.n	800cc96 <find_volume+0x482>
		fmt = FS_FAT32;
 800cade:	2303      	movs	r3, #3
 800cae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800caea:	4293      	cmp	r3, r2
 800caec:	d802      	bhi.n	800caf4 <find_volume+0x2e0>
 800caee:	2302      	movs	r3, #2
 800caf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d802      	bhi.n	800cb04 <find_volume+0x2f0>
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	1c9a      	adds	r2, r3, #2
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb16:	441a      	add	r2, r3
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cb1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	441a      	add	r2, r3
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cb26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d11e      	bne.n	800cb6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	3330      	adds	r3, #48	; 0x30
 800cb32:	332a      	adds	r3, #42	; 0x2a
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fc51 	bl	800b3dc <ld_word>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <find_volume+0x330>
 800cb40:	230d      	movs	r3, #13
 800cb42:	e0a8      	b.n	800cc96 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb46:	891b      	ldrh	r3, [r3, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <find_volume+0x33c>
 800cb4c:	230d      	movs	r3, #13
 800cb4e:	e0a2      	b.n	800cc96 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	3330      	adds	r3, #48	; 0x30
 800cb54:	332c      	adds	r3, #44	; 0x2c
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fc58 	bl	800b40c <ld_dword>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	647b      	str	r3, [r7, #68]	; 0x44
 800cb6a:	e01f      	b.n	800cbac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	891b      	ldrh	r3, [r3, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <find_volume+0x364>
 800cb74:	230d      	movs	r3, #13
 800cb76:	e08e      	b.n	800cc96 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	6a1a      	ldr	r2, [r3, #32]
 800cb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7e:	441a      	add	r2, r3
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d103      	bne.n	800cb94 <find_volume+0x380>
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	e00a      	b.n	800cbaa <find_volume+0x396>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	695a      	ldr	r2, [r3, #20]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	085a      	lsrs	r2, r3, #1
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	695b      	ldr	r3, [r3, #20]
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cbaa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbb6:	0a5b      	lsrs	r3, r3, #9
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d201      	bcs.n	800cbc0 <find_volume+0x3ac>
 800cbbc:	230d      	movs	r3, #13
 800cbbe:	e06a      	b.n	800cc96 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	611a      	str	r2, [r3, #16]
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	2280      	movs	r2, #128	; 0x80
 800cbd4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cbd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d149      	bne.n	800cc72 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	3330      	adds	r3, #48	; 0x30
 800cbe2:	3330      	adds	r3, #48	; 0x30
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe fbf9 	bl	800b3dc <ld_word>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d140      	bne.n	800cc72 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbf8:	f7fe fea0 	bl	800b93c <move_window>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d137      	bne.n	800cc72 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	2200      	movs	r2, #0
 800cc06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	3330      	adds	r3, #48	; 0x30
 800cc0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fbe3 	bl	800b3dc <ld_word>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d127      	bne.n	800cc72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	3330      	adds	r3, #48	; 0x30
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fe fbf0 	bl	800b40c <ld_dword>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4a1c      	ldr	r2, [pc, #112]	; (800cca0 <find_volume+0x48c>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d11e      	bne.n	800cc72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	3330      	adds	r3, #48	; 0x30
 800cc38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe fbe5 	bl	800b40c <ld_dword>
 800cc42:	4603      	mov	r3, r0
 800cc44:	4a17      	ldr	r2, [pc, #92]	; (800cca4 <find_volume+0x490>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d113      	bne.n	800cc72 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	3330      	adds	r3, #48	; 0x30
 800cc4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fbda 	bl	800b40c <ld_dword>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	3330      	adds	r3, #48	; 0x30
 800cc62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fbd0 	bl	800b40c <ld_dword>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc7a:	4b0b      	ldr	r3, [pc, #44]	; (800cca8 <find_volume+0x494>)
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <find_volume+0x494>)
 800cc84:	801a      	strh	r2, [r3, #0]
 800cc86:	4b08      	ldr	r3, [pc, #32]	; (800cca8 <find_volume+0x494>)
 800cc88:	881a      	ldrh	r2, [r3, #0]
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc90:	f7fe fdec 	bl	800b86c <clear_lock>
#endif
	return FR_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3758      	adds	r7, #88	; 0x58
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	41615252 	.word	0x41615252
 800cca4:	61417272 	.word	0x61417272
 800cca8:	2000a788 	.word	0x2000a788

0800ccac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ccb6:	2309      	movs	r3, #9
 800ccb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01c      	beq.n	800ccfa <validate+0x4e>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d018      	beq.n	800ccfa <validate+0x4e>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <validate+0x4e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	889a      	ldrh	r2, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	88db      	ldrh	r3, [r3, #6]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d10c      	bne.n	800ccfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	785b      	ldrb	r3, [r3, #1]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe fada 	bl	800b2a0 <disk_status>
 800ccec:	4603      	mov	r3, r0
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <validate+0x4e>
			res = FR_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <validate+0x5a>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	e000      	b.n	800cd08 <validate+0x5c>
 800cd06:	2300      	movs	r3, #0
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	6013      	str	r3, [r2, #0]
	return res;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd2a:	f107 0310 	add.w	r3, r7, #16
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7ff fcd5 	bl	800c6de <get_ldnumber>
 800cd34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da01      	bge.n	800cd40 <f_mount+0x28>
 800cd3c:	230b      	movs	r3, #11
 800cd3e:	e02b      	b.n	800cd98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd40:	4a17      	ldr	r2, [pc, #92]	; (800cda0 <f_mount+0x88>)
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d005      	beq.n	800cd5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd50:	69b8      	ldr	r0, [r7, #24]
 800cd52:	f7fe fd8b 	bl	800b86c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	490d      	ldr	r1, [pc, #52]	; (800cda0 <f_mount+0x88>)
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <f_mount+0x66>
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d001      	beq.n	800cd82 <f_mount+0x6a>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e00a      	b.n	800cd98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd82:	f107 010c 	add.w	r1, r7, #12
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff fd41 	bl	800c814 <find_volume>
 800cd92:	4603      	mov	r3, r0
 800cd94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	2000a784 	.word	0x2000a784

0800cda4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b098      	sub	sp, #96	; 0x60
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <f_open+0x18>
 800cdb8:	2309      	movs	r3, #9
 800cdba:	e1ad      	b.n	800d118 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cdc4:	79fa      	ldrb	r2, [r7, #7]
 800cdc6:	f107 0110 	add.w	r1, r7, #16
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff fd20 	bl	800c814 <find_volume>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cdda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f040 8191 	bne.w	800d106 <f_open+0x362>
		dj.obj.fs = fs;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	f107 0314 	add.w	r3, r7, #20
 800cdee:	4611      	mov	r1, r2
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff fc03 	bl	800c5fc <follow_path>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d11a      	bne.n	800ce3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce08:	b25b      	sxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	da03      	bge.n	800ce16 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce0e:	2306      	movs	r3, #6
 800ce10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce14:	e011      	b.n	800ce3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	f023 0301 	bic.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bf14      	ite	ne
 800ce20:	2301      	movne	r3, #1
 800ce22:	2300      	moveq	r3, #0
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	461a      	mov	r2, r3
 800ce28:	f107 0314 	add.w	r3, r7, #20
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fbd4 	bl	800b5dc <chk_lock>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	f003 031c 	and.w	r3, r3, #28
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d07f      	beq.n	800cf44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d017      	beq.n	800ce7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	d10e      	bne.n	800ce72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce54:	f7fe fc1e 	bl	800b694 <enq_lock>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d006      	beq.n	800ce6c <f_open+0xc8>
 800ce5e:	f107 0314 	add.w	r3, r7, #20
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fb03 	bl	800c46e <dir_register>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	e000      	b.n	800ce6e <f_open+0xca>
 800ce6c:	2312      	movs	r3, #18
 800ce6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	f043 0308 	orr.w	r3, r3, #8
 800ce78:	71fb      	strb	r3, [r7, #7]
 800ce7a:	e010      	b.n	800ce9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce7c:	7ebb      	ldrb	r3, [r7, #26]
 800ce7e:	f003 0311 	and.w	r3, r3, #17
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <f_open+0xea>
					res = FR_DENIED;
 800ce86:	2307      	movs	r3, #7
 800ce88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce8c:	e007      	b.n	800ce9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	f003 0304 	and.w	r3, r3, #4
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <f_open+0xfa>
 800ce98:	2308      	movs	r3, #8
 800ce9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d168      	bne.n	800cf78 <f_open+0x1d4>
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	f003 0308 	and.w	r3, r3, #8
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d063      	beq.n	800cf78 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ceb0:	f7fe f870 	bl	800af94 <get_fattime>
 800ceb4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb8:	330e      	adds	r3, #14
 800ceba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fe fae3 	bl	800b488 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	3316      	adds	r3, #22
 800cec6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe fadd 	bl	800b488 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	330b      	adds	r3, #11
 800ced2:	2220      	movs	r2, #32
 800ced4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceda:	4611      	mov	r1, r2
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fa32 	bl	800c346 <ld_clust>
 800cee2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cee8:	2200      	movs	r2, #0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff fa4a 	bl	800c384 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef2:	331c      	adds	r3, #28
 800cef4:	2100      	movs	r1, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fac6 	bl	800b488 <st_dword>
					fs->wflag = 1;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	2201      	movs	r2, #1
 800cf00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d037      	beq.n	800cf78 <f_open+0x1d4>
						dw = fs->winsect;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf0e:	f107 0314 	add.w	r3, r7, #20
 800cf12:	2200      	movs	r2, #0
 800cf14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe ff5d 	bl	800bdd6 <remove_chain>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cf22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d126      	bne.n	800cf78 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fd04 	bl	800b93c <move_window>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf3e:	3a01      	subs	r2, #1
 800cf40:	60da      	str	r2, [r3, #12]
 800cf42:	e019      	b.n	800cf78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d115      	bne.n	800cf78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf4c:	7ebb      	ldrb	r3, [r7, #26]
 800cf4e:	f003 0310 	and.w	r3, r3, #16
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf56:	2304      	movs	r3, #4
 800cf58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf5c:	e00c      	b.n	800cf78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d007      	beq.n	800cf78 <f_open+0x1d4>
 800cf68:	7ebb      	ldrb	r3, [r7, #26]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <f_open+0x1d4>
						res = FR_DENIED;
 800cf72:	2307      	movs	r3, #7
 800cf74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d128      	bne.n	800cfd2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	f003 0308 	and.w	r3, r3, #8
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	f023 0301 	bic.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bf14      	ite	ne
 800cfaa:	2301      	movne	r3, #1
 800cfac:	2300      	moveq	r3, #0
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	f107 0314 	add.w	r3, r7, #20
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fb8d 	bl	800b6d8 <inc_lock>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d102      	bne.n	800cfd2 <f_open+0x22e>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cfd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f040 8095 	bne.w	800d106 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff f9af 	bl	800c346 <ld_clust>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff0:	331c      	adds	r3, #28
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fa0a 	bl	800b40c <ld_dword>
 800cff8:	4602      	mov	r2, r0
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	88da      	ldrh	r2, [r3, #6]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	79fa      	ldrb	r2, [r7, #7]
 800d016:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	3330      	adds	r3, #48	; 0x30
 800d02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d032:	2100      	movs	r1, #0
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe fa74 	bl	800b522 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	2b00      	cmp	r3, #0
 800d042:	d060      	beq.n	800d106 <f_open+0x362>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d05c      	beq.n	800d106 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	68da      	ldr	r2, [r3, #12]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	895b      	ldrh	r3, [r3, #10]
 800d058:	025b      	lsls	r3, r3, #9
 800d05a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	657b      	str	r3, [r7, #84]	; 0x54
 800d068:	e016      	b.n	800d098 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fd1f 	bl	800bab2 <get_fat>
 800d074:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d802      	bhi.n	800d082 <f_open+0x2de>
 800d07c:	2302      	movs	r3, #2
 800d07e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d102      	bne.n	800d090 <f_open+0x2ec>
 800d08a:	2301      	movs	r3, #1
 800d08c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	657b      	str	r3, [r7, #84]	; 0x54
 800d098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d103      	bne.n	800d0a8 <f_open+0x304>
 800d0a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d8e0      	bhi.n	800d06a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d127      	bne.n	800d106 <f_open+0x362>
 800d0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d022      	beq.n	800d106 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fcd5 	bl	800ba74 <clust2sect>
 800d0ca:	6478      	str	r0, [r7, #68]	; 0x44
 800d0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d103      	bne.n	800d0da <f_open+0x336>
						res = FR_INT_ERR;
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0d8:	e015      	b.n	800d106 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0dc:	0a5a      	lsrs	r2, r3, #9
 800d0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0e0:	441a      	add	r2, r3
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	7858      	ldrb	r0, [r3, #1]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f7fe f913 	bl	800b320 <disk_read>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <f_open+0x362>
 800d100:	2301      	movs	r3, #1
 800d102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <f_open+0x370>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3760      	adds	r7, #96	; 0x60
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2200      	movs	r2, #0
 800d136:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f107 0210 	add.w	r2, r7, #16
 800d13e:	4611      	mov	r1, r2
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff fdb3 	bl	800ccac <validate>
 800d146:	4603      	mov	r3, r0
 800d148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d14c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d150:	2b00      	cmp	r3, #0
 800d152:	d107      	bne.n	800d164 <f_write+0x44>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	7d5b      	ldrb	r3, [r3, #21]
 800d158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d15c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <f_write+0x4a>
 800d164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d168:	e14b      	b.n	800d402 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	7d1b      	ldrb	r3, [r3, #20]
 800d16e:	f003 0302 	and.w	r3, r3, #2
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <f_write+0x5a>
 800d176:	2307      	movs	r3, #7
 800d178:	e143      	b.n	800d402 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699a      	ldr	r2, [r3, #24]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	441a      	add	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	429a      	cmp	r2, r3
 800d188:	f080 812d 	bcs.w	800d3e6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	43db      	mvns	r3, r3
 800d192:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d194:	e127      	b.n	800d3e6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f040 80e3 	bne.w	800d36a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	0a5b      	lsrs	r3, r3, #9
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	8952      	ldrh	r2, [r2, #10]
 800d1ae:	3a01      	subs	r2, #1
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d143      	bne.n	800d242 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10c      	bne.n	800d1dc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d11a      	bne.n	800d204 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fe64 	bl	800bea0 <create_chain>
 800d1d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1da:	e013      	b.n	800d204 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7fe fef0 	bl	800bfd0 <clmt_clust>
 800d1f0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1f2:	e007      	b.n	800d204 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	f7fe fe4f 	bl	800bea0 <create_chain>
 800d202:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d206:	2b00      	cmp	r3, #0
 800d208:	f000 80f2 	beq.w	800d3f0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d104      	bne.n	800d21c <f_write+0xfc>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2202      	movs	r2, #2
 800d216:	755a      	strb	r2, [r3, #21]
 800d218:	2302      	movs	r3, #2
 800d21a:	e0f2      	b.n	800d402 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d222:	d104      	bne.n	800d22e <f_write+0x10e>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2201      	movs	r2, #1
 800d228:	755a      	strb	r2, [r3, #21]
 800d22a:	2301      	movs	r3, #1
 800d22c:	e0e9      	b.n	800d402 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d232:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <f_write+0x122>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d240:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	7d1b      	ldrb	r3, [r3, #20]
 800d246:	b25b      	sxtb	r3, r3
 800d248:	2b00      	cmp	r3, #0
 800d24a:	da18      	bge.n	800d27e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	7858      	ldrb	r0, [r3, #1]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6a1a      	ldr	r2, [r3, #32]
 800d25a:	2301      	movs	r3, #1
 800d25c:	f7fe f880 	bl	800b360 <disk_write>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <f_write+0x150>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2201      	movs	r2, #1
 800d26a:	755a      	strb	r2, [r3, #21]
 800d26c:	2301      	movs	r3, #1
 800d26e:	e0c8      	b.n	800d402 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	7d1b      	ldrb	r3, [r3, #20]
 800d274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f7fe fbf4 	bl	800ba74 <clust2sect>
 800d28c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d104      	bne.n	800d29e <f_write+0x17e>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2202      	movs	r2, #2
 800d298:	755a      	strb	r2, [r3, #21]
 800d29a:	2302      	movs	r3, #2
 800d29c:	e0b1      	b.n	800d402 <f_write+0x2e2>
			sect += csect;
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	0a5b      	lsrs	r3, r3, #9
 800d2aa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d03c      	beq.n	800d32c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	8952      	ldrh	r2, [r2, #10]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d905      	bls.n	800d2cc <f_write+0x1ac>
					cc = fs->csize - csect;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	895b      	ldrh	r3, [r3, #10]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	7858      	ldrb	r0, [r3, #1]
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	69f9      	ldr	r1, [r7, #28]
 800d2d6:	f7fe f843 	bl	800b360 <disk_write>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d004      	beq.n	800d2ea <f_write+0x1ca>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	755a      	strb	r2, [r3, #21]
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e08b      	b.n	800d402 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a1a      	ldr	r2, [r3, #32]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	6a3a      	ldr	r2, [r7, #32]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d915      	bls.n	800d324 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a1a      	ldr	r2, [r3, #32]
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	025b      	lsls	r3, r3, #9
 800d308:	69fa      	ldr	r2, [r7, #28]
 800d30a:	4413      	add	r3, r2
 800d30c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d310:	4619      	mov	r1, r3
 800d312:	f7fe f8e5 	bl	800b4e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	7d1b      	ldrb	r3, [r3, #20]
 800d31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	025b      	lsls	r3, r3, #9
 800d328:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d32a:	e03f      	b.n	800d3ac <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	429a      	cmp	r2, r3
 800d334:	d016      	beq.n	800d364 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d33e:	429a      	cmp	r2, r3
 800d340:	d210      	bcs.n	800d364 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	7858      	ldrb	r0, [r3, #1]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d34c:	2301      	movs	r3, #1
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	f7fd ffe6 	bl	800b320 <disk_read>
 800d354:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d356:	2b00      	cmp	r3, #0
 800d358:	d004      	beq.n	800d364 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	755a      	strb	r2, [r3, #21]
 800d360:	2301      	movs	r3, #1
 800d362:	e04e      	b.n	800d402 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d372:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d376:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d901      	bls.n	800d384 <f_write+0x264>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d392:	4413      	add	r3, r2
 800d394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d396:	69f9      	ldr	r1, [r7, #28]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe f8a1 	bl	800b4e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	7d1b      	ldrb	r3, [r3, #20]
 800d3a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	4413      	add	r3, r2
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ba:	441a      	add	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	619a      	str	r2, [r3, #24]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	68da      	ldr	r2, [r3, #12]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	bf38      	it	cc
 800d3cc:	461a      	movcc	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d8:	441a      	add	r2, r3
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f47f aed4 	bne.w	800d196 <f_write+0x76>
 800d3ee:	e000      	b.n	800d3f2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3f0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	7d1b      	ldrb	r3, [r3, #20]
 800d3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3730      	adds	r7, #48	; 0x30
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b086      	sub	sp, #24
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f107 0208 	add.w	r2, r7, #8
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fc46 	bl	800ccac <validate>
 800d420:	4603      	mov	r3, r0
 800d422:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d424:	7dfb      	ldrb	r3, [r7, #23]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d168      	bne.n	800d4fc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7d1b      	ldrb	r3, [r3, #20]
 800d42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d432:	2b00      	cmp	r3, #0
 800d434:	d062      	beq.n	800d4fc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	da15      	bge.n	800d46c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	7858      	ldrb	r0, [r3, #1]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a1a      	ldr	r2, [r3, #32]
 800d44e:	2301      	movs	r3, #1
 800d450:	f7fd ff86 	bl	800b360 <disk_write>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <f_sync+0x54>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e04f      	b.n	800d4fe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7d1b      	ldrb	r3, [r3, #20]
 800d462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d466:	b2da      	uxtb	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d46c:	f7fd fd92 	bl	800af94 <get_fattime>
 800d470:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	4619      	mov	r1, r3
 800d47a:	4610      	mov	r0, r2
 800d47c:	f7fe fa5e 	bl	800b93c <move_window>
 800d480:	4603      	mov	r3, r0
 800d482:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d138      	bne.n	800d4fc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	330b      	adds	r3, #11
 800d494:	781a      	ldrb	r2, [r3, #0]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	330b      	adds	r3, #11
 800d49a:	f042 0220 	orr.w	r2, r2, #32
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6818      	ldr	r0, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	68f9      	ldr	r1, [r7, #12]
 800d4ae:	f7fe ff69 	bl	800c384 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f103 021c 	add.w	r2, r3, #28
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7fd ffe2 	bl	800b488 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3316      	adds	r3, #22
 800d4c8:	6939      	ldr	r1, [r7, #16]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fd ffdc 	bl	800b488 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	3312      	adds	r3, #18
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fd ffbb 	bl	800b452 <st_word>
					fs->wflag = 1;
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fa57 	bl	800b998 <sync_fs>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7d1b      	ldrb	r3, [r3, #20]
 800d4f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff ff7b 	bl	800d40a <f_sync>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d118      	bne.n	800d550 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f107 0208 	add.w	r2, r7, #8
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fbc0 	bl	800ccac <validate>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10c      	bne.n	800d550 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe f95a 	bl	800b7f4 <dec_lock>
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d544:	7bfb      	ldrb	r3, [r7, #15]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d550:	7bfb      	ldrb	r3, [r7, #15]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b087      	sub	sp, #28
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d56a:	2301      	movs	r3, #1
 800d56c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d572:	4b1f      	ldr	r3, [pc, #124]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d574:	7a5b      	ldrb	r3, [r3, #9]
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d131      	bne.n	800d5e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d57c:	4b1c      	ldr	r3, [pc, #112]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d57e:	7a5b      	ldrb	r3, [r3, #9]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	461a      	mov	r2, r3
 800d584:	4b1a      	ldr	r3, [pc, #104]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d586:	2100      	movs	r1, #0
 800d588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d58a:	4b19      	ldr	r3, [pc, #100]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d58c:	7a5b      	ldrb	r3, [r3, #9]
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	4a17      	ldr	r2, [pc, #92]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d59a:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d59c:	7a5b      	ldrb	r3, [r3, #9]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b13      	ldr	r3, [pc, #76]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d5a4:	4413      	add	r3, r2
 800d5a6:	79fa      	ldrb	r2, [r7, #7]
 800d5a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5aa:	4b11      	ldr	r3, [pc, #68]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d5ac:	7a5b      	ldrb	r3, [r3, #9]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	b2d1      	uxtb	r1, r2
 800d5b4:	4a0e      	ldr	r2, [pc, #56]	; (800d5f0 <FATFS_LinkDriverEx+0x94>)
 800d5b6:	7251      	strb	r1, [r2, #9]
 800d5b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5ba:	7dbb      	ldrb	r3, [r7, #22]
 800d5bc:	3330      	adds	r3, #48	; 0x30
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	223a      	movs	r2, #58	; 0x3a
 800d5ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	3302      	adds	r3, #2
 800d5d0:	222f      	movs	r2, #47	; 0x2f
 800d5d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	3303      	adds	r3, #3
 800d5d8:	2200      	movs	r2, #0
 800d5da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	371c      	adds	r7, #28
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	2000a7ac 	.word	0x2000a7ac

0800d5f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5fe:	2200      	movs	r2, #0
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff ffaa 	bl	800d55c <FATFS_LinkDriverEx>
 800d608:	4603      	mov	r3, r0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <__cvt>:
 800d612:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d616:	ec55 4b10 	vmov	r4, r5, d0
 800d61a:	2d00      	cmp	r5, #0
 800d61c:	460e      	mov	r6, r1
 800d61e:	4619      	mov	r1, r3
 800d620:	462b      	mov	r3, r5
 800d622:	bfbb      	ittet	lt
 800d624:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d628:	461d      	movlt	r5, r3
 800d62a:	2300      	movge	r3, #0
 800d62c:	232d      	movlt	r3, #45	; 0x2d
 800d62e:	700b      	strb	r3, [r1, #0]
 800d630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d632:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d636:	4691      	mov	r9, r2
 800d638:	f023 0820 	bic.w	r8, r3, #32
 800d63c:	bfbc      	itt	lt
 800d63e:	4622      	movlt	r2, r4
 800d640:	4614      	movlt	r4, r2
 800d642:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d646:	d005      	beq.n	800d654 <__cvt+0x42>
 800d648:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d64c:	d100      	bne.n	800d650 <__cvt+0x3e>
 800d64e:	3601      	adds	r6, #1
 800d650:	2102      	movs	r1, #2
 800d652:	e000      	b.n	800d656 <__cvt+0x44>
 800d654:	2103      	movs	r1, #3
 800d656:	ab03      	add	r3, sp, #12
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	ab02      	add	r3, sp, #8
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	ec45 4b10 	vmov	d0, r4, r5
 800d662:	4653      	mov	r3, sl
 800d664:	4632      	mov	r2, r6
 800d666:	f000 ff83 	bl	800e570 <_dtoa_r>
 800d66a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d66e:	4607      	mov	r7, r0
 800d670:	d102      	bne.n	800d678 <__cvt+0x66>
 800d672:	f019 0f01 	tst.w	r9, #1
 800d676:	d022      	beq.n	800d6be <__cvt+0xac>
 800d678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d67c:	eb07 0906 	add.w	r9, r7, r6
 800d680:	d110      	bne.n	800d6a4 <__cvt+0x92>
 800d682:	783b      	ldrb	r3, [r7, #0]
 800d684:	2b30      	cmp	r3, #48	; 0x30
 800d686:	d10a      	bne.n	800d69e <__cvt+0x8c>
 800d688:	2200      	movs	r2, #0
 800d68a:	2300      	movs	r3, #0
 800d68c:	4620      	mov	r0, r4
 800d68e:	4629      	mov	r1, r5
 800d690:	f7f3 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d694:	b918      	cbnz	r0, 800d69e <__cvt+0x8c>
 800d696:	f1c6 0601 	rsb	r6, r6, #1
 800d69a:	f8ca 6000 	str.w	r6, [sl]
 800d69e:	f8da 3000 	ldr.w	r3, [sl]
 800d6a2:	4499      	add	r9, r3
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	f7f3 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6b0:	b108      	cbz	r0, 800d6b6 <__cvt+0xa4>
 800d6b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6b6:	2230      	movs	r2, #48	; 0x30
 800d6b8:	9b03      	ldr	r3, [sp, #12]
 800d6ba:	454b      	cmp	r3, r9
 800d6bc:	d307      	bcc.n	800d6ce <__cvt+0xbc>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6c2:	1bdb      	subs	r3, r3, r7
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	b004      	add	sp, #16
 800d6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ce:	1c59      	adds	r1, r3, #1
 800d6d0:	9103      	str	r1, [sp, #12]
 800d6d2:	701a      	strb	r2, [r3, #0]
 800d6d4:	e7f0      	b.n	800d6b8 <__cvt+0xa6>

0800d6d6 <__exponent>:
 800d6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2900      	cmp	r1, #0
 800d6dc:	bfb8      	it	lt
 800d6de:	4249      	neglt	r1, r1
 800d6e0:	f803 2b02 	strb.w	r2, [r3], #2
 800d6e4:	bfb4      	ite	lt
 800d6e6:	222d      	movlt	r2, #45	; 0x2d
 800d6e8:	222b      	movge	r2, #43	; 0x2b
 800d6ea:	2909      	cmp	r1, #9
 800d6ec:	7042      	strb	r2, [r0, #1]
 800d6ee:	dd2a      	ble.n	800d746 <__exponent+0x70>
 800d6f0:	f10d 0207 	add.w	r2, sp, #7
 800d6f4:	4617      	mov	r7, r2
 800d6f6:	260a      	movs	r6, #10
 800d6f8:	4694      	mov	ip, r2
 800d6fa:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6fe:	fb06 1415 	mls	r4, r6, r5, r1
 800d702:	3430      	adds	r4, #48	; 0x30
 800d704:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d708:	460c      	mov	r4, r1
 800d70a:	2c63      	cmp	r4, #99	; 0x63
 800d70c:	f102 32ff 	add.w	r2, r2, #4294967295
 800d710:	4629      	mov	r1, r5
 800d712:	dcf1      	bgt.n	800d6f8 <__exponent+0x22>
 800d714:	3130      	adds	r1, #48	; 0x30
 800d716:	f1ac 0402 	sub.w	r4, ip, #2
 800d71a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d71e:	1c41      	adds	r1, r0, #1
 800d720:	4622      	mov	r2, r4
 800d722:	42ba      	cmp	r2, r7
 800d724:	d30a      	bcc.n	800d73c <__exponent+0x66>
 800d726:	f10d 0209 	add.w	r2, sp, #9
 800d72a:	eba2 020c 	sub.w	r2, r2, ip
 800d72e:	42bc      	cmp	r4, r7
 800d730:	bf88      	it	hi
 800d732:	2200      	movhi	r2, #0
 800d734:	4413      	add	r3, r2
 800d736:	1a18      	subs	r0, r3, r0
 800d738:	b003      	add	sp, #12
 800d73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d73c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d740:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d744:	e7ed      	b.n	800d722 <__exponent+0x4c>
 800d746:	2330      	movs	r3, #48	; 0x30
 800d748:	3130      	adds	r1, #48	; 0x30
 800d74a:	7083      	strb	r3, [r0, #2]
 800d74c:	70c1      	strb	r1, [r0, #3]
 800d74e:	1d03      	adds	r3, r0, #4
 800d750:	e7f1      	b.n	800d736 <__exponent+0x60>
	...

0800d754 <_printf_float>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	ed2d 8b02 	vpush	{d8}
 800d75c:	b08d      	sub	sp, #52	; 0x34
 800d75e:	460c      	mov	r4, r1
 800d760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d764:	4616      	mov	r6, r2
 800d766:	461f      	mov	r7, r3
 800d768:	4605      	mov	r5, r0
 800d76a:	f000 fde9 	bl	800e340 <_localeconv_r>
 800d76e:	f8d0 a000 	ldr.w	sl, [r0]
 800d772:	4650      	mov	r0, sl
 800d774:	f7f2 fd7c 	bl	8000270 <strlen>
 800d778:	2300      	movs	r3, #0
 800d77a:	930a      	str	r3, [sp, #40]	; 0x28
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	9305      	str	r3, [sp, #20]
 800d780:	f8d8 3000 	ldr.w	r3, [r8]
 800d784:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d788:	3307      	adds	r3, #7
 800d78a:	f023 0307 	bic.w	r3, r3, #7
 800d78e:	f103 0208 	add.w	r2, r3, #8
 800d792:	f8c8 2000 	str.w	r2, [r8]
 800d796:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d79a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d79e:	9307      	str	r3, [sp, #28]
 800d7a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7a4:	ee08 0a10 	vmov	s16, r0
 800d7a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d7ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7b0:	4b9e      	ldr	r3, [pc, #632]	; (800da2c <_printf_float+0x2d8>)
 800d7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b6:	f7f3 f9b9 	bl	8000b2c <__aeabi_dcmpun>
 800d7ba:	bb88      	cbnz	r0, 800d820 <_printf_float+0xcc>
 800d7bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7c0:	4b9a      	ldr	r3, [pc, #616]	; (800da2c <_printf_float+0x2d8>)
 800d7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c6:	f7f3 f993 	bl	8000af0 <__aeabi_dcmple>
 800d7ca:	bb48      	cbnz	r0, 800d820 <_printf_float+0xcc>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	f7f3 f982 	bl	8000adc <__aeabi_dcmplt>
 800d7d8:	b110      	cbz	r0, 800d7e0 <_printf_float+0x8c>
 800d7da:	232d      	movs	r3, #45	; 0x2d
 800d7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e0:	4a93      	ldr	r2, [pc, #588]	; (800da30 <_printf_float+0x2dc>)
 800d7e2:	4b94      	ldr	r3, [pc, #592]	; (800da34 <_printf_float+0x2e0>)
 800d7e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d7e8:	bf94      	ite	ls
 800d7ea:	4690      	movls	r8, r2
 800d7ec:	4698      	movhi	r8, r3
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	6123      	str	r3, [r4, #16]
 800d7f2:	9b05      	ldr	r3, [sp, #20]
 800d7f4:	f023 0304 	bic.w	r3, r3, #4
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	f04f 0900 	mov.w	r9, #0
 800d7fe:	9700      	str	r7, [sp, #0]
 800d800:	4633      	mov	r3, r6
 800d802:	aa0b      	add	r2, sp, #44	; 0x2c
 800d804:	4621      	mov	r1, r4
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f9da 	bl	800dbc0 <_printf_common>
 800d80c:	3001      	adds	r0, #1
 800d80e:	f040 8090 	bne.w	800d932 <_printf_float+0x1de>
 800d812:	f04f 30ff 	mov.w	r0, #4294967295
 800d816:	b00d      	add	sp, #52	; 0x34
 800d818:	ecbd 8b02 	vpop	{d8}
 800d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d820:	4642      	mov	r2, r8
 800d822:	464b      	mov	r3, r9
 800d824:	4640      	mov	r0, r8
 800d826:	4649      	mov	r1, r9
 800d828:	f7f3 f980 	bl	8000b2c <__aeabi_dcmpun>
 800d82c:	b140      	cbz	r0, 800d840 <_printf_float+0xec>
 800d82e:	464b      	mov	r3, r9
 800d830:	2b00      	cmp	r3, #0
 800d832:	bfbc      	itt	lt
 800d834:	232d      	movlt	r3, #45	; 0x2d
 800d836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d83a:	4a7f      	ldr	r2, [pc, #508]	; (800da38 <_printf_float+0x2e4>)
 800d83c:	4b7f      	ldr	r3, [pc, #508]	; (800da3c <_printf_float+0x2e8>)
 800d83e:	e7d1      	b.n	800d7e4 <_printf_float+0x90>
 800d840:	6863      	ldr	r3, [r4, #4]
 800d842:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d846:	9206      	str	r2, [sp, #24]
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	d13f      	bne.n	800d8cc <_printf_float+0x178>
 800d84c:	2306      	movs	r3, #6
 800d84e:	6063      	str	r3, [r4, #4]
 800d850:	9b05      	ldr	r3, [sp, #20]
 800d852:	6861      	ldr	r1, [r4, #4]
 800d854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d858:	2300      	movs	r3, #0
 800d85a:	9303      	str	r3, [sp, #12]
 800d85c:	ab0a      	add	r3, sp, #40	; 0x28
 800d85e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d862:	ab09      	add	r3, sp, #36	; 0x24
 800d864:	ec49 8b10 	vmov	d0, r8, r9
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	6022      	str	r2, [r4, #0]
 800d86c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d870:	4628      	mov	r0, r5
 800d872:	f7ff fece 	bl	800d612 <__cvt>
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d87a:	2b47      	cmp	r3, #71	; 0x47
 800d87c:	4680      	mov	r8, r0
 800d87e:	d108      	bne.n	800d892 <_printf_float+0x13e>
 800d880:	1cc8      	adds	r0, r1, #3
 800d882:	db02      	blt.n	800d88a <_printf_float+0x136>
 800d884:	6863      	ldr	r3, [r4, #4]
 800d886:	4299      	cmp	r1, r3
 800d888:	dd41      	ble.n	800d90e <_printf_float+0x1ba>
 800d88a:	f1ab 0302 	sub.w	r3, fp, #2
 800d88e:	fa5f fb83 	uxtb.w	fp, r3
 800d892:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d896:	d820      	bhi.n	800d8da <_printf_float+0x186>
 800d898:	3901      	subs	r1, #1
 800d89a:	465a      	mov	r2, fp
 800d89c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8a0:	9109      	str	r1, [sp, #36]	; 0x24
 800d8a2:	f7ff ff18 	bl	800d6d6 <__exponent>
 800d8a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8a8:	1813      	adds	r3, r2, r0
 800d8aa:	2a01      	cmp	r2, #1
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	dc02      	bgt.n	800d8b8 <_printf_float+0x164>
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	07d2      	lsls	r2, r2, #31
 800d8b6:	d501      	bpl.n	800d8bc <_printf_float+0x168>
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	6123      	str	r3, [r4, #16]
 800d8bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d09c      	beq.n	800d7fe <_printf_float+0xaa>
 800d8c4:	232d      	movs	r3, #45	; 0x2d
 800d8c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8ca:	e798      	b.n	800d7fe <_printf_float+0xaa>
 800d8cc:	9a06      	ldr	r2, [sp, #24]
 800d8ce:	2a47      	cmp	r2, #71	; 0x47
 800d8d0:	d1be      	bne.n	800d850 <_printf_float+0xfc>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1bc      	bne.n	800d850 <_printf_float+0xfc>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e7b9      	b.n	800d84e <_printf_float+0xfa>
 800d8da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8de:	d118      	bne.n	800d912 <_printf_float+0x1be>
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	6863      	ldr	r3, [r4, #4]
 800d8e4:	dd0b      	ble.n	800d8fe <_printf_float+0x1aa>
 800d8e6:	6121      	str	r1, [r4, #16]
 800d8e8:	b913      	cbnz	r3, 800d8f0 <_printf_float+0x19c>
 800d8ea:	6822      	ldr	r2, [r4, #0]
 800d8ec:	07d0      	lsls	r0, r2, #31
 800d8ee:	d502      	bpl.n	800d8f6 <_printf_float+0x1a2>
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	440b      	add	r3, r1
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8f8:	f04f 0900 	mov.w	r9, #0
 800d8fc:	e7de      	b.n	800d8bc <_printf_float+0x168>
 800d8fe:	b913      	cbnz	r3, 800d906 <_printf_float+0x1b2>
 800d900:	6822      	ldr	r2, [r4, #0]
 800d902:	07d2      	lsls	r2, r2, #31
 800d904:	d501      	bpl.n	800d90a <_printf_float+0x1b6>
 800d906:	3302      	adds	r3, #2
 800d908:	e7f4      	b.n	800d8f4 <_printf_float+0x1a0>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e7f2      	b.n	800d8f4 <_printf_float+0x1a0>
 800d90e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d914:	4299      	cmp	r1, r3
 800d916:	db05      	blt.n	800d924 <_printf_float+0x1d0>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	6121      	str	r1, [r4, #16]
 800d91c:	07d8      	lsls	r0, r3, #31
 800d91e:	d5ea      	bpl.n	800d8f6 <_printf_float+0x1a2>
 800d920:	1c4b      	adds	r3, r1, #1
 800d922:	e7e7      	b.n	800d8f4 <_printf_float+0x1a0>
 800d924:	2900      	cmp	r1, #0
 800d926:	bfd4      	ite	le
 800d928:	f1c1 0202 	rsble	r2, r1, #2
 800d92c:	2201      	movgt	r2, #1
 800d92e:	4413      	add	r3, r2
 800d930:	e7e0      	b.n	800d8f4 <_printf_float+0x1a0>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	055a      	lsls	r2, r3, #21
 800d936:	d407      	bmi.n	800d948 <_printf_float+0x1f4>
 800d938:	6923      	ldr	r3, [r4, #16]
 800d93a:	4642      	mov	r2, r8
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	d12c      	bne.n	800d9a0 <_printf_float+0x24c>
 800d946:	e764      	b.n	800d812 <_printf_float+0xbe>
 800d948:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d94c:	f240 80e0 	bls.w	800db10 <_printf_float+0x3bc>
 800d950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d954:	2200      	movs	r2, #0
 800d956:	2300      	movs	r3, #0
 800d958:	f7f3 f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d034      	beq.n	800d9ca <_printf_float+0x276>
 800d960:	4a37      	ldr	r2, [pc, #220]	; (800da40 <_printf_float+0x2ec>)
 800d962:	2301      	movs	r3, #1
 800d964:	4631      	mov	r1, r6
 800d966:	4628      	mov	r0, r5
 800d968:	47b8      	blx	r7
 800d96a:	3001      	adds	r0, #1
 800d96c:	f43f af51 	beq.w	800d812 <_printf_float+0xbe>
 800d970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d974:	429a      	cmp	r2, r3
 800d976:	db02      	blt.n	800d97e <_printf_float+0x22a>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	07d8      	lsls	r0, r3, #31
 800d97c:	d510      	bpl.n	800d9a0 <_printf_float+0x24c>
 800d97e:	ee18 3a10 	vmov	r3, s16
 800d982:	4652      	mov	r2, sl
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	f43f af41 	beq.w	800d812 <_printf_float+0xbe>
 800d990:	f04f 0800 	mov.w	r8, #0
 800d994:	f104 091a 	add.w	r9, r4, #26
 800d998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d99a:	3b01      	subs	r3, #1
 800d99c:	4543      	cmp	r3, r8
 800d99e:	dc09      	bgt.n	800d9b4 <_printf_float+0x260>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	079b      	lsls	r3, r3, #30
 800d9a4:	f100 8107 	bmi.w	800dbb6 <_printf_float+0x462>
 800d9a8:	68e0      	ldr	r0, [r4, #12]
 800d9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ac:	4298      	cmp	r0, r3
 800d9ae:	bfb8      	it	lt
 800d9b0:	4618      	movlt	r0, r3
 800d9b2:	e730      	b.n	800d816 <_printf_float+0xc2>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	464a      	mov	r2, r9
 800d9b8:	4631      	mov	r1, r6
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	47b8      	blx	r7
 800d9be:	3001      	adds	r0, #1
 800d9c0:	f43f af27 	beq.w	800d812 <_printf_float+0xbe>
 800d9c4:	f108 0801 	add.w	r8, r8, #1
 800d9c8:	e7e6      	b.n	800d998 <_printf_float+0x244>
 800d9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	dc39      	bgt.n	800da44 <_printf_float+0x2f0>
 800d9d0:	4a1b      	ldr	r2, [pc, #108]	; (800da40 <_printf_float+0x2ec>)
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	4631      	mov	r1, r6
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	47b8      	blx	r7
 800d9da:	3001      	adds	r0, #1
 800d9dc:	f43f af19 	beq.w	800d812 <_printf_float+0xbe>
 800d9e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	d102      	bne.n	800d9ee <_printf_float+0x29a>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	07d9      	lsls	r1, r3, #31
 800d9ec:	d5d8      	bpl.n	800d9a0 <_printf_float+0x24c>
 800d9ee:	ee18 3a10 	vmov	r3, s16
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f43f af09 	beq.w	800d812 <_printf_float+0xbe>
 800da00:	f04f 0900 	mov.w	r9, #0
 800da04:	f104 0a1a 	add.w	sl, r4, #26
 800da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0a:	425b      	negs	r3, r3
 800da0c:	454b      	cmp	r3, r9
 800da0e:	dc01      	bgt.n	800da14 <_printf_float+0x2c0>
 800da10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da12:	e792      	b.n	800d93a <_printf_float+0x1e6>
 800da14:	2301      	movs	r3, #1
 800da16:	4652      	mov	r2, sl
 800da18:	4631      	mov	r1, r6
 800da1a:	4628      	mov	r0, r5
 800da1c:	47b8      	blx	r7
 800da1e:	3001      	adds	r0, #1
 800da20:	f43f aef7 	beq.w	800d812 <_printf_float+0xbe>
 800da24:	f109 0901 	add.w	r9, r9, #1
 800da28:	e7ee      	b.n	800da08 <_printf_float+0x2b4>
 800da2a:	bf00      	nop
 800da2c:	7fefffff 	.word	0x7fefffff
 800da30:	08010688 	.word	0x08010688
 800da34:	0801068c 	.word	0x0801068c
 800da38:	08010690 	.word	0x08010690
 800da3c:	08010694 	.word	0x08010694
 800da40:	08010698 	.word	0x08010698
 800da44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da48:	429a      	cmp	r2, r3
 800da4a:	bfa8      	it	ge
 800da4c:	461a      	movge	r2, r3
 800da4e:	2a00      	cmp	r2, #0
 800da50:	4691      	mov	r9, r2
 800da52:	dc37      	bgt.n	800dac4 <_printf_float+0x370>
 800da54:	f04f 0b00 	mov.w	fp, #0
 800da58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da5c:	f104 021a 	add.w	r2, r4, #26
 800da60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	eba3 0309 	sub.w	r3, r3, r9
 800da68:	455b      	cmp	r3, fp
 800da6a:	dc33      	bgt.n	800dad4 <_printf_float+0x380>
 800da6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da70:	429a      	cmp	r2, r3
 800da72:	db3b      	blt.n	800daec <_printf_float+0x398>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	07da      	lsls	r2, r3, #31
 800da78:	d438      	bmi.n	800daec <_printf_float+0x398>
 800da7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da7e:	eba2 0903 	sub.w	r9, r2, r3
 800da82:	9b05      	ldr	r3, [sp, #20]
 800da84:	1ad2      	subs	r2, r2, r3
 800da86:	4591      	cmp	r9, r2
 800da88:	bfa8      	it	ge
 800da8a:	4691      	movge	r9, r2
 800da8c:	f1b9 0f00 	cmp.w	r9, #0
 800da90:	dc35      	bgt.n	800dafe <_printf_float+0x3aa>
 800da92:	f04f 0800 	mov.w	r8, #0
 800da96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da9a:	f104 0a1a 	add.w	sl, r4, #26
 800da9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daa2:	1a9b      	subs	r3, r3, r2
 800daa4:	eba3 0309 	sub.w	r3, r3, r9
 800daa8:	4543      	cmp	r3, r8
 800daaa:	f77f af79 	ble.w	800d9a0 <_printf_float+0x24c>
 800daae:	2301      	movs	r3, #1
 800dab0:	4652      	mov	r2, sl
 800dab2:	4631      	mov	r1, r6
 800dab4:	4628      	mov	r0, r5
 800dab6:	47b8      	blx	r7
 800dab8:	3001      	adds	r0, #1
 800daba:	f43f aeaa 	beq.w	800d812 <_printf_float+0xbe>
 800dabe:	f108 0801 	add.w	r8, r8, #1
 800dac2:	e7ec      	b.n	800da9e <_printf_float+0x34a>
 800dac4:	4613      	mov	r3, r2
 800dac6:	4631      	mov	r1, r6
 800dac8:	4642      	mov	r2, r8
 800daca:	4628      	mov	r0, r5
 800dacc:	47b8      	blx	r7
 800dace:	3001      	adds	r0, #1
 800dad0:	d1c0      	bne.n	800da54 <_printf_float+0x300>
 800dad2:	e69e      	b.n	800d812 <_printf_float+0xbe>
 800dad4:	2301      	movs	r3, #1
 800dad6:	4631      	mov	r1, r6
 800dad8:	4628      	mov	r0, r5
 800dada:	9205      	str	r2, [sp, #20]
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	f43f ae97 	beq.w	800d812 <_printf_float+0xbe>
 800dae4:	9a05      	ldr	r2, [sp, #20]
 800dae6:	f10b 0b01 	add.w	fp, fp, #1
 800daea:	e7b9      	b.n	800da60 <_printf_float+0x30c>
 800daec:	ee18 3a10 	vmov	r3, s16
 800daf0:	4652      	mov	r2, sl
 800daf2:	4631      	mov	r1, r6
 800daf4:	4628      	mov	r0, r5
 800daf6:	47b8      	blx	r7
 800daf8:	3001      	adds	r0, #1
 800dafa:	d1be      	bne.n	800da7a <_printf_float+0x326>
 800dafc:	e689      	b.n	800d812 <_printf_float+0xbe>
 800dafe:	9a05      	ldr	r2, [sp, #20]
 800db00:	464b      	mov	r3, r9
 800db02:	4442      	add	r2, r8
 800db04:	4631      	mov	r1, r6
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	d1c1      	bne.n	800da92 <_printf_float+0x33e>
 800db0e:	e680      	b.n	800d812 <_printf_float+0xbe>
 800db10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db12:	2a01      	cmp	r2, #1
 800db14:	dc01      	bgt.n	800db1a <_printf_float+0x3c6>
 800db16:	07db      	lsls	r3, r3, #31
 800db18:	d53a      	bpl.n	800db90 <_printf_float+0x43c>
 800db1a:	2301      	movs	r3, #1
 800db1c:	4642      	mov	r2, r8
 800db1e:	4631      	mov	r1, r6
 800db20:	4628      	mov	r0, r5
 800db22:	47b8      	blx	r7
 800db24:	3001      	adds	r0, #1
 800db26:	f43f ae74 	beq.w	800d812 <_printf_float+0xbe>
 800db2a:	ee18 3a10 	vmov	r3, s16
 800db2e:	4652      	mov	r2, sl
 800db30:	4631      	mov	r1, r6
 800db32:	4628      	mov	r0, r5
 800db34:	47b8      	blx	r7
 800db36:	3001      	adds	r0, #1
 800db38:	f43f ae6b 	beq.w	800d812 <_printf_float+0xbe>
 800db3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db40:	2200      	movs	r2, #0
 800db42:	2300      	movs	r3, #0
 800db44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800db48:	f7f2 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800db4c:	b9d8      	cbnz	r0, 800db86 <_printf_float+0x432>
 800db4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db52:	f108 0201 	add.w	r2, r8, #1
 800db56:	4631      	mov	r1, r6
 800db58:	4628      	mov	r0, r5
 800db5a:	47b8      	blx	r7
 800db5c:	3001      	adds	r0, #1
 800db5e:	d10e      	bne.n	800db7e <_printf_float+0x42a>
 800db60:	e657      	b.n	800d812 <_printf_float+0xbe>
 800db62:	2301      	movs	r3, #1
 800db64:	4652      	mov	r2, sl
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae50 	beq.w	800d812 <_printf_float+0xbe>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db78:	3b01      	subs	r3, #1
 800db7a:	4543      	cmp	r3, r8
 800db7c:	dcf1      	bgt.n	800db62 <_printf_float+0x40e>
 800db7e:	464b      	mov	r3, r9
 800db80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db84:	e6da      	b.n	800d93c <_printf_float+0x1e8>
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	f104 0a1a 	add.w	sl, r4, #26
 800db8e:	e7f2      	b.n	800db76 <_printf_float+0x422>
 800db90:	2301      	movs	r3, #1
 800db92:	4642      	mov	r2, r8
 800db94:	e7df      	b.n	800db56 <_printf_float+0x402>
 800db96:	2301      	movs	r3, #1
 800db98:	464a      	mov	r2, r9
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	f43f ae36 	beq.w	800d812 <_printf_float+0xbe>
 800dba6:	f108 0801 	add.w	r8, r8, #1
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	dcf0      	bgt.n	800db96 <_printf_float+0x442>
 800dbb4:	e6f8      	b.n	800d9a8 <_printf_float+0x254>
 800dbb6:	f04f 0800 	mov.w	r8, #0
 800dbba:	f104 0919 	add.w	r9, r4, #25
 800dbbe:	e7f4      	b.n	800dbaa <_printf_float+0x456>

0800dbc0 <_printf_common>:
 800dbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	4616      	mov	r6, r2
 800dbc6:	4699      	mov	r9, r3
 800dbc8:	688a      	ldr	r2, [r1, #8]
 800dbca:	690b      	ldr	r3, [r1, #16]
 800dbcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	bfb8      	it	lt
 800dbd4:	4613      	movlt	r3, r2
 800dbd6:	6033      	str	r3, [r6, #0]
 800dbd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbdc:	4607      	mov	r7, r0
 800dbde:	460c      	mov	r4, r1
 800dbe0:	b10a      	cbz	r2, 800dbe6 <_printf_common+0x26>
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	6033      	str	r3, [r6, #0]
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	0699      	lsls	r1, r3, #26
 800dbea:	bf42      	ittt	mi
 800dbec:	6833      	ldrmi	r3, [r6, #0]
 800dbee:	3302      	addmi	r3, #2
 800dbf0:	6033      	strmi	r3, [r6, #0]
 800dbf2:	6825      	ldr	r5, [r4, #0]
 800dbf4:	f015 0506 	ands.w	r5, r5, #6
 800dbf8:	d106      	bne.n	800dc08 <_printf_common+0x48>
 800dbfa:	f104 0a19 	add.w	sl, r4, #25
 800dbfe:	68e3      	ldr	r3, [r4, #12]
 800dc00:	6832      	ldr	r2, [r6, #0]
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	42ab      	cmp	r3, r5
 800dc06:	dc26      	bgt.n	800dc56 <_printf_common+0x96>
 800dc08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc0c:	1e13      	subs	r3, r2, #0
 800dc0e:	6822      	ldr	r2, [r4, #0]
 800dc10:	bf18      	it	ne
 800dc12:	2301      	movne	r3, #1
 800dc14:	0692      	lsls	r2, r2, #26
 800dc16:	d42b      	bmi.n	800dc70 <_printf_common+0xb0>
 800dc18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	4638      	mov	r0, r7
 800dc20:	47c0      	blx	r8
 800dc22:	3001      	adds	r0, #1
 800dc24:	d01e      	beq.n	800dc64 <_printf_common+0xa4>
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	6922      	ldr	r2, [r4, #16]
 800dc2a:	f003 0306 	and.w	r3, r3, #6
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	bf02      	ittt	eq
 800dc32:	68e5      	ldreq	r5, [r4, #12]
 800dc34:	6833      	ldreq	r3, [r6, #0]
 800dc36:	1aed      	subeq	r5, r5, r3
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	bf0c      	ite	eq
 800dc3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc40:	2500      	movne	r5, #0
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bfc4      	itt	gt
 800dc46:	1a9b      	subgt	r3, r3, r2
 800dc48:	18ed      	addgt	r5, r5, r3
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	341a      	adds	r4, #26
 800dc4e:	42b5      	cmp	r5, r6
 800dc50:	d11a      	bne.n	800dc88 <_printf_common+0xc8>
 800dc52:	2000      	movs	r0, #0
 800dc54:	e008      	b.n	800dc68 <_printf_common+0xa8>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4652      	mov	r2, sl
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	47c0      	blx	r8
 800dc60:	3001      	adds	r0, #1
 800dc62:	d103      	bne.n	800dc6c <_printf_common+0xac>
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295
 800dc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6c:	3501      	adds	r5, #1
 800dc6e:	e7c6      	b.n	800dbfe <_printf_common+0x3e>
 800dc70:	18e1      	adds	r1, r4, r3
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	2030      	movs	r0, #48	; 0x30
 800dc76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc7a:	4422      	add	r2, r4
 800dc7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc84:	3302      	adds	r3, #2
 800dc86:	e7c7      	b.n	800dc18 <_printf_common+0x58>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	4638      	mov	r0, r7
 800dc90:	47c0      	blx	r8
 800dc92:	3001      	adds	r0, #1
 800dc94:	d0e6      	beq.n	800dc64 <_printf_common+0xa4>
 800dc96:	3601      	adds	r6, #1
 800dc98:	e7d9      	b.n	800dc4e <_printf_common+0x8e>
	...

0800dc9c <_printf_i>:
 800dc9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	7e0f      	ldrb	r7, [r1, #24]
 800dca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dca4:	2f78      	cmp	r7, #120	; 0x78
 800dca6:	4691      	mov	r9, r2
 800dca8:	4680      	mov	r8, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	469a      	mov	sl, r3
 800dcae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcb2:	d807      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcb4:	2f62      	cmp	r7, #98	; 0x62
 800dcb6:	d80a      	bhi.n	800dcce <_printf_i+0x32>
 800dcb8:	2f00      	cmp	r7, #0
 800dcba:	f000 80d4 	beq.w	800de66 <_printf_i+0x1ca>
 800dcbe:	2f58      	cmp	r7, #88	; 0x58
 800dcc0:	f000 80c0 	beq.w	800de44 <_printf_i+0x1a8>
 800dcc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dccc:	e03a      	b.n	800dd44 <_printf_i+0xa8>
 800dcce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcd2:	2b15      	cmp	r3, #21
 800dcd4:	d8f6      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcd6:	a101      	add	r1, pc, #4	; (adr r1, 800dcdc <_printf_i+0x40>)
 800dcd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcdc:	0800dd35 	.word	0x0800dd35
 800dce0:	0800dd49 	.word	0x0800dd49
 800dce4:	0800dcc5 	.word	0x0800dcc5
 800dce8:	0800dcc5 	.word	0x0800dcc5
 800dcec:	0800dcc5 	.word	0x0800dcc5
 800dcf0:	0800dcc5 	.word	0x0800dcc5
 800dcf4:	0800dd49 	.word	0x0800dd49
 800dcf8:	0800dcc5 	.word	0x0800dcc5
 800dcfc:	0800dcc5 	.word	0x0800dcc5
 800dd00:	0800dcc5 	.word	0x0800dcc5
 800dd04:	0800dcc5 	.word	0x0800dcc5
 800dd08:	0800de4d 	.word	0x0800de4d
 800dd0c:	0800dd75 	.word	0x0800dd75
 800dd10:	0800de07 	.word	0x0800de07
 800dd14:	0800dcc5 	.word	0x0800dcc5
 800dd18:	0800dcc5 	.word	0x0800dcc5
 800dd1c:	0800de6f 	.word	0x0800de6f
 800dd20:	0800dcc5 	.word	0x0800dcc5
 800dd24:	0800dd75 	.word	0x0800dd75
 800dd28:	0800dcc5 	.word	0x0800dcc5
 800dd2c:	0800dcc5 	.word	0x0800dcc5
 800dd30:	0800de0f 	.word	0x0800de0f
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	602a      	str	r2, [r5, #0]
 800dd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd44:	2301      	movs	r3, #1
 800dd46:	e09f      	b.n	800de88 <_printf_i+0x1ec>
 800dd48:	6820      	ldr	r0, [r4, #0]
 800dd4a:	682b      	ldr	r3, [r5, #0]
 800dd4c:	0607      	lsls	r7, r0, #24
 800dd4e:	f103 0104 	add.w	r1, r3, #4
 800dd52:	6029      	str	r1, [r5, #0]
 800dd54:	d501      	bpl.n	800dd5a <_printf_i+0xbe>
 800dd56:	681e      	ldr	r6, [r3, #0]
 800dd58:	e003      	b.n	800dd62 <_printf_i+0xc6>
 800dd5a:	0646      	lsls	r6, r0, #25
 800dd5c:	d5fb      	bpl.n	800dd56 <_printf_i+0xba>
 800dd5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	da03      	bge.n	800dd6e <_printf_i+0xd2>
 800dd66:	232d      	movs	r3, #45	; 0x2d
 800dd68:	4276      	negs	r6, r6
 800dd6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd6e:	485a      	ldr	r0, [pc, #360]	; (800ded8 <_printf_i+0x23c>)
 800dd70:	230a      	movs	r3, #10
 800dd72:	e012      	b.n	800dd9a <_printf_i+0xfe>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	6820      	ldr	r0, [r4, #0]
 800dd78:	1d19      	adds	r1, r3, #4
 800dd7a:	6029      	str	r1, [r5, #0]
 800dd7c:	0605      	lsls	r5, r0, #24
 800dd7e:	d501      	bpl.n	800dd84 <_printf_i+0xe8>
 800dd80:	681e      	ldr	r6, [r3, #0]
 800dd82:	e002      	b.n	800dd8a <_printf_i+0xee>
 800dd84:	0641      	lsls	r1, r0, #25
 800dd86:	d5fb      	bpl.n	800dd80 <_printf_i+0xe4>
 800dd88:	881e      	ldrh	r6, [r3, #0]
 800dd8a:	4853      	ldr	r0, [pc, #332]	; (800ded8 <_printf_i+0x23c>)
 800dd8c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd8e:	bf0c      	ite	eq
 800dd90:	2308      	moveq	r3, #8
 800dd92:	230a      	movne	r3, #10
 800dd94:	2100      	movs	r1, #0
 800dd96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd9a:	6865      	ldr	r5, [r4, #4]
 800dd9c:	60a5      	str	r5, [r4, #8]
 800dd9e:	2d00      	cmp	r5, #0
 800dda0:	bfa2      	ittt	ge
 800dda2:	6821      	ldrge	r1, [r4, #0]
 800dda4:	f021 0104 	bicge.w	r1, r1, #4
 800dda8:	6021      	strge	r1, [r4, #0]
 800ddaa:	b90e      	cbnz	r6, 800ddb0 <_printf_i+0x114>
 800ddac:	2d00      	cmp	r5, #0
 800ddae:	d04b      	beq.n	800de48 <_printf_i+0x1ac>
 800ddb0:	4615      	mov	r5, r2
 800ddb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddb6:	fb03 6711 	mls	r7, r3, r1, r6
 800ddba:	5dc7      	ldrb	r7, [r0, r7]
 800ddbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddc0:	4637      	mov	r7, r6
 800ddc2:	42bb      	cmp	r3, r7
 800ddc4:	460e      	mov	r6, r1
 800ddc6:	d9f4      	bls.n	800ddb2 <_printf_i+0x116>
 800ddc8:	2b08      	cmp	r3, #8
 800ddca:	d10b      	bne.n	800dde4 <_printf_i+0x148>
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	07de      	lsls	r6, r3, #31
 800ddd0:	d508      	bpl.n	800dde4 <_printf_i+0x148>
 800ddd2:	6923      	ldr	r3, [r4, #16]
 800ddd4:	6861      	ldr	r1, [r4, #4]
 800ddd6:	4299      	cmp	r1, r3
 800ddd8:	bfde      	ittt	le
 800ddda:	2330      	movle	r3, #48	; 0x30
 800dddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dde0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dde4:	1b52      	subs	r2, r2, r5
 800dde6:	6122      	str	r2, [r4, #16]
 800dde8:	f8cd a000 	str.w	sl, [sp]
 800ddec:	464b      	mov	r3, r9
 800ddee:	aa03      	add	r2, sp, #12
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	f7ff fee4 	bl	800dbc0 <_printf_common>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d14a      	bne.n	800de92 <_printf_i+0x1f6>
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	b004      	add	sp, #16
 800de02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	f043 0320 	orr.w	r3, r3, #32
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	4833      	ldr	r0, [pc, #204]	; (800dedc <_printf_i+0x240>)
 800de10:	2778      	movs	r7, #120	; 0x78
 800de12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	6829      	ldr	r1, [r5, #0]
 800de1a:	061f      	lsls	r7, r3, #24
 800de1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800de20:	d402      	bmi.n	800de28 <_printf_i+0x18c>
 800de22:	065f      	lsls	r7, r3, #25
 800de24:	bf48      	it	mi
 800de26:	b2b6      	uxthmi	r6, r6
 800de28:	07df      	lsls	r7, r3, #31
 800de2a:	bf48      	it	mi
 800de2c:	f043 0320 	orrmi.w	r3, r3, #32
 800de30:	6029      	str	r1, [r5, #0]
 800de32:	bf48      	it	mi
 800de34:	6023      	strmi	r3, [r4, #0]
 800de36:	b91e      	cbnz	r6, 800de40 <_printf_i+0x1a4>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	f023 0320 	bic.w	r3, r3, #32
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	2310      	movs	r3, #16
 800de42:	e7a7      	b.n	800dd94 <_printf_i+0xf8>
 800de44:	4824      	ldr	r0, [pc, #144]	; (800ded8 <_printf_i+0x23c>)
 800de46:	e7e4      	b.n	800de12 <_printf_i+0x176>
 800de48:	4615      	mov	r5, r2
 800de4a:	e7bd      	b.n	800ddc8 <_printf_i+0x12c>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	6826      	ldr	r6, [r4, #0]
 800de50:	6961      	ldr	r1, [r4, #20]
 800de52:	1d18      	adds	r0, r3, #4
 800de54:	6028      	str	r0, [r5, #0]
 800de56:	0635      	lsls	r5, r6, #24
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	d501      	bpl.n	800de60 <_printf_i+0x1c4>
 800de5c:	6019      	str	r1, [r3, #0]
 800de5e:	e002      	b.n	800de66 <_printf_i+0x1ca>
 800de60:	0670      	lsls	r0, r6, #25
 800de62:	d5fb      	bpl.n	800de5c <_printf_i+0x1c0>
 800de64:	8019      	strh	r1, [r3, #0]
 800de66:	2300      	movs	r3, #0
 800de68:	6123      	str	r3, [r4, #16]
 800de6a:	4615      	mov	r5, r2
 800de6c:	e7bc      	b.n	800dde8 <_printf_i+0x14c>
 800de6e:	682b      	ldr	r3, [r5, #0]
 800de70:	1d1a      	adds	r2, r3, #4
 800de72:	602a      	str	r2, [r5, #0]
 800de74:	681d      	ldr	r5, [r3, #0]
 800de76:	6862      	ldr	r2, [r4, #4]
 800de78:	2100      	movs	r1, #0
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7f2 f9a8 	bl	80001d0 <memchr>
 800de80:	b108      	cbz	r0, 800de86 <_printf_i+0x1ea>
 800de82:	1b40      	subs	r0, r0, r5
 800de84:	6060      	str	r0, [r4, #4]
 800de86:	6863      	ldr	r3, [r4, #4]
 800de88:	6123      	str	r3, [r4, #16]
 800de8a:	2300      	movs	r3, #0
 800de8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de90:	e7aa      	b.n	800dde8 <_printf_i+0x14c>
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	462a      	mov	r2, r5
 800de96:	4649      	mov	r1, r9
 800de98:	4640      	mov	r0, r8
 800de9a:	47d0      	blx	sl
 800de9c:	3001      	adds	r0, #1
 800de9e:	d0ad      	beq.n	800ddfc <_printf_i+0x160>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	079b      	lsls	r3, r3, #30
 800dea4:	d413      	bmi.n	800dece <_printf_i+0x232>
 800dea6:	68e0      	ldr	r0, [r4, #12]
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	4298      	cmp	r0, r3
 800deac:	bfb8      	it	lt
 800deae:	4618      	movlt	r0, r3
 800deb0:	e7a6      	b.n	800de00 <_printf_i+0x164>
 800deb2:	2301      	movs	r3, #1
 800deb4:	4632      	mov	r2, r6
 800deb6:	4649      	mov	r1, r9
 800deb8:	4640      	mov	r0, r8
 800deba:	47d0      	blx	sl
 800debc:	3001      	adds	r0, #1
 800debe:	d09d      	beq.n	800ddfc <_printf_i+0x160>
 800dec0:	3501      	adds	r5, #1
 800dec2:	68e3      	ldr	r3, [r4, #12]
 800dec4:	9903      	ldr	r1, [sp, #12]
 800dec6:	1a5b      	subs	r3, r3, r1
 800dec8:	42ab      	cmp	r3, r5
 800deca:	dcf2      	bgt.n	800deb2 <_printf_i+0x216>
 800decc:	e7eb      	b.n	800dea6 <_printf_i+0x20a>
 800dece:	2500      	movs	r5, #0
 800ded0:	f104 0619 	add.w	r6, r4, #25
 800ded4:	e7f5      	b.n	800dec2 <_printf_i+0x226>
 800ded6:	bf00      	nop
 800ded8:	0801069a 	.word	0x0801069a
 800dedc:	080106ab 	.word	0x080106ab

0800dee0 <std>:
 800dee0:	2300      	movs	r3, #0
 800dee2:	b510      	push	{r4, lr}
 800dee4:	4604      	mov	r4, r0
 800dee6:	e9c0 3300 	strd	r3, r3, [r0]
 800deea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800deee:	6083      	str	r3, [r0, #8]
 800def0:	8181      	strh	r1, [r0, #12]
 800def2:	6643      	str	r3, [r0, #100]	; 0x64
 800def4:	81c2      	strh	r2, [r0, #14]
 800def6:	6183      	str	r3, [r0, #24]
 800def8:	4619      	mov	r1, r3
 800defa:	2208      	movs	r2, #8
 800defc:	305c      	adds	r0, #92	; 0x5c
 800defe:	f000 fa17 	bl	800e330 <memset>
 800df02:	4b0d      	ldr	r3, [pc, #52]	; (800df38 <std+0x58>)
 800df04:	6263      	str	r3, [r4, #36]	; 0x24
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <std+0x5c>)
 800df08:	62a3      	str	r3, [r4, #40]	; 0x28
 800df0a:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <std+0x60>)
 800df0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df0e:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <std+0x64>)
 800df10:	6323      	str	r3, [r4, #48]	; 0x30
 800df12:	4b0d      	ldr	r3, [pc, #52]	; (800df48 <std+0x68>)
 800df14:	6224      	str	r4, [r4, #32]
 800df16:	429c      	cmp	r4, r3
 800df18:	d006      	beq.n	800df28 <std+0x48>
 800df1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800df1e:	4294      	cmp	r4, r2
 800df20:	d002      	beq.n	800df28 <std+0x48>
 800df22:	33d0      	adds	r3, #208	; 0xd0
 800df24:	429c      	cmp	r4, r3
 800df26:	d105      	bne.n	800df34 <std+0x54>
 800df28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df30:	f000 ba7a 	b.w	800e428 <__retarget_lock_init_recursive>
 800df34:	bd10      	pop	{r4, pc}
 800df36:	bf00      	nop
 800df38:	0800e181 	.word	0x0800e181
 800df3c:	0800e1a3 	.word	0x0800e1a3
 800df40:	0800e1db 	.word	0x0800e1db
 800df44:	0800e1ff 	.word	0x0800e1ff
 800df48:	2000a7b8 	.word	0x2000a7b8

0800df4c <stdio_exit_handler>:
 800df4c:	4a02      	ldr	r2, [pc, #8]	; (800df58 <stdio_exit_handler+0xc>)
 800df4e:	4903      	ldr	r1, [pc, #12]	; (800df5c <stdio_exit_handler+0x10>)
 800df50:	4803      	ldr	r0, [pc, #12]	; (800df60 <stdio_exit_handler+0x14>)
 800df52:	f000 b869 	b.w	800e028 <_fwalk_sglue>
 800df56:	bf00      	nop
 800df58:	20000070 	.word	0x20000070
 800df5c:	08010091 	.word	0x08010091
 800df60:	2000007c 	.word	0x2000007c

0800df64 <cleanup_stdio>:
 800df64:	6841      	ldr	r1, [r0, #4]
 800df66:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <cleanup_stdio+0x34>)
 800df68:	4299      	cmp	r1, r3
 800df6a:	b510      	push	{r4, lr}
 800df6c:	4604      	mov	r4, r0
 800df6e:	d001      	beq.n	800df74 <cleanup_stdio+0x10>
 800df70:	f002 f88e 	bl	8010090 <_fflush_r>
 800df74:	68a1      	ldr	r1, [r4, #8]
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <cleanup_stdio+0x38>)
 800df78:	4299      	cmp	r1, r3
 800df7a:	d002      	beq.n	800df82 <cleanup_stdio+0x1e>
 800df7c:	4620      	mov	r0, r4
 800df7e:	f002 f887 	bl	8010090 <_fflush_r>
 800df82:	68e1      	ldr	r1, [r4, #12]
 800df84:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <cleanup_stdio+0x3c>)
 800df86:	4299      	cmp	r1, r3
 800df88:	d004      	beq.n	800df94 <cleanup_stdio+0x30>
 800df8a:	4620      	mov	r0, r4
 800df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df90:	f002 b87e 	b.w	8010090 <_fflush_r>
 800df94:	bd10      	pop	{r4, pc}
 800df96:	bf00      	nop
 800df98:	2000a7b8 	.word	0x2000a7b8
 800df9c:	2000a820 	.word	0x2000a820
 800dfa0:	2000a888 	.word	0x2000a888

0800dfa4 <global_stdio_init.part.0>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <global_stdio_init.part.0+0x30>)
 800dfa8:	4c0b      	ldr	r4, [pc, #44]	; (800dfd8 <global_stdio_init.part.0+0x34>)
 800dfaa:	4a0c      	ldr	r2, [pc, #48]	; (800dfdc <global_stdio_init.part.0+0x38>)
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	f7ff ff94 	bl	800dee0 <std>
 800dfb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	2109      	movs	r1, #9
 800dfc0:	f7ff ff8e 	bl	800dee0 <std>
 800dfc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dfc8:	2202      	movs	r2, #2
 800dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfce:	2112      	movs	r1, #18
 800dfd0:	f7ff bf86 	b.w	800dee0 <std>
 800dfd4:	2000a8f0 	.word	0x2000a8f0
 800dfd8:	2000a7b8 	.word	0x2000a7b8
 800dfdc:	0800df4d 	.word	0x0800df4d

0800dfe0 <__sfp_lock_acquire>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	; (800dfe8 <__sfp_lock_acquire+0x8>)
 800dfe2:	f000 ba22 	b.w	800e42a <__retarget_lock_acquire_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	2000a8f9 	.word	0x2000a8f9

0800dfec <__sfp_lock_release>:
 800dfec:	4801      	ldr	r0, [pc, #4]	; (800dff4 <__sfp_lock_release+0x8>)
 800dfee:	f000 ba1d 	b.w	800e42c <__retarget_lock_release_recursive>
 800dff2:	bf00      	nop
 800dff4:	2000a8f9 	.word	0x2000a8f9

0800dff8 <__sinit>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	4604      	mov	r4, r0
 800dffc:	f7ff fff0 	bl	800dfe0 <__sfp_lock_acquire>
 800e000:	6a23      	ldr	r3, [r4, #32]
 800e002:	b11b      	cbz	r3, 800e00c <__sinit+0x14>
 800e004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e008:	f7ff bff0 	b.w	800dfec <__sfp_lock_release>
 800e00c:	4b04      	ldr	r3, [pc, #16]	; (800e020 <__sinit+0x28>)
 800e00e:	6223      	str	r3, [r4, #32]
 800e010:	4b04      	ldr	r3, [pc, #16]	; (800e024 <__sinit+0x2c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1f5      	bne.n	800e004 <__sinit+0xc>
 800e018:	f7ff ffc4 	bl	800dfa4 <global_stdio_init.part.0>
 800e01c:	e7f2      	b.n	800e004 <__sinit+0xc>
 800e01e:	bf00      	nop
 800e020:	0800df65 	.word	0x0800df65
 800e024:	2000a8f0 	.word	0x2000a8f0

0800e028 <_fwalk_sglue>:
 800e028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e02c:	4607      	mov	r7, r0
 800e02e:	4688      	mov	r8, r1
 800e030:	4614      	mov	r4, r2
 800e032:	2600      	movs	r6, #0
 800e034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e038:	f1b9 0901 	subs.w	r9, r9, #1
 800e03c:	d505      	bpl.n	800e04a <_fwalk_sglue+0x22>
 800e03e:	6824      	ldr	r4, [r4, #0]
 800e040:	2c00      	cmp	r4, #0
 800e042:	d1f7      	bne.n	800e034 <_fwalk_sglue+0xc>
 800e044:	4630      	mov	r0, r6
 800e046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d907      	bls.n	800e060 <_fwalk_sglue+0x38>
 800e050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e054:	3301      	adds	r3, #1
 800e056:	d003      	beq.n	800e060 <_fwalk_sglue+0x38>
 800e058:	4629      	mov	r1, r5
 800e05a:	4638      	mov	r0, r7
 800e05c:	47c0      	blx	r8
 800e05e:	4306      	orrs	r6, r0
 800e060:	3568      	adds	r5, #104	; 0x68
 800e062:	e7e9      	b.n	800e038 <_fwalk_sglue+0x10>

0800e064 <iprintf>:
 800e064:	b40f      	push	{r0, r1, r2, r3}
 800e066:	b507      	push	{r0, r1, r2, lr}
 800e068:	4906      	ldr	r1, [pc, #24]	; (800e084 <iprintf+0x20>)
 800e06a:	ab04      	add	r3, sp, #16
 800e06c:	6808      	ldr	r0, [r1, #0]
 800e06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e072:	6881      	ldr	r1, [r0, #8]
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	f001 fe6b 	bl	800fd50 <_vfiprintf_r>
 800e07a:	b003      	add	sp, #12
 800e07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e080:	b004      	add	sp, #16
 800e082:	4770      	bx	lr
 800e084:	200000c8 	.word	0x200000c8

0800e088 <_puts_r>:
 800e088:	6a03      	ldr	r3, [r0, #32]
 800e08a:	b570      	push	{r4, r5, r6, lr}
 800e08c:	6884      	ldr	r4, [r0, #8]
 800e08e:	4605      	mov	r5, r0
 800e090:	460e      	mov	r6, r1
 800e092:	b90b      	cbnz	r3, 800e098 <_puts_r+0x10>
 800e094:	f7ff ffb0 	bl	800dff8 <__sinit>
 800e098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e09a:	07db      	lsls	r3, r3, #31
 800e09c:	d405      	bmi.n	800e0aa <_puts_r+0x22>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	0598      	lsls	r0, r3, #22
 800e0a2:	d402      	bmi.n	800e0aa <_puts_r+0x22>
 800e0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0a6:	f000 f9c0 	bl	800e42a <__retarget_lock_acquire_recursive>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	0719      	lsls	r1, r3, #28
 800e0ae:	d513      	bpl.n	800e0d8 <_puts_r+0x50>
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	b18b      	cbz	r3, 800e0d8 <_puts_r+0x50>
 800e0b4:	3e01      	subs	r6, #1
 800e0b6:	68a3      	ldr	r3, [r4, #8]
 800e0b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	60a3      	str	r3, [r4, #8]
 800e0c0:	b9e9      	cbnz	r1, 800e0fe <_puts_r+0x76>
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	da2e      	bge.n	800e124 <_puts_r+0x9c>
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	210a      	movs	r1, #10
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f000 f89b 	bl	800e206 <__swbuf_r>
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d007      	beq.n	800e0e4 <_puts_r+0x5c>
 800e0d4:	250a      	movs	r5, #10
 800e0d6:	e007      	b.n	800e0e8 <_puts_r+0x60>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f000 f8d0 	bl	800e280 <__swsetup_r>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d0e7      	beq.n	800e0b4 <_puts_r+0x2c>
 800e0e4:	f04f 35ff 	mov.w	r5, #4294967295
 800e0e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0ea:	07da      	lsls	r2, r3, #31
 800e0ec:	d405      	bmi.n	800e0fa <_puts_r+0x72>
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	059b      	lsls	r3, r3, #22
 800e0f2:	d402      	bmi.n	800e0fa <_puts_r+0x72>
 800e0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0f6:	f000 f999 	bl	800e42c <__retarget_lock_release_recursive>
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	bd70      	pop	{r4, r5, r6, pc}
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	da04      	bge.n	800e10c <_puts_r+0x84>
 800e102:	69a2      	ldr	r2, [r4, #24]
 800e104:	429a      	cmp	r2, r3
 800e106:	dc06      	bgt.n	800e116 <_puts_r+0x8e>
 800e108:	290a      	cmp	r1, #10
 800e10a:	d004      	beq.n	800e116 <_puts_r+0x8e>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	6022      	str	r2, [r4, #0]
 800e112:	7019      	strb	r1, [r3, #0]
 800e114:	e7cf      	b.n	800e0b6 <_puts_r+0x2e>
 800e116:	4622      	mov	r2, r4
 800e118:	4628      	mov	r0, r5
 800e11a:	f000 f874 	bl	800e206 <__swbuf_r>
 800e11e:	3001      	adds	r0, #1
 800e120:	d1c9      	bne.n	800e0b6 <_puts_r+0x2e>
 800e122:	e7df      	b.n	800e0e4 <_puts_r+0x5c>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	250a      	movs	r5, #10
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	6022      	str	r2, [r4, #0]
 800e12c:	701d      	strb	r5, [r3, #0]
 800e12e:	e7db      	b.n	800e0e8 <_puts_r+0x60>

0800e130 <puts>:
 800e130:	4b02      	ldr	r3, [pc, #8]	; (800e13c <puts+0xc>)
 800e132:	4601      	mov	r1, r0
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	f7ff bfa7 	b.w	800e088 <_puts_r>
 800e13a:	bf00      	nop
 800e13c:	200000c8 	.word	0x200000c8

0800e140 <siprintf>:
 800e140:	b40e      	push	{r1, r2, r3}
 800e142:	b500      	push	{lr}
 800e144:	b09c      	sub	sp, #112	; 0x70
 800e146:	ab1d      	add	r3, sp, #116	; 0x74
 800e148:	9002      	str	r0, [sp, #8]
 800e14a:	9006      	str	r0, [sp, #24]
 800e14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e150:	4809      	ldr	r0, [pc, #36]	; (800e178 <siprintf+0x38>)
 800e152:	9107      	str	r1, [sp, #28]
 800e154:	9104      	str	r1, [sp, #16]
 800e156:	4909      	ldr	r1, [pc, #36]	; (800e17c <siprintf+0x3c>)
 800e158:	f853 2b04 	ldr.w	r2, [r3], #4
 800e15c:	9105      	str	r1, [sp, #20]
 800e15e:	6800      	ldr	r0, [r0, #0]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	a902      	add	r1, sp, #8
 800e164:	f001 fccc 	bl	800fb00 <_svfiprintf_r>
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	b01c      	add	sp, #112	; 0x70
 800e170:	f85d eb04 	ldr.w	lr, [sp], #4
 800e174:	b003      	add	sp, #12
 800e176:	4770      	bx	lr
 800e178:	200000c8 	.word	0x200000c8
 800e17c:	ffff0208 	.word	0xffff0208

0800e180 <__sread>:
 800e180:	b510      	push	{r4, lr}
 800e182:	460c      	mov	r4, r1
 800e184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e188:	f000 f900 	bl	800e38c <_read_r>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	bfab      	itete	ge
 800e190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e192:	89a3      	ldrhlt	r3, [r4, #12]
 800e194:	181b      	addge	r3, r3, r0
 800e196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e19a:	bfac      	ite	ge
 800e19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e19e:	81a3      	strhlt	r3, [r4, #12]
 800e1a0:	bd10      	pop	{r4, pc}

0800e1a2 <__swrite>:
 800e1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a6:	461f      	mov	r7, r3
 800e1a8:	898b      	ldrh	r3, [r1, #12]
 800e1aa:	05db      	lsls	r3, r3, #23
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	4616      	mov	r6, r2
 800e1b2:	d505      	bpl.n	800e1c0 <__swrite+0x1e>
 800e1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f000 f8d4 	bl	800e368 <_lseek_r>
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1ca:	81a3      	strh	r3, [r4, #12]
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d6:	f000 b8eb 	b.w	800e3b0 <_write_r>

0800e1da <__sseek>:
 800e1da:	b510      	push	{r4, lr}
 800e1dc:	460c      	mov	r4, r1
 800e1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e2:	f000 f8c1 	bl	800e368 <_lseek_r>
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	bf15      	itete	ne
 800e1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1f6:	81a3      	strheq	r3, [r4, #12]
 800e1f8:	bf18      	it	ne
 800e1fa:	81a3      	strhne	r3, [r4, #12]
 800e1fc:	bd10      	pop	{r4, pc}

0800e1fe <__sclose>:
 800e1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e202:	f000 b8a1 	b.w	800e348 <_close_r>

0800e206 <__swbuf_r>:
 800e206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e208:	460e      	mov	r6, r1
 800e20a:	4614      	mov	r4, r2
 800e20c:	4605      	mov	r5, r0
 800e20e:	b118      	cbz	r0, 800e218 <__swbuf_r+0x12>
 800e210:	6a03      	ldr	r3, [r0, #32]
 800e212:	b90b      	cbnz	r3, 800e218 <__swbuf_r+0x12>
 800e214:	f7ff fef0 	bl	800dff8 <__sinit>
 800e218:	69a3      	ldr	r3, [r4, #24]
 800e21a:	60a3      	str	r3, [r4, #8]
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	071a      	lsls	r2, r3, #28
 800e220:	d525      	bpl.n	800e26e <__swbuf_r+0x68>
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	b31b      	cbz	r3, 800e26e <__swbuf_r+0x68>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	1a98      	subs	r0, r3, r2
 800e22c:	6963      	ldr	r3, [r4, #20]
 800e22e:	b2f6      	uxtb	r6, r6
 800e230:	4283      	cmp	r3, r0
 800e232:	4637      	mov	r7, r6
 800e234:	dc04      	bgt.n	800e240 <__swbuf_r+0x3a>
 800e236:	4621      	mov	r1, r4
 800e238:	4628      	mov	r0, r5
 800e23a:	f001 ff29 	bl	8010090 <_fflush_r>
 800e23e:	b9e0      	cbnz	r0, 800e27a <__swbuf_r+0x74>
 800e240:	68a3      	ldr	r3, [r4, #8]
 800e242:	3b01      	subs	r3, #1
 800e244:	60a3      	str	r3, [r4, #8]
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	6022      	str	r2, [r4, #0]
 800e24c:	701e      	strb	r6, [r3, #0]
 800e24e:	6962      	ldr	r2, [r4, #20]
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	429a      	cmp	r2, r3
 800e254:	d004      	beq.n	800e260 <__swbuf_r+0x5a>
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	07db      	lsls	r3, r3, #31
 800e25a:	d506      	bpl.n	800e26a <__swbuf_r+0x64>
 800e25c:	2e0a      	cmp	r6, #10
 800e25e:	d104      	bne.n	800e26a <__swbuf_r+0x64>
 800e260:	4621      	mov	r1, r4
 800e262:	4628      	mov	r0, r5
 800e264:	f001 ff14 	bl	8010090 <_fflush_r>
 800e268:	b938      	cbnz	r0, 800e27a <__swbuf_r+0x74>
 800e26a:	4638      	mov	r0, r7
 800e26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	f000 f805 	bl	800e280 <__swsetup_r>
 800e276:	2800      	cmp	r0, #0
 800e278:	d0d5      	beq.n	800e226 <__swbuf_r+0x20>
 800e27a:	f04f 37ff 	mov.w	r7, #4294967295
 800e27e:	e7f4      	b.n	800e26a <__swbuf_r+0x64>

0800e280 <__swsetup_r>:
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	4b2a      	ldr	r3, [pc, #168]	; (800e32c <__swsetup_r+0xac>)
 800e284:	4605      	mov	r5, r0
 800e286:	6818      	ldr	r0, [r3, #0]
 800e288:	460c      	mov	r4, r1
 800e28a:	b118      	cbz	r0, 800e294 <__swsetup_r+0x14>
 800e28c:	6a03      	ldr	r3, [r0, #32]
 800e28e:	b90b      	cbnz	r3, 800e294 <__swsetup_r+0x14>
 800e290:	f7ff feb2 	bl	800dff8 <__sinit>
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e29a:	0718      	lsls	r0, r3, #28
 800e29c:	d422      	bmi.n	800e2e4 <__swsetup_r+0x64>
 800e29e:	06d9      	lsls	r1, r3, #27
 800e2a0:	d407      	bmi.n	800e2b2 <__swsetup_r+0x32>
 800e2a2:	2309      	movs	r3, #9
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	e034      	b.n	800e31c <__swsetup_r+0x9c>
 800e2b2:	0758      	lsls	r0, r3, #29
 800e2b4:	d512      	bpl.n	800e2dc <__swsetup_r+0x5c>
 800e2b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2b8:	b141      	cbz	r1, 800e2cc <__swsetup_r+0x4c>
 800e2ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2be:	4299      	cmp	r1, r3
 800e2c0:	d002      	beq.n	800e2c8 <__swsetup_r+0x48>
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f000 ff46 	bl	800f154 <_free_r>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	6363      	str	r3, [r4, #52]	; 0x34
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2d2:	81a3      	strh	r3, [r4, #12]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	6063      	str	r3, [r4, #4]
 800e2d8:	6923      	ldr	r3, [r4, #16]
 800e2da:	6023      	str	r3, [r4, #0]
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	f043 0308 	orr.w	r3, r3, #8
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	b94b      	cbnz	r3, 800e2fc <__swsetup_r+0x7c>
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f2:	d003      	beq.n	800e2fc <__swsetup_r+0x7c>
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	f001 ff18 	bl	801012c <__smakebuf_r>
 800e2fc:	89a0      	ldrh	r0, [r4, #12]
 800e2fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e302:	f010 0301 	ands.w	r3, r0, #1
 800e306:	d00a      	beq.n	800e31e <__swsetup_r+0x9e>
 800e308:	2300      	movs	r3, #0
 800e30a:	60a3      	str	r3, [r4, #8]
 800e30c:	6963      	ldr	r3, [r4, #20]
 800e30e:	425b      	negs	r3, r3
 800e310:	61a3      	str	r3, [r4, #24]
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	b943      	cbnz	r3, 800e328 <__swsetup_r+0xa8>
 800e316:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e31a:	d1c4      	bne.n	800e2a6 <__swsetup_r+0x26>
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 800e31e:	0781      	lsls	r1, r0, #30
 800e320:	bf58      	it	pl
 800e322:	6963      	ldrpl	r3, [r4, #20]
 800e324:	60a3      	str	r3, [r4, #8]
 800e326:	e7f4      	b.n	800e312 <__swsetup_r+0x92>
 800e328:	2000      	movs	r0, #0
 800e32a:	e7f7      	b.n	800e31c <__swsetup_r+0x9c>
 800e32c:	200000c8 	.word	0x200000c8

0800e330 <memset>:
 800e330:	4402      	add	r2, r0
 800e332:	4603      	mov	r3, r0
 800e334:	4293      	cmp	r3, r2
 800e336:	d100      	bne.n	800e33a <memset+0xa>
 800e338:	4770      	bx	lr
 800e33a:	f803 1b01 	strb.w	r1, [r3], #1
 800e33e:	e7f9      	b.n	800e334 <memset+0x4>

0800e340 <_localeconv_r>:
 800e340:	4800      	ldr	r0, [pc, #0]	; (800e344 <_localeconv_r+0x4>)
 800e342:	4770      	bx	lr
 800e344:	200001bc 	.word	0x200001bc

0800e348 <_close_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d06      	ldr	r5, [pc, #24]	; (800e364 <_close_r+0x1c>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	f7f4 fea5 	bl	80030a2 <_close>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_close_r+0x1a>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_close_r+0x1a>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	2000a8f4 	.word	0x2000a8f4

0800e368 <_lseek_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	; (800e388 <_lseek_r+0x20>)
 800e36c:	4604      	mov	r4, r0
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	2200      	movs	r2, #0
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f4 feba 	bl	80030f0 <_lseek>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_lseek_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_lseek_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	2000a8f4 	.word	0x2000a8f4

0800e38c <_read_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d07      	ldr	r5, [pc, #28]	; (800e3ac <_read_r+0x20>)
 800e390:	4604      	mov	r4, r0
 800e392:	4608      	mov	r0, r1
 800e394:	4611      	mov	r1, r2
 800e396:	2200      	movs	r2, #0
 800e398:	602a      	str	r2, [r5, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	f7f4 fe48 	bl	8003030 <_read>
 800e3a0:	1c43      	adds	r3, r0, #1
 800e3a2:	d102      	bne.n	800e3aa <_read_r+0x1e>
 800e3a4:	682b      	ldr	r3, [r5, #0]
 800e3a6:	b103      	cbz	r3, 800e3aa <_read_r+0x1e>
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	bd38      	pop	{r3, r4, r5, pc}
 800e3ac:	2000a8f4 	.word	0x2000a8f4

0800e3b0 <_write_r>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4d07      	ldr	r5, [pc, #28]	; (800e3d0 <_write_r+0x20>)
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	4608      	mov	r0, r1
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	602a      	str	r2, [r5, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f7f4 fe53 	bl	800306a <_write>
 800e3c4:	1c43      	adds	r3, r0, #1
 800e3c6:	d102      	bne.n	800e3ce <_write_r+0x1e>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b103      	cbz	r3, 800e3ce <_write_r+0x1e>
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	2000a8f4 	.word	0x2000a8f4

0800e3d4 <__errno>:
 800e3d4:	4b01      	ldr	r3, [pc, #4]	; (800e3dc <__errno+0x8>)
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	200000c8 	.word	0x200000c8

0800e3e0 <__libc_init_array>:
 800e3e0:	b570      	push	{r4, r5, r6, lr}
 800e3e2:	4d0d      	ldr	r5, [pc, #52]	; (800e418 <__libc_init_array+0x38>)
 800e3e4:	4c0d      	ldr	r4, [pc, #52]	; (800e41c <__libc_init_array+0x3c>)
 800e3e6:	1b64      	subs	r4, r4, r5
 800e3e8:	10a4      	asrs	r4, r4, #2
 800e3ea:	2600      	movs	r6, #0
 800e3ec:	42a6      	cmp	r6, r4
 800e3ee:	d109      	bne.n	800e404 <__libc_init_array+0x24>
 800e3f0:	4d0b      	ldr	r5, [pc, #44]	; (800e420 <__libc_init_array+0x40>)
 800e3f2:	4c0c      	ldr	r4, [pc, #48]	; (800e424 <__libc_init_array+0x44>)
 800e3f4:	f002 f80a 	bl	801040c <_init>
 800e3f8:	1b64      	subs	r4, r4, r5
 800e3fa:	10a4      	asrs	r4, r4, #2
 800e3fc:	2600      	movs	r6, #0
 800e3fe:	42a6      	cmp	r6, r4
 800e400:	d105      	bne.n	800e40e <__libc_init_array+0x2e>
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	f855 3b04 	ldr.w	r3, [r5], #4
 800e408:	4798      	blx	r3
 800e40a:	3601      	adds	r6, #1
 800e40c:	e7ee      	b.n	800e3ec <__libc_init_array+0xc>
 800e40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e412:	4798      	blx	r3
 800e414:	3601      	adds	r6, #1
 800e416:	e7f2      	b.n	800e3fe <__libc_init_array+0x1e>
 800e418:	08010a04 	.word	0x08010a04
 800e41c:	08010a04 	.word	0x08010a04
 800e420:	08010a04 	.word	0x08010a04
 800e424:	08010a08 	.word	0x08010a08

0800e428 <__retarget_lock_init_recursive>:
 800e428:	4770      	bx	lr

0800e42a <__retarget_lock_acquire_recursive>:
 800e42a:	4770      	bx	lr

0800e42c <__retarget_lock_release_recursive>:
 800e42c:	4770      	bx	lr

0800e42e <strcpy>:
 800e42e:	4603      	mov	r3, r0
 800e430:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e434:	f803 2b01 	strb.w	r2, [r3], #1
 800e438:	2a00      	cmp	r2, #0
 800e43a:	d1f9      	bne.n	800e430 <strcpy+0x2>
 800e43c:	4770      	bx	lr

0800e43e <memcpy>:
 800e43e:	440a      	add	r2, r1
 800e440:	4291      	cmp	r1, r2
 800e442:	f100 33ff 	add.w	r3, r0, #4294967295
 800e446:	d100      	bne.n	800e44a <memcpy+0xc>
 800e448:	4770      	bx	lr
 800e44a:	b510      	push	{r4, lr}
 800e44c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e450:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e454:	4291      	cmp	r1, r2
 800e456:	d1f9      	bne.n	800e44c <memcpy+0xe>
 800e458:	bd10      	pop	{r4, pc}

0800e45a <quorem>:
 800e45a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45e:	6903      	ldr	r3, [r0, #16]
 800e460:	690c      	ldr	r4, [r1, #16]
 800e462:	42a3      	cmp	r3, r4
 800e464:	4607      	mov	r7, r0
 800e466:	db7e      	blt.n	800e566 <quorem+0x10c>
 800e468:	3c01      	subs	r4, #1
 800e46a:	f101 0814 	add.w	r8, r1, #20
 800e46e:	f100 0514 	add.w	r5, r0, #20
 800e472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e480:	3301      	adds	r3, #1
 800e482:	429a      	cmp	r2, r3
 800e484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e48c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e490:	d331      	bcc.n	800e4f6 <quorem+0x9c>
 800e492:	f04f 0e00 	mov.w	lr, #0
 800e496:	4640      	mov	r0, r8
 800e498:	46ac      	mov	ip, r5
 800e49a:	46f2      	mov	sl, lr
 800e49c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4a0:	b293      	uxth	r3, r2
 800e4a2:	fb06 e303 	mla	r3, r6, r3, lr
 800e4a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4aa:	0c1a      	lsrs	r2, r3, #16
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	ebaa 0303 	sub.w	r3, sl, r3
 800e4b2:	f8dc a000 	ldr.w	sl, [ip]
 800e4b6:	fa13 f38a 	uxtah	r3, r3, sl
 800e4ba:	fb06 220e 	mla	r2, r6, lr, r2
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	9b00      	ldr	r3, [sp, #0]
 800e4c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4c6:	b292      	uxth	r2, r2
 800e4c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e4cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e4d4:	4581      	cmp	r9, r0
 800e4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4da:	f84c 3b04 	str.w	r3, [ip], #4
 800e4de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4e2:	d2db      	bcs.n	800e49c <quorem+0x42>
 800e4e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4e8:	b92b      	cbnz	r3, 800e4f6 <quorem+0x9c>
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	3b04      	subs	r3, #4
 800e4ee:	429d      	cmp	r5, r3
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	d32c      	bcc.n	800e54e <quorem+0xf4>
 800e4f4:	613c      	str	r4, [r7, #16]
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	f001 f9a8 	bl	800f84c <__mcmp>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	db22      	blt.n	800e546 <quorem+0xec>
 800e500:	3601      	adds	r6, #1
 800e502:	4629      	mov	r1, r5
 800e504:	2000      	movs	r0, #0
 800e506:	f858 2b04 	ldr.w	r2, [r8], #4
 800e50a:	f8d1 c000 	ldr.w	ip, [r1]
 800e50e:	b293      	uxth	r3, r2
 800e510:	1ac3      	subs	r3, r0, r3
 800e512:	0c12      	lsrs	r2, r2, #16
 800e514:	fa13 f38c 	uxtah	r3, r3, ip
 800e518:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e51c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e520:	b29b      	uxth	r3, r3
 800e522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e526:	45c1      	cmp	r9, r8
 800e528:	f841 3b04 	str.w	r3, [r1], #4
 800e52c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e530:	d2e9      	bcs.n	800e506 <quorem+0xac>
 800e532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e53a:	b922      	cbnz	r2, 800e546 <quorem+0xec>
 800e53c:	3b04      	subs	r3, #4
 800e53e:	429d      	cmp	r5, r3
 800e540:	461a      	mov	r2, r3
 800e542:	d30a      	bcc.n	800e55a <quorem+0x100>
 800e544:	613c      	str	r4, [r7, #16]
 800e546:	4630      	mov	r0, r6
 800e548:	b003      	add	sp, #12
 800e54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54e:	6812      	ldr	r2, [r2, #0]
 800e550:	3b04      	subs	r3, #4
 800e552:	2a00      	cmp	r2, #0
 800e554:	d1ce      	bne.n	800e4f4 <quorem+0x9a>
 800e556:	3c01      	subs	r4, #1
 800e558:	e7c9      	b.n	800e4ee <quorem+0x94>
 800e55a:	6812      	ldr	r2, [r2, #0]
 800e55c:	3b04      	subs	r3, #4
 800e55e:	2a00      	cmp	r2, #0
 800e560:	d1f0      	bne.n	800e544 <quorem+0xea>
 800e562:	3c01      	subs	r4, #1
 800e564:	e7eb      	b.n	800e53e <quorem+0xe4>
 800e566:	2000      	movs	r0, #0
 800e568:	e7ee      	b.n	800e548 <quorem+0xee>
 800e56a:	0000      	movs	r0, r0
 800e56c:	0000      	movs	r0, r0
	...

0800e570 <_dtoa_r>:
 800e570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e574:	ed2d 8b04 	vpush	{d8-d9}
 800e578:	69c5      	ldr	r5, [r0, #28]
 800e57a:	b093      	sub	sp, #76	; 0x4c
 800e57c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e580:	ec57 6b10 	vmov	r6, r7, d0
 800e584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e588:	9107      	str	r1, [sp, #28]
 800e58a:	4604      	mov	r4, r0
 800e58c:	920a      	str	r2, [sp, #40]	; 0x28
 800e58e:	930d      	str	r3, [sp, #52]	; 0x34
 800e590:	b975      	cbnz	r5, 800e5b0 <_dtoa_r+0x40>
 800e592:	2010      	movs	r0, #16
 800e594:	f000 fe2a 	bl	800f1ec <malloc>
 800e598:	4602      	mov	r2, r0
 800e59a:	61e0      	str	r0, [r4, #28]
 800e59c:	b920      	cbnz	r0, 800e5a8 <_dtoa_r+0x38>
 800e59e:	4bae      	ldr	r3, [pc, #696]	; (800e858 <_dtoa_r+0x2e8>)
 800e5a0:	21ef      	movs	r1, #239	; 0xef
 800e5a2:	48ae      	ldr	r0, [pc, #696]	; (800e85c <_dtoa_r+0x2ec>)
 800e5a4:	f001 fe4a 	bl	801023c <__assert_func>
 800e5a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5ac:	6005      	str	r5, [r0, #0]
 800e5ae:	60c5      	str	r5, [r0, #12]
 800e5b0:	69e3      	ldr	r3, [r4, #28]
 800e5b2:	6819      	ldr	r1, [r3, #0]
 800e5b4:	b151      	cbz	r1, 800e5cc <_dtoa_r+0x5c>
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	604a      	str	r2, [r1, #4]
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4093      	lsls	r3, r2
 800e5be:	608b      	str	r3, [r1, #8]
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f000 ff07 	bl	800f3d4 <_Bfree>
 800e5c6:	69e3      	ldr	r3, [r4, #28]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	1e3b      	subs	r3, r7, #0
 800e5ce:	bfbb      	ittet	lt
 800e5d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e5d4:	9303      	strlt	r3, [sp, #12]
 800e5d6:	2300      	movge	r3, #0
 800e5d8:	2201      	movlt	r2, #1
 800e5da:	bfac      	ite	ge
 800e5dc:	f8c8 3000 	strge.w	r3, [r8]
 800e5e0:	f8c8 2000 	strlt.w	r2, [r8]
 800e5e4:	4b9e      	ldr	r3, [pc, #632]	; (800e860 <_dtoa_r+0x2f0>)
 800e5e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e5ea:	ea33 0308 	bics.w	r3, r3, r8
 800e5ee:	d11b      	bne.n	800e628 <_dtoa_r+0xb8>
 800e5f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e5fc:	4333      	orrs	r3, r6
 800e5fe:	f000 8593 	beq.w	800f128 <_dtoa_r+0xbb8>
 800e602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e604:	b963      	cbnz	r3, 800e620 <_dtoa_r+0xb0>
 800e606:	4b97      	ldr	r3, [pc, #604]	; (800e864 <_dtoa_r+0x2f4>)
 800e608:	e027      	b.n	800e65a <_dtoa_r+0xea>
 800e60a:	4b97      	ldr	r3, [pc, #604]	; (800e868 <_dtoa_r+0x2f8>)
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	3308      	adds	r3, #8
 800e610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	9800      	ldr	r0, [sp, #0]
 800e616:	b013      	add	sp, #76	; 0x4c
 800e618:	ecbd 8b04 	vpop	{d8-d9}
 800e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	4b90      	ldr	r3, [pc, #576]	; (800e864 <_dtoa_r+0x2f4>)
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	3303      	adds	r3, #3
 800e626:	e7f3      	b.n	800e610 <_dtoa_r+0xa0>
 800e628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e62c:	2200      	movs	r2, #0
 800e62e:	ec51 0b17 	vmov	r0, r1, d7
 800e632:	eeb0 8a47 	vmov.f32	s16, s14
 800e636:	eef0 8a67 	vmov.f32	s17, s15
 800e63a:	2300      	movs	r3, #0
 800e63c:	f7f2 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 800e640:	4681      	mov	r9, r0
 800e642:	b160      	cbz	r0, 800e65e <_dtoa_r+0xee>
 800e644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e646:	2301      	movs	r3, #1
 800e648:	6013      	str	r3, [r2, #0]
 800e64a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 8568 	beq.w	800f122 <_dtoa_r+0xbb2>
 800e652:	4b86      	ldr	r3, [pc, #536]	; (800e86c <_dtoa_r+0x2fc>)
 800e654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	3b01      	subs	r3, #1
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	e7da      	b.n	800e614 <_dtoa_r+0xa4>
 800e65e:	aa10      	add	r2, sp, #64	; 0x40
 800e660:	a911      	add	r1, sp, #68	; 0x44
 800e662:	4620      	mov	r0, r4
 800e664:	eeb0 0a48 	vmov.f32	s0, s16
 800e668:	eef0 0a68 	vmov.f32	s1, s17
 800e66c:	f001 f994 	bl	800f998 <__d2b>
 800e670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e674:	4682      	mov	sl, r0
 800e676:	2d00      	cmp	r5, #0
 800e678:	d07f      	beq.n	800e77a <_dtoa_r+0x20a>
 800e67a:	ee18 3a90 	vmov	r3, s17
 800e67e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e686:	ec51 0b18 	vmov	r0, r1, d8
 800e68a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e68e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e696:	4619      	mov	r1, r3
 800e698:	2200      	movs	r2, #0
 800e69a:	4b75      	ldr	r3, [pc, #468]	; (800e870 <_dtoa_r+0x300>)
 800e69c:	f7f1 fdf4 	bl	8000288 <__aeabi_dsub>
 800e6a0:	a367      	add	r3, pc, #412	; (adr r3, 800e840 <_dtoa_r+0x2d0>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	f7f1 ffa7 	bl	80005f8 <__aeabi_dmul>
 800e6aa:	a367      	add	r3, pc, #412	; (adr r3, 800e848 <_dtoa_r+0x2d8>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 fdec 	bl	800028c <__adddf3>
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	460f      	mov	r7, r1
 800e6ba:	f7f1 ff33 	bl	8000524 <__aeabi_i2d>
 800e6be:	a364      	add	r3, pc, #400	; (adr r3, 800e850 <_dtoa_r+0x2e0>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	f7f1 ff98 	bl	80005f8 <__aeabi_dmul>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	f7f1 fddc 	bl	800028c <__adddf3>
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	460f      	mov	r7, r1
 800e6d8:	f7f2 fa3e 	bl	8000b58 <__aeabi_d2iz>
 800e6dc:	2200      	movs	r2, #0
 800e6de:	4683      	mov	fp, r0
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	4639      	mov	r1, r7
 800e6e6:	f7f2 f9f9 	bl	8000adc <__aeabi_dcmplt>
 800e6ea:	b148      	cbz	r0, 800e700 <_dtoa_r+0x190>
 800e6ec:	4658      	mov	r0, fp
 800e6ee:	f7f1 ff19 	bl	8000524 <__aeabi_i2d>
 800e6f2:	4632      	mov	r2, r6
 800e6f4:	463b      	mov	r3, r7
 800e6f6:	f7f2 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6fa:	b908      	cbnz	r0, 800e700 <_dtoa_r+0x190>
 800e6fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e700:	f1bb 0f16 	cmp.w	fp, #22
 800e704:	d857      	bhi.n	800e7b6 <_dtoa_r+0x246>
 800e706:	4b5b      	ldr	r3, [pc, #364]	; (800e874 <_dtoa_r+0x304>)
 800e708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	ec51 0b18 	vmov	r0, r1, d8
 800e714:	f7f2 f9e2 	bl	8000adc <__aeabi_dcmplt>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d04e      	beq.n	800e7ba <_dtoa_r+0x24a>
 800e71c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e720:	2300      	movs	r3, #0
 800e722:	930c      	str	r3, [sp, #48]	; 0x30
 800e724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e726:	1b5b      	subs	r3, r3, r5
 800e728:	1e5a      	subs	r2, r3, #1
 800e72a:	bf45      	ittet	mi
 800e72c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e730:	9305      	strmi	r3, [sp, #20]
 800e732:	2300      	movpl	r3, #0
 800e734:	2300      	movmi	r3, #0
 800e736:	9206      	str	r2, [sp, #24]
 800e738:	bf54      	ite	pl
 800e73a:	9305      	strpl	r3, [sp, #20]
 800e73c:	9306      	strmi	r3, [sp, #24]
 800e73e:	f1bb 0f00 	cmp.w	fp, #0
 800e742:	db3c      	blt.n	800e7be <_dtoa_r+0x24e>
 800e744:	9b06      	ldr	r3, [sp, #24]
 800e746:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e74a:	445b      	add	r3, fp
 800e74c:	9306      	str	r3, [sp, #24]
 800e74e:	2300      	movs	r3, #0
 800e750:	9308      	str	r3, [sp, #32]
 800e752:	9b07      	ldr	r3, [sp, #28]
 800e754:	2b09      	cmp	r3, #9
 800e756:	d868      	bhi.n	800e82a <_dtoa_r+0x2ba>
 800e758:	2b05      	cmp	r3, #5
 800e75a:	bfc4      	itt	gt
 800e75c:	3b04      	subgt	r3, #4
 800e75e:	9307      	strgt	r3, [sp, #28]
 800e760:	9b07      	ldr	r3, [sp, #28]
 800e762:	f1a3 0302 	sub.w	r3, r3, #2
 800e766:	bfcc      	ite	gt
 800e768:	2500      	movgt	r5, #0
 800e76a:	2501      	movle	r5, #1
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	f200 8085 	bhi.w	800e87c <_dtoa_r+0x30c>
 800e772:	e8df f003 	tbb	[pc, r3]
 800e776:	3b2e      	.short	0x3b2e
 800e778:	5839      	.short	0x5839
 800e77a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e77e:	441d      	add	r5, r3
 800e780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e784:	2b20      	cmp	r3, #32
 800e786:	bfc1      	itttt	gt
 800e788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e78c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e790:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e794:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e798:	bfd6      	itet	le
 800e79a:	f1c3 0320 	rsble	r3, r3, #32
 800e79e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e7a2:	fa06 f003 	lslle.w	r0, r6, r3
 800e7a6:	f7f1 fead 	bl	8000504 <__aeabi_ui2d>
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e7b0:	3d01      	subs	r5, #1
 800e7b2:	920e      	str	r2, [sp, #56]	; 0x38
 800e7b4:	e76f      	b.n	800e696 <_dtoa_r+0x126>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7b3      	b.n	800e722 <_dtoa_r+0x1b2>
 800e7ba:	900c      	str	r0, [sp, #48]	; 0x30
 800e7bc:	e7b2      	b.n	800e724 <_dtoa_r+0x1b4>
 800e7be:	9b05      	ldr	r3, [sp, #20]
 800e7c0:	eba3 030b 	sub.w	r3, r3, fp
 800e7c4:	9305      	str	r3, [sp, #20]
 800e7c6:	f1cb 0300 	rsb	r3, fp, #0
 800e7ca:	9308      	str	r3, [sp, #32]
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7d0:	e7bf      	b.n	800e752 <_dtoa_r+0x1e2>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dc52      	bgt.n	800e882 <_dtoa_r+0x312>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	9304      	str	r3, [sp, #16]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	920a      	str	r2, [sp, #40]	; 0x28
 800e7e6:	e00b      	b.n	800e800 <_dtoa_r+0x290>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e7f3      	b.n	800e7d4 <_dtoa_r+0x264>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7f2:	445b      	add	r3, fp
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	bfb8      	it	lt
 800e7fe:	2301      	movlt	r3, #1
 800e800:	69e0      	ldr	r0, [r4, #28]
 800e802:	2100      	movs	r1, #0
 800e804:	2204      	movs	r2, #4
 800e806:	f102 0614 	add.w	r6, r2, #20
 800e80a:	429e      	cmp	r6, r3
 800e80c:	d93d      	bls.n	800e88a <_dtoa_r+0x31a>
 800e80e:	6041      	str	r1, [r0, #4]
 800e810:	4620      	mov	r0, r4
 800e812:	f000 fd9f 	bl	800f354 <_Balloc>
 800e816:	9000      	str	r0, [sp, #0]
 800e818:	2800      	cmp	r0, #0
 800e81a:	d139      	bne.n	800e890 <_dtoa_r+0x320>
 800e81c:	4b16      	ldr	r3, [pc, #88]	; (800e878 <_dtoa_r+0x308>)
 800e81e:	4602      	mov	r2, r0
 800e820:	f240 11af 	movw	r1, #431	; 0x1af
 800e824:	e6bd      	b.n	800e5a2 <_dtoa_r+0x32>
 800e826:	2301      	movs	r3, #1
 800e828:	e7e1      	b.n	800e7ee <_dtoa_r+0x27e>
 800e82a:	2501      	movs	r5, #1
 800e82c:	2300      	movs	r3, #0
 800e82e:	9307      	str	r3, [sp, #28]
 800e830:	9509      	str	r5, [sp, #36]	; 0x24
 800e832:	f04f 33ff 	mov.w	r3, #4294967295
 800e836:	9301      	str	r3, [sp, #4]
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	2200      	movs	r2, #0
 800e83c:	2312      	movs	r3, #18
 800e83e:	e7d1      	b.n	800e7e4 <_dtoa_r+0x274>
 800e840:	636f4361 	.word	0x636f4361
 800e844:	3fd287a7 	.word	0x3fd287a7
 800e848:	8b60c8b3 	.word	0x8b60c8b3
 800e84c:	3fc68a28 	.word	0x3fc68a28
 800e850:	509f79fb 	.word	0x509f79fb
 800e854:	3fd34413 	.word	0x3fd34413
 800e858:	080106c9 	.word	0x080106c9
 800e85c:	080106e0 	.word	0x080106e0
 800e860:	7ff00000 	.word	0x7ff00000
 800e864:	080106c5 	.word	0x080106c5
 800e868:	080106bc 	.word	0x080106bc
 800e86c:	08010699 	.word	0x08010699
 800e870:	3ff80000 	.word	0x3ff80000
 800e874:	080107d0 	.word	0x080107d0
 800e878:	08010738 	.word	0x08010738
 800e87c:	2301      	movs	r3, #1
 800e87e:	9309      	str	r3, [sp, #36]	; 0x24
 800e880:	e7d7      	b.n	800e832 <_dtoa_r+0x2c2>
 800e882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	9304      	str	r3, [sp, #16]
 800e888:	e7ba      	b.n	800e800 <_dtoa_r+0x290>
 800e88a:	3101      	adds	r1, #1
 800e88c:	0052      	lsls	r2, r2, #1
 800e88e:	e7ba      	b.n	800e806 <_dtoa_r+0x296>
 800e890:	69e3      	ldr	r3, [r4, #28]
 800e892:	9a00      	ldr	r2, [sp, #0]
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	9b04      	ldr	r3, [sp, #16]
 800e898:	2b0e      	cmp	r3, #14
 800e89a:	f200 80a8 	bhi.w	800e9ee <_dtoa_r+0x47e>
 800e89e:	2d00      	cmp	r5, #0
 800e8a0:	f000 80a5 	beq.w	800e9ee <_dtoa_r+0x47e>
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	dd38      	ble.n	800e91c <_dtoa_r+0x3ac>
 800e8aa:	4bc0      	ldr	r3, [pc, #768]	; (800ebac <_dtoa_r+0x63c>)
 800e8ac:	f00b 020f 	and.w	r2, fp, #15
 800e8b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e8b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e8bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e8c0:	d019      	beq.n	800e8f6 <_dtoa_r+0x386>
 800e8c2:	4bbb      	ldr	r3, [pc, #748]	; (800ebb0 <_dtoa_r+0x640>)
 800e8c4:	ec51 0b18 	vmov	r0, r1, d8
 800e8c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8cc:	f7f1 ffbe 	bl	800084c <__aeabi_ddiv>
 800e8d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8d4:	f008 080f 	and.w	r8, r8, #15
 800e8d8:	2503      	movs	r5, #3
 800e8da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ebb0 <_dtoa_r+0x640>
 800e8de:	f1b8 0f00 	cmp.w	r8, #0
 800e8e2:	d10a      	bne.n	800e8fa <_dtoa_r+0x38a>
 800e8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	f7f1 ffae 	bl	800084c <__aeabi_ddiv>
 800e8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8f4:	e02b      	b.n	800e94e <_dtoa_r+0x3de>
 800e8f6:	2502      	movs	r5, #2
 800e8f8:	e7ef      	b.n	800e8da <_dtoa_r+0x36a>
 800e8fa:	f018 0f01 	tst.w	r8, #1
 800e8fe:	d008      	beq.n	800e912 <_dtoa_r+0x3a2>
 800e900:	4630      	mov	r0, r6
 800e902:	4639      	mov	r1, r7
 800e904:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e908:	f7f1 fe76 	bl	80005f8 <__aeabi_dmul>
 800e90c:	3501      	adds	r5, #1
 800e90e:	4606      	mov	r6, r0
 800e910:	460f      	mov	r7, r1
 800e912:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e916:	f109 0908 	add.w	r9, r9, #8
 800e91a:	e7e0      	b.n	800e8de <_dtoa_r+0x36e>
 800e91c:	f000 809f 	beq.w	800ea5e <_dtoa_r+0x4ee>
 800e920:	f1cb 0600 	rsb	r6, fp, #0
 800e924:	4ba1      	ldr	r3, [pc, #644]	; (800ebac <_dtoa_r+0x63c>)
 800e926:	4fa2      	ldr	r7, [pc, #648]	; (800ebb0 <_dtoa_r+0x640>)
 800e928:	f006 020f 	and.w	r2, r6, #15
 800e92c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e934:	ec51 0b18 	vmov	r0, r1, d8
 800e938:	f7f1 fe5e 	bl	80005f8 <__aeabi_dmul>
 800e93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e940:	1136      	asrs	r6, r6, #4
 800e942:	2300      	movs	r3, #0
 800e944:	2502      	movs	r5, #2
 800e946:	2e00      	cmp	r6, #0
 800e948:	d17e      	bne.n	800ea48 <_dtoa_r+0x4d8>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1d0      	bne.n	800e8f0 <_dtoa_r+0x380>
 800e94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e950:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8084 	beq.w	800ea62 <_dtoa_r+0x4f2>
 800e95a:	4b96      	ldr	r3, [pc, #600]	; (800ebb4 <_dtoa_r+0x644>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	4640      	mov	r0, r8
 800e960:	4649      	mov	r1, r9
 800e962:	f7f2 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800e966:	2800      	cmp	r0, #0
 800e968:	d07b      	beq.n	800ea62 <_dtoa_r+0x4f2>
 800e96a:	9b04      	ldr	r3, [sp, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d078      	beq.n	800ea62 <_dtoa_r+0x4f2>
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	dd39      	ble.n	800e9ea <_dtoa_r+0x47a>
 800e976:	4b90      	ldr	r3, [pc, #576]	; (800ebb8 <_dtoa_r+0x648>)
 800e978:	2200      	movs	r2, #0
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	f7f1 fe3b 	bl	80005f8 <__aeabi_dmul>
 800e982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e986:	9e01      	ldr	r6, [sp, #4]
 800e988:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e98c:	3501      	adds	r5, #1
 800e98e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e992:	4628      	mov	r0, r5
 800e994:	f7f1 fdc6 	bl	8000524 <__aeabi_i2d>
 800e998:	4642      	mov	r2, r8
 800e99a:	464b      	mov	r3, r9
 800e99c:	f7f1 fe2c 	bl	80005f8 <__aeabi_dmul>
 800e9a0:	4b86      	ldr	r3, [pc, #536]	; (800ebbc <_dtoa_r+0x64c>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f7f1 fc72 	bl	800028c <__adddf3>
 800e9a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e9ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9b0:	9303      	str	r3, [sp, #12]
 800e9b2:	2e00      	cmp	r6, #0
 800e9b4:	d158      	bne.n	800ea68 <_dtoa_r+0x4f8>
 800e9b6:	4b82      	ldr	r3, [pc, #520]	; (800ebc0 <_dtoa_r+0x650>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	4649      	mov	r1, r9
 800e9be:	f7f1 fc63 	bl	8000288 <__aeabi_dsub>
 800e9c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9c6:	4680      	mov	r8, r0
 800e9c8:	4689      	mov	r9, r1
 800e9ca:	f7f2 f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	f040 8296 	bne.w	800ef00 <_dtoa_r+0x990>
 800e9d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9de:	4649      	mov	r1, r9
 800e9e0:	f7f2 f87c 	bl	8000adc <__aeabi_dcmplt>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	f040 8289 	bne.w	800eefc <_dtoa_r+0x98c>
 800e9ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e9ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f2c0 814e 	blt.w	800ec92 <_dtoa_r+0x722>
 800e9f6:	f1bb 0f0e 	cmp.w	fp, #14
 800e9fa:	f300 814a 	bgt.w	800ec92 <_dtoa_r+0x722>
 800e9fe:	4b6b      	ldr	r3, [pc, #428]	; (800ebac <_dtoa_r+0x63c>)
 800ea00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f280 80dc 	bge.w	800ebc8 <_dtoa_r+0x658>
 800ea10:	9b04      	ldr	r3, [sp, #16]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f300 80d8 	bgt.w	800ebc8 <_dtoa_r+0x658>
 800ea18:	f040 826f 	bne.w	800eefa <_dtoa_r+0x98a>
 800ea1c:	4b68      	ldr	r3, [pc, #416]	; (800ebc0 <_dtoa_r+0x650>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	4640      	mov	r0, r8
 800ea22:	4649      	mov	r1, r9
 800ea24:	f7f1 fde8 	bl	80005f8 <__aeabi_dmul>
 800ea28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea2c:	f7f2 f86a 	bl	8000b04 <__aeabi_dcmpge>
 800ea30:	9e04      	ldr	r6, [sp, #16]
 800ea32:	4637      	mov	r7, r6
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f040 8245 	bne.w	800eec4 <_dtoa_r+0x954>
 800ea3a:	9d00      	ldr	r5, [sp, #0]
 800ea3c:	2331      	movs	r3, #49	; 0x31
 800ea3e:	f805 3b01 	strb.w	r3, [r5], #1
 800ea42:	f10b 0b01 	add.w	fp, fp, #1
 800ea46:	e241      	b.n	800eecc <_dtoa_r+0x95c>
 800ea48:	07f2      	lsls	r2, r6, #31
 800ea4a:	d505      	bpl.n	800ea58 <_dtoa_r+0x4e8>
 800ea4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea50:	f7f1 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ea54:	3501      	adds	r5, #1
 800ea56:	2301      	movs	r3, #1
 800ea58:	1076      	asrs	r6, r6, #1
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	e773      	b.n	800e946 <_dtoa_r+0x3d6>
 800ea5e:	2502      	movs	r5, #2
 800ea60:	e775      	b.n	800e94e <_dtoa_r+0x3de>
 800ea62:	9e04      	ldr	r6, [sp, #16]
 800ea64:	465f      	mov	r7, fp
 800ea66:	e792      	b.n	800e98e <_dtoa_r+0x41e>
 800ea68:	9900      	ldr	r1, [sp, #0]
 800ea6a:	4b50      	ldr	r3, [pc, #320]	; (800ebac <_dtoa_r+0x63c>)
 800ea6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea70:	4431      	add	r1, r6
 800ea72:	9102      	str	r1, [sp, #8]
 800ea74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea76:	eeb0 9a47 	vmov.f32	s18, s14
 800ea7a:	eef0 9a67 	vmov.f32	s19, s15
 800ea7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea86:	2900      	cmp	r1, #0
 800ea88:	d044      	beq.n	800eb14 <_dtoa_r+0x5a4>
 800ea8a:	494e      	ldr	r1, [pc, #312]	; (800ebc4 <_dtoa_r+0x654>)
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	f7f1 fedd 	bl	800084c <__aeabi_ddiv>
 800ea92:	ec53 2b19 	vmov	r2, r3, d9
 800ea96:	f7f1 fbf7 	bl	8000288 <__aeabi_dsub>
 800ea9a:	9d00      	ldr	r5, [sp, #0]
 800ea9c:	ec41 0b19 	vmov	d9, r0, r1
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	f7f2 f858 	bl	8000b58 <__aeabi_d2iz>
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	f7f1 fd3b 	bl	8000524 <__aeabi_i2d>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4640      	mov	r0, r8
 800eab4:	4649      	mov	r1, r9
 800eab6:	f7f1 fbe7 	bl	8000288 <__aeabi_dsub>
 800eaba:	3630      	adds	r6, #48	; 0x30
 800eabc:	f805 6b01 	strb.w	r6, [r5], #1
 800eac0:	ec53 2b19 	vmov	r2, r3, d9
 800eac4:	4680      	mov	r8, r0
 800eac6:	4689      	mov	r9, r1
 800eac8:	f7f2 f808 	bl	8000adc <__aeabi_dcmplt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d164      	bne.n	800eb9a <_dtoa_r+0x62a>
 800ead0:	4642      	mov	r2, r8
 800ead2:	464b      	mov	r3, r9
 800ead4:	4937      	ldr	r1, [pc, #220]	; (800ebb4 <_dtoa_r+0x644>)
 800ead6:	2000      	movs	r0, #0
 800ead8:	f7f1 fbd6 	bl	8000288 <__aeabi_dsub>
 800eadc:	ec53 2b19 	vmov	r2, r3, d9
 800eae0:	f7f1 fffc 	bl	8000adc <__aeabi_dcmplt>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	f040 80b6 	bne.w	800ec56 <_dtoa_r+0x6e6>
 800eaea:	9b02      	ldr	r3, [sp, #8]
 800eaec:	429d      	cmp	r5, r3
 800eaee:	f43f af7c 	beq.w	800e9ea <_dtoa_r+0x47a>
 800eaf2:	4b31      	ldr	r3, [pc, #196]	; (800ebb8 <_dtoa_r+0x648>)
 800eaf4:	ec51 0b19 	vmov	r0, r1, d9
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f7f1 fd7d 	bl	80005f8 <__aeabi_dmul>
 800eafe:	4b2e      	ldr	r3, [pc, #184]	; (800ebb8 <_dtoa_r+0x648>)
 800eb00:	ec41 0b19 	vmov	d9, r0, r1
 800eb04:	2200      	movs	r2, #0
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	4680      	mov	r8, r0
 800eb10:	4689      	mov	r9, r1
 800eb12:	e7c5      	b.n	800eaa0 <_dtoa_r+0x530>
 800eb14:	ec51 0b17 	vmov	r0, r1, d7
 800eb18:	f7f1 fd6e 	bl	80005f8 <__aeabi_dmul>
 800eb1c:	9b02      	ldr	r3, [sp, #8]
 800eb1e:	9d00      	ldr	r5, [sp, #0]
 800eb20:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb22:	ec41 0b19 	vmov	d9, r0, r1
 800eb26:	4649      	mov	r1, r9
 800eb28:	4640      	mov	r0, r8
 800eb2a:	f7f2 f815 	bl	8000b58 <__aeabi_d2iz>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	f7f1 fcf8 	bl	8000524 <__aeabi_i2d>
 800eb34:	3630      	adds	r6, #48	; 0x30
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	f7f1 fba3 	bl	8000288 <__aeabi_dsub>
 800eb42:	f805 6b01 	strb.w	r6, [r5], #1
 800eb46:	9b02      	ldr	r3, [sp, #8]
 800eb48:	429d      	cmp	r5, r3
 800eb4a:	4680      	mov	r8, r0
 800eb4c:	4689      	mov	r9, r1
 800eb4e:	f04f 0200 	mov.w	r2, #0
 800eb52:	d124      	bne.n	800eb9e <_dtoa_r+0x62e>
 800eb54:	4b1b      	ldr	r3, [pc, #108]	; (800ebc4 <_dtoa_r+0x654>)
 800eb56:	ec51 0b19 	vmov	r0, r1, d9
 800eb5a:	f7f1 fb97 	bl	800028c <__adddf3>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4640      	mov	r0, r8
 800eb64:	4649      	mov	r1, r9
 800eb66:	f7f1 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d173      	bne.n	800ec56 <_dtoa_r+0x6e6>
 800eb6e:	ec53 2b19 	vmov	r2, r3, d9
 800eb72:	4914      	ldr	r1, [pc, #80]	; (800ebc4 <_dtoa_r+0x654>)
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7f1 fb87 	bl	8000288 <__aeabi_dsub>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4640      	mov	r0, r8
 800eb80:	4649      	mov	r1, r9
 800eb82:	f7f1 ffab 	bl	8000adc <__aeabi_dcmplt>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f43f af2f 	beq.w	800e9ea <_dtoa_r+0x47a>
 800eb8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb8e:	1e6b      	subs	r3, r5, #1
 800eb90:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb96:	2b30      	cmp	r3, #48	; 0x30
 800eb98:	d0f8      	beq.n	800eb8c <_dtoa_r+0x61c>
 800eb9a:	46bb      	mov	fp, r7
 800eb9c:	e04a      	b.n	800ec34 <_dtoa_r+0x6c4>
 800eb9e:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <_dtoa_r+0x648>)
 800eba0:	f7f1 fd2a 	bl	80005f8 <__aeabi_dmul>
 800eba4:	4680      	mov	r8, r0
 800eba6:	4689      	mov	r9, r1
 800eba8:	e7bd      	b.n	800eb26 <_dtoa_r+0x5b6>
 800ebaa:	bf00      	nop
 800ebac:	080107d0 	.word	0x080107d0
 800ebb0:	080107a8 	.word	0x080107a8
 800ebb4:	3ff00000 	.word	0x3ff00000
 800ebb8:	40240000 	.word	0x40240000
 800ebbc:	401c0000 	.word	0x401c0000
 800ebc0:	40140000 	.word	0x40140000
 800ebc4:	3fe00000 	.word	0x3fe00000
 800ebc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ebcc:	9d00      	ldr	r5, [sp, #0]
 800ebce:	4642      	mov	r2, r8
 800ebd0:	464b      	mov	r3, r9
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	f7f1 fe39 	bl	800084c <__aeabi_ddiv>
 800ebda:	f7f1 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800ebde:	9001      	str	r0, [sp, #4]
 800ebe0:	f7f1 fca0 	bl	8000524 <__aeabi_i2d>
 800ebe4:	4642      	mov	r2, r8
 800ebe6:	464b      	mov	r3, r9
 800ebe8:	f7f1 fd06 	bl	80005f8 <__aeabi_dmul>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 fb48 	bl	8000288 <__aeabi_dsub>
 800ebf8:	9e01      	ldr	r6, [sp, #4]
 800ebfa:	9f04      	ldr	r7, [sp, #16]
 800ebfc:	3630      	adds	r6, #48	; 0x30
 800ebfe:	f805 6b01 	strb.w	r6, [r5], #1
 800ec02:	9e00      	ldr	r6, [sp, #0]
 800ec04:	1bae      	subs	r6, r5, r6
 800ec06:	42b7      	cmp	r7, r6
 800ec08:	4602      	mov	r2, r0
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	d134      	bne.n	800ec78 <_dtoa_r+0x708>
 800ec0e:	f7f1 fb3d 	bl	800028c <__adddf3>
 800ec12:	4642      	mov	r2, r8
 800ec14:	464b      	mov	r3, r9
 800ec16:	4606      	mov	r6, r0
 800ec18:	460f      	mov	r7, r1
 800ec1a:	f7f1 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 800ec1e:	b9c8      	cbnz	r0, 800ec54 <_dtoa_r+0x6e4>
 800ec20:	4642      	mov	r2, r8
 800ec22:	464b      	mov	r3, r9
 800ec24:	4630      	mov	r0, r6
 800ec26:	4639      	mov	r1, r7
 800ec28:	f7f1 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec2c:	b110      	cbz	r0, 800ec34 <_dtoa_r+0x6c4>
 800ec2e:	9b01      	ldr	r3, [sp, #4]
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	d40f      	bmi.n	800ec54 <_dtoa_r+0x6e4>
 800ec34:	4651      	mov	r1, sl
 800ec36:	4620      	mov	r0, r4
 800ec38:	f000 fbcc 	bl	800f3d4 <_Bfree>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec40:	702b      	strb	r3, [r5, #0]
 800ec42:	f10b 0301 	add.w	r3, fp, #1
 800ec46:	6013      	str	r3, [r2, #0]
 800ec48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f43f ace2 	beq.w	800e614 <_dtoa_r+0xa4>
 800ec50:	601d      	str	r5, [r3, #0]
 800ec52:	e4df      	b.n	800e614 <_dtoa_r+0xa4>
 800ec54:	465f      	mov	r7, fp
 800ec56:	462b      	mov	r3, r5
 800ec58:	461d      	mov	r5, r3
 800ec5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec5e:	2a39      	cmp	r2, #57	; 0x39
 800ec60:	d106      	bne.n	800ec70 <_dtoa_r+0x700>
 800ec62:	9a00      	ldr	r2, [sp, #0]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d1f7      	bne.n	800ec58 <_dtoa_r+0x6e8>
 800ec68:	9900      	ldr	r1, [sp, #0]
 800ec6a:	2230      	movs	r2, #48	; 0x30
 800ec6c:	3701      	adds	r7, #1
 800ec6e:	700a      	strb	r2, [r1, #0]
 800ec70:	781a      	ldrb	r2, [r3, #0]
 800ec72:	3201      	adds	r2, #1
 800ec74:	701a      	strb	r2, [r3, #0]
 800ec76:	e790      	b.n	800eb9a <_dtoa_r+0x62a>
 800ec78:	4ba3      	ldr	r3, [pc, #652]	; (800ef08 <_dtoa_r+0x998>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f7f1 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ec80:	2200      	movs	r2, #0
 800ec82:	2300      	movs	r3, #0
 800ec84:	4606      	mov	r6, r0
 800ec86:	460f      	mov	r7, r1
 800ec88:	f7f1 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d09e      	beq.n	800ebce <_dtoa_r+0x65e>
 800ec90:	e7d0      	b.n	800ec34 <_dtoa_r+0x6c4>
 800ec92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	f000 80ca 	beq.w	800ee2e <_dtoa_r+0x8be>
 800ec9a:	9a07      	ldr	r2, [sp, #28]
 800ec9c:	2a01      	cmp	r2, #1
 800ec9e:	f300 80ad 	bgt.w	800edfc <_dtoa_r+0x88c>
 800eca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	f000 80a5 	beq.w	800edf4 <_dtoa_r+0x884>
 800ecaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecae:	9e08      	ldr	r6, [sp, #32]
 800ecb0:	9d05      	ldr	r5, [sp, #20]
 800ecb2:	9a05      	ldr	r2, [sp, #20]
 800ecb4:	441a      	add	r2, r3
 800ecb6:	9205      	str	r2, [sp, #20]
 800ecb8:	9a06      	ldr	r2, [sp, #24]
 800ecba:	2101      	movs	r1, #1
 800ecbc:	441a      	add	r2, r3
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	9206      	str	r2, [sp, #24]
 800ecc2:	f000 fc3d 	bl	800f540 <__i2b>
 800ecc6:	4607      	mov	r7, r0
 800ecc8:	b165      	cbz	r5, 800ece4 <_dtoa_r+0x774>
 800ecca:	9b06      	ldr	r3, [sp, #24]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd09      	ble.n	800ece4 <_dtoa_r+0x774>
 800ecd0:	42ab      	cmp	r3, r5
 800ecd2:	9a05      	ldr	r2, [sp, #20]
 800ecd4:	bfa8      	it	ge
 800ecd6:	462b      	movge	r3, r5
 800ecd8:	1ad2      	subs	r2, r2, r3
 800ecda:	9205      	str	r2, [sp, #20]
 800ecdc:	9a06      	ldr	r2, [sp, #24]
 800ecde:	1aed      	subs	r5, r5, r3
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	9306      	str	r3, [sp, #24]
 800ece4:	9b08      	ldr	r3, [sp, #32]
 800ece6:	b1f3      	cbz	r3, 800ed26 <_dtoa_r+0x7b6>
 800ece8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 80a3 	beq.w	800ee36 <_dtoa_r+0x8c6>
 800ecf0:	2e00      	cmp	r6, #0
 800ecf2:	dd10      	ble.n	800ed16 <_dtoa_r+0x7a6>
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fce1 	bl	800f6c0 <__pow5mult>
 800ecfe:	4652      	mov	r2, sl
 800ed00:	4601      	mov	r1, r0
 800ed02:	4607      	mov	r7, r0
 800ed04:	4620      	mov	r0, r4
 800ed06:	f000 fc31 	bl	800f56c <__multiply>
 800ed0a:	4651      	mov	r1, sl
 800ed0c:	4680      	mov	r8, r0
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f000 fb60 	bl	800f3d4 <_Bfree>
 800ed14:	46c2      	mov	sl, r8
 800ed16:	9b08      	ldr	r3, [sp, #32]
 800ed18:	1b9a      	subs	r2, r3, r6
 800ed1a:	d004      	beq.n	800ed26 <_dtoa_r+0x7b6>
 800ed1c:	4651      	mov	r1, sl
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fcce 	bl	800f6c0 <__pow5mult>
 800ed24:	4682      	mov	sl, r0
 800ed26:	2101      	movs	r1, #1
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 fc09 	bl	800f540 <__i2b>
 800ed2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	4606      	mov	r6, r0
 800ed34:	f340 8081 	ble.w	800ee3a <_dtoa_r+0x8ca>
 800ed38:	461a      	mov	r2, r3
 800ed3a:	4601      	mov	r1, r0
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f000 fcbf 	bl	800f6c0 <__pow5mult>
 800ed42:	9b07      	ldr	r3, [sp, #28]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	4606      	mov	r6, r0
 800ed48:	dd7a      	ble.n	800ee40 <_dtoa_r+0x8d0>
 800ed4a:	f04f 0800 	mov.w	r8, #0
 800ed4e:	6933      	ldr	r3, [r6, #16]
 800ed50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed54:	6918      	ldr	r0, [r3, #16]
 800ed56:	f000 fba5 	bl	800f4a4 <__hi0bits>
 800ed5a:	f1c0 0020 	rsb	r0, r0, #32
 800ed5e:	9b06      	ldr	r3, [sp, #24]
 800ed60:	4418      	add	r0, r3
 800ed62:	f010 001f 	ands.w	r0, r0, #31
 800ed66:	f000 8094 	beq.w	800ee92 <_dtoa_r+0x922>
 800ed6a:	f1c0 0320 	rsb	r3, r0, #32
 800ed6e:	2b04      	cmp	r3, #4
 800ed70:	f340 8085 	ble.w	800ee7e <_dtoa_r+0x90e>
 800ed74:	9b05      	ldr	r3, [sp, #20]
 800ed76:	f1c0 001c 	rsb	r0, r0, #28
 800ed7a:	4403      	add	r3, r0
 800ed7c:	9305      	str	r3, [sp, #20]
 800ed7e:	9b06      	ldr	r3, [sp, #24]
 800ed80:	4403      	add	r3, r0
 800ed82:	4405      	add	r5, r0
 800ed84:	9306      	str	r3, [sp, #24]
 800ed86:	9b05      	ldr	r3, [sp, #20]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dd05      	ble.n	800ed98 <_dtoa_r+0x828>
 800ed8c:	4651      	mov	r1, sl
 800ed8e:	461a      	mov	r2, r3
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 fcef 	bl	800f774 <__lshift>
 800ed96:	4682      	mov	sl, r0
 800ed98:	9b06      	ldr	r3, [sp, #24]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	dd05      	ble.n	800edaa <_dtoa_r+0x83a>
 800ed9e:	4631      	mov	r1, r6
 800eda0:	461a      	mov	r2, r3
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fce6 	bl	800f774 <__lshift>
 800eda8:	4606      	mov	r6, r0
 800edaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edac:	2b00      	cmp	r3, #0
 800edae:	d072      	beq.n	800ee96 <_dtoa_r+0x926>
 800edb0:	4631      	mov	r1, r6
 800edb2:	4650      	mov	r0, sl
 800edb4:	f000 fd4a 	bl	800f84c <__mcmp>
 800edb8:	2800      	cmp	r0, #0
 800edba:	da6c      	bge.n	800ee96 <_dtoa_r+0x926>
 800edbc:	2300      	movs	r3, #0
 800edbe:	4651      	mov	r1, sl
 800edc0:	220a      	movs	r2, #10
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 fb28 	bl	800f418 <__multadd>
 800edc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edce:	4682      	mov	sl, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 81b0 	beq.w	800f136 <_dtoa_r+0xbc6>
 800edd6:	2300      	movs	r3, #0
 800edd8:	4639      	mov	r1, r7
 800edda:	220a      	movs	r2, #10
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fb1b 	bl	800f418 <__multadd>
 800ede2:	9b01      	ldr	r3, [sp, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	4607      	mov	r7, r0
 800ede8:	f300 8096 	bgt.w	800ef18 <_dtoa_r+0x9a8>
 800edec:	9b07      	ldr	r3, [sp, #28]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	dc59      	bgt.n	800eea6 <_dtoa_r+0x936>
 800edf2:	e091      	b.n	800ef18 <_dtoa_r+0x9a8>
 800edf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edfa:	e758      	b.n	800ecae <_dtoa_r+0x73e>
 800edfc:	9b04      	ldr	r3, [sp, #16]
 800edfe:	1e5e      	subs	r6, r3, #1
 800ee00:	9b08      	ldr	r3, [sp, #32]
 800ee02:	42b3      	cmp	r3, r6
 800ee04:	bfbf      	itttt	lt
 800ee06:	9b08      	ldrlt	r3, [sp, #32]
 800ee08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ee0a:	9608      	strlt	r6, [sp, #32]
 800ee0c:	1af3      	sublt	r3, r6, r3
 800ee0e:	bfb4      	ite	lt
 800ee10:	18d2      	addlt	r2, r2, r3
 800ee12:	1b9e      	subge	r6, r3, r6
 800ee14:	9b04      	ldr	r3, [sp, #16]
 800ee16:	bfbc      	itt	lt
 800ee18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ee1a:	2600      	movlt	r6, #0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfb7      	itett	lt
 800ee20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ee24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ee28:	1a9d      	sublt	r5, r3, r2
 800ee2a:	2300      	movlt	r3, #0
 800ee2c:	e741      	b.n	800ecb2 <_dtoa_r+0x742>
 800ee2e:	9e08      	ldr	r6, [sp, #32]
 800ee30:	9d05      	ldr	r5, [sp, #20]
 800ee32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee34:	e748      	b.n	800ecc8 <_dtoa_r+0x758>
 800ee36:	9a08      	ldr	r2, [sp, #32]
 800ee38:	e770      	b.n	800ed1c <_dtoa_r+0x7ac>
 800ee3a:	9b07      	ldr	r3, [sp, #28]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	dc19      	bgt.n	800ee74 <_dtoa_r+0x904>
 800ee40:	9b02      	ldr	r3, [sp, #8]
 800ee42:	b9bb      	cbnz	r3, 800ee74 <_dtoa_r+0x904>
 800ee44:	9b03      	ldr	r3, [sp, #12]
 800ee46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee4a:	b99b      	cbnz	r3, 800ee74 <_dtoa_r+0x904>
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee52:	0d1b      	lsrs	r3, r3, #20
 800ee54:	051b      	lsls	r3, r3, #20
 800ee56:	b183      	cbz	r3, 800ee7a <_dtoa_r+0x90a>
 800ee58:	9b05      	ldr	r3, [sp, #20]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	9305      	str	r3, [sp, #20]
 800ee5e:	9b06      	ldr	r3, [sp, #24]
 800ee60:	3301      	adds	r3, #1
 800ee62:	9306      	str	r3, [sp, #24]
 800ee64:	f04f 0801 	mov.w	r8, #1
 800ee68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f47f af6f 	bne.w	800ed4e <_dtoa_r+0x7de>
 800ee70:	2001      	movs	r0, #1
 800ee72:	e774      	b.n	800ed5e <_dtoa_r+0x7ee>
 800ee74:	f04f 0800 	mov.w	r8, #0
 800ee78:	e7f6      	b.n	800ee68 <_dtoa_r+0x8f8>
 800ee7a:	4698      	mov	r8, r3
 800ee7c:	e7f4      	b.n	800ee68 <_dtoa_r+0x8f8>
 800ee7e:	d082      	beq.n	800ed86 <_dtoa_r+0x816>
 800ee80:	9a05      	ldr	r2, [sp, #20]
 800ee82:	331c      	adds	r3, #28
 800ee84:	441a      	add	r2, r3
 800ee86:	9205      	str	r2, [sp, #20]
 800ee88:	9a06      	ldr	r2, [sp, #24]
 800ee8a:	441a      	add	r2, r3
 800ee8c:	441d      	add	r5, r3
 800ee8e:	9206      	str	r2, [sp, #24]
 800ee90:	e779      	b.n	800ed86 <_dtoa_r+0x816>
 800ee92:	4603      	mov	r3, r0
 800ee94:	e7f4      	b.n	800ee80 <_dtoa_r+0x910>
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	dc37      	bgt.n	800ef0c <_dtoa_r+0x99c>
 800ee9c:	9b07      	ldr	r3, [sp, #28]
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	dd34      	ble.n	800ef0c <_dtoa_r+0x99c>
 800eea2:	9b04      	ldr	r3, [sp, #16]
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	9b01      	ldr	r3, [sp, #4]
 800eea8:	b963      	cbnz	r3, 800eec4 <_dtoa_r+0x954>
 800eeaa:	4631      	mov	r1, r6
 800eeac:	2205      	movs	r2, #5
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 fab2 	bl	800f418 <__multadd>
 800eeb4:	4601      	mov	r1, r0
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	4650      	mov	r0, sl
 800eeba:	f000 fcc7 	bl	800f84c <__mcmp>
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f73f adbb 	bgt.w	800ea3a <_dtoa_r+0x4ca>
 800eec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eec6:	9d00      	ldr	r5, [sp, #0]
 800eec8:	ea6f 0b03 	mvn.w	fp, r3
 800eecc:	f04f 0800 	mov.w	r8, #0
 800eed0:	4631      	mov	r1, r6
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 fa7e 	bl	800f3d4 <_Bfree>
 800eed8:	2f00      	cmp	r7, #0
 800eeda:	f43f aeab 	beq.w	800ec34 <_dtoa_r+0x6c4>
 800eede:	f1b8 0f00 	cmp.w	r8, #0
 800eee2:	d005      	beq.n	800eef0 <_dtoa_r+0x980>
 800eee4:	45b8      	cmp	r8, r7
 800eee6:	d003      	beq.n	800eef0 <_dtoa_r+0x980>
 800eee8:	4641      	mov	r1, r8
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 fa72 	bl	800f3d4 <_Bfree>
 800eef0:	4639      	mov	r1, r7
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 fa6e 	bl	800f3d4 <_Bfree>
 800eef8:	e69c      	b.n	800ec34 <_dtoa_r+0x6c4>
 800eefa:	2600      	movs	r6, #0
 800eefc:	4637      	mov	r7, r6
 800eefe:	e7e1      	b.n	800eec4 <_dtoa_r+0x954>
 800ef00:	46bb      	mov	fp, r7
 800ef02:	4637      	mov	r7, r6
 800ef04:	e599      	b.n	800ea3a <_dtoa_r+0x4ca>
 800ef06:	bf00      	nop
 800ef08:	40240000 	.word	0x40240000
 800ef0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f000 80c8 	beq.w	800f0a4 <_dtoa_r+0xb34>
 800ef14:	9b04      	ldr	r3, [sp, #16]
 800ef16:	9301      	str	r3, [sp, #4]
 800ef18:	2d00      	cmp	r5, #0
 800ef1a:	dd05      	ble.n	800ef28 <_dtoa_r+0x9b8>
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	462a      	mov	r2, r5
 800ef20:	4620      	mov	r0, r4
 800ef22:	f000 fc27 	bl	800f774 <__lshift>
 800ef26:	4607      	mov	r7, r0
 800ef28:	f1b8 0f00 	cmp.w	r8, #0
 800ef2c:	d05b      	beq.n	800efe6 <_dtoa_r+0xa76>
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fa0f 	bl	800f354 <_Balloc>
 800ef36:	4605      	mov	r5, r0
 800ef38:	b928      	cbnz	r0, 800ef46 <_dtoa_r+0x9d6>
 800ef3a:	4b83      	ldr	r3, [pc, #524]	; (800f148 <_dtoa_r+0xbd8>)
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ef42:	f7ff bb2e 	b.w	800e5a2 <_dtoa_r+0x32>
 800ef46:	693a      	ldr	r2, [r7, #16]
 800ef48:	3202      	adds	r2, #2
 800ef4a:	0092      	lsls	r2, r2, #2
 800ef4c:	f107 010c 	add.w	r1, r7, #12
 800ef50:	300c      	adds	r0, #12
 800ef52:	f7ff fa74 	bl	800e43e <memcpy>
 800ef56:	2201      	movs	r2, #1
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f000 fc0a 	bl	800f774 <__lshift>
 800ef60:	9b00      	ldr	r3, [sp, #0]
 800ef62:	3301      	adds	r3, #1
 800ef64:	9304      	str	r3, [sp, #16]
 800ef66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	9308      	str	r3, [sp, #32]
 800ef6e:	9b02      	ldr	r3, [sp, #8]
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	46b8      	mov	r8, r7
 800ef76:	9306      	str	r3, [sp, #24]
 800ef78:	4607      	mov	r7, r0
 800ef7a:	9b04      	ldr	r3, [sp, #16]
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	4650      	mov	r0, sl
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f7ff fa69 	bl	800e45a <quorem>
 800ef88:	4641      	mov	r1, r8
 800ef8a:	9002      	str	r0, [sp, #8]
 800ef8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ef90:	4650      	mov	r0, sl
 800ef92:	f000 fc5b 	bl	800f84c <__mcmp>
 800ef96:	463a      	mov	r2, r7
 800ef98:	9005      	str	r0, [sp, #20]
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 fc71 	bl	800f884 <__mdiff>
 800efa2:	68c2      	ldr	r2, [r0, #12]
 800efa4:	4605      	mov	r5, r0
 800efa6:	bb02      	cbnz	r2, 800efea <_dtoa_r+0xa7a>
 800efa8:	4601      	mov	r1, r0
 800efaa:	4650      	mov	r0, sl
 800efac:	f000 fc4e 	bl	800f84c <__mcmp>
 800efb0:	4602      	mov	r2, r0
 800efb2:	4629      	mov	r1, r5
 800efb4:	4620      	mov	r0, r4
 800efb6:	9209      	str	r2, [sp, #36]	; 0x24
 800efb8:	f000 fa0c 	bl	800f3d4 <_Bfree>
 800efbc:	9b07      	ldr	r3, [sp, #28]
 800efbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efc0:	9d04      	ldr	r5, [sp, #16]
 800efc2:	ea43 0102 	orr.w	r1, r3, r2
 800efc6:	9b06      	ldr	r3, [sp, #24]
 800efc8:	4319      	orrs	r1, r3
 800efca:	d110      	bne.n	800efee <_dtoa_r+0xa7e>
 800efcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800efd0:	d029      	beq.n	800f026 <_dtoa_r+0xab6>
 800efd2:	9b05      	ldr	r3, [sp, #20]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dd02      	ble.n	800efde <_dtoa_r+0xa6e>
 800efd8:	9b02      	ldr	r3, [sp, #8]
 800efda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	f883 9000 	strb.w	r9, [r3]
 800efe4:	e774      	b.n	800eed0 <_dtoa_r+0x960>
 800efe6:	4638      	mov	r0, r7
 800efe8:	e7ba      	b.n	800ef60 <_dtoa_r+0x9f0>
 800efea:	2201      	movs	r2, #1
 800efec:	e7e1      	b.n	800efb2 <_dtoa_r+0xa42>
 800efee:	9b05      	ldr	r3, [sp, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	db04      	blt.n	800effe <_dtoa_r+0xa8e>
 800eff4:	9907      	ldr	r1, [sp, #28]
 800eff6:	430b      	orrs	r3, r1
 800eff8:	9906      	ldr	r1, [sp, #24]
 800effa:	430b      	orrs	r3, r1
 800effc:	d120      	bne.n	800f040 <_dtoa_r+0xad0>
 800effe:	2a00      	cmp	r2, #0
 800f000:	dded      	ble.n	800efde <_dtoa_r+0xa6e>
 800f002:	4651      	mov	r1, sl
 800f004:	2201      	movs	r2, #1
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fbb4 	bl	800f774 <__lshift>
 800f00c:	4631      	mov	r1, r6
 800f00e:	4682      	mov	sl, r0
 800f010:	f000 fc1c 	bl	800f84c <__mcmp>
 800f014:	2800      	cmp	r0, #0
 800f016:	dc03      	bgt.n	800f020 <_dtoa_r+0xab0>
 800f018:	d1e1      	bne.n	800efde <_dtoa_r+0xa6e>
 800f01a:	f019 0f01 	tst.w	r9, #1
 800f01e:	d0de      	beq.n	800efde <_dtoa_r+0xa6e>
 800f020:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f024:	d1d8      	bne.n	800efd8 <_dtoa_r+0xa68>
 800f026:	9a01      	ldr	r2, [sp, #4]
 800f028:	2339      	movs	r3, #57	; 0x39
 800f02a:	7013      	strb	r3, [r2, #0]
 800f02c:	462b      	mov	r3, r5
 800f02e:	461d      	mov	r5, r3
 800f030:	3b01      	subs	r3, #1
 800f032:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f036:	2a39      	cmp	r2, #57	; 0x39
 800f038:	d06c      	beq.n	800f114 <_dtoa_r+0xba4>
 800f03a:	3201      	adds	r2, #1
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	e747      	b.n	800eed0 <_dtoa_r+0x960>
 800f040:	2a00      	cmp	r2, #0
 800f042:	dd07      	ble.n	800f054 <_dtoa_r+0xae4>
 800f044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f048:	d0ed      	beq.n	800f026 <_dtoa_r+0xab6>
 800f04a:	9a01      	ldr	r2, [sp, #4]
 800f04c:	f109 0301 	add.w	r3, r9, #1
 800f050:	7013      	strb	r3, [r2, #0]
 800f052:	e73d      	b.n	800eed0 <_dtoa_r+0x960>
 800f054:	9b04      	ldr	r3, [sp, #16]
 800f056:	9a08      	ldr	r2, [sp, #32]
 800f058:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d043      	beq.n	800f0e8 <_dtoa_r+0xb78>
 800f060:	4651      	mov	r1, sl
 800f062:	2300      	movs	r3, #0
 800f064:	220a      	movs	r2, #10
 800f066:	4620      	mov	r0, r4
 800f068:	f000 f9d6 	bl	800f418 <__multadd>
 800f06c:	45b8      	cmp	r8, r7
 800f06e:	4682      	mov	sl, r0
 800f070:	f04f 0300 	mov.w	r3, #0
 800f074:	f04f 020a 	mov.w	r2, #10
 800f078:	4641      	mov	r1, r8
 800f07a:	4620      	mov	r0, r4
 800f07c:	d107      	bne.n	800f08e <_dtoa_r+0xb1e>
 800f07e:	f000 f9cb 	bl	800f418 <__multadd>
 800f082:	4680      	mov	r8, r0
 800f084:	4607      	mov	r7, r0
 800f086:	9b04      	ldr	r3, [sp, #16]
 800f088:	3301      	adds	r3, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	e775      	b.n	800ef7a <_dtoa_r+0xa0a>
 800f08e:	f000 f9c3 	bl	800f418 <__multadd>
 800f092:	4639      	mov	r1, r7
 800f094:	4680      	mov	r8, r0
 800f096:	2300      	movs	r3, #0
 800f098:	220a      	movs	r2, #10
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 f9bc 	bl	800f418 <__multadd>
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	e7f0      	b.n	800f086 <_dtoa_r+0xb16>
 800f0a4:	9b04      	ldr	r3, [sp, #16]
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	9d00      	ldr	r5, [sp, #0]
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4650      	mov	r0, sl
 800f0ae:	f7ff f9d4 	bl	800e45a <quorem>
 800f0b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f0b6:	9b00      	ldr	r3, [sp, #0]
 800f0b8:	f805 9b01 	strb.w	r9, [r5], #1
 800f0bc:	1aea      	subs	r2, r5, r3
 800f0be:	9b01      	ldr	r3, [sp, #4]
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	dd07      	ble.n	800f0d4 <_dtoa_r+0xb64>
 800f0c4:	4651      	mov	r1, sl
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 f9a4 	bl	800f418 <__multadd>
 800f0d0:	4682      	mov	sl, r0
 800f0d2:	e7ea      	b.n	800f0aa <_dtoa_r+0xb3a>
 800f0d4:	9b01      	ldr	r3, [sp, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	bfc8      	it	gt
 800f0da:	461d      	movgt	r5, r3
 800f0dc:	9b00      	ldr	r3, [sp, #0]
 800f0de:	bfd8      	it	le
 800f0e0:	2501      	movle	r5, #1
 800f0e2:	441d      	add	r5, r3
 800f0e4:	f04f 0800 	mov.w	r8, #0
 800f0e8:	4651      	mov	r1, sl
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f000 fb41 	bl	800f774 <__lshift>
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4682      	mov	sl, r0
 800f0f6:	f000 fba9 	bl	800f84c <__mcmp>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	dc96      	bgt.n	800f02c <_dtoa_r+0xabc>
 800f0fe:	d102      	bne.n	800f106 <_dtoa_r+0xb96>
 800f100:	f019 0f01 	tst.w	r9, #1
 800f104:	d192      	bne.n	800f02c <_dtoa_r+0xabc>
 800f106:	462b      	mov	r3, r5
 800f108:	461d      	mov	r5, r3
 800f10a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f10e:	2a30      	cmp	r2, #48	; 0x30
 800f110:	d0fa      	beq.n	800f108 <_dtoa_r+0xb98>
 800f112:	e6dd      	b.n	800eed0 <_dtoa_r+0x960>
 800f114:	9a00      	ldr	r2, [sp, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	d189      	bne.n	800f02e <_dtoa_r+0xabe>
 800f11a:	f10b 0b01 	add.w	fp, fp, #1
 800f11e:	2331      	movs	r3, #49	; 0x31
 800f120:	e796      	b.n	800f050 <_dtoa_r+0xae0>
 800f122:	4b0a      	ldr	r3, [pc, #40]	; (800f14c <_dtoa_r+0xbdc>)
 800f124:	f7ff ba99 	b.w	800e65a <_dtoa_r+0xea>
 800f128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f47f aa6d 	bne.w	800e60a <_dtoa_r+0x9a>
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <_dtoa_r+0xbe0>)
 800f132:	f7ff ba92 	b.w	800e65a <_dtoa_r+0xea>
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	dcb5      	bgt.n	800f0a8 <_dtoa_r+0xb38>
 800f13c:	9b07      	ldr	r3, [sp, #28]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	f73f aeb1 	bgt.w	800eea6 <_dtoa_r+0x936>
 800f144:	e7b0      	b.n	800f0a8 <_dtoa_r+0xb38>
 800f146:	bf00      	nop
 800f148:	08010738 	.word	0x08010738
 800f14c:	08010698 	.word	0x08010698
 800f150:	080106bc 	.word	0x080106bc

0800f154 <_free_r>:
 800f154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f156:	2900      	cmp	r1, #0
 800f158:	d044      	beq.n	800f1e4 <_free_r+0x90>
 800f15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f15e:	9001      	str	r0, [sp, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f1a1 0404 	sub.w	r4, r1, #4
 800f166:	bfb8      	it	lt
 800f168:	18e4      	addlt	r4, r4, r3
 800f16a:	f000 f8e7 	bl	800f33c <__malloc_lock>
 800f16e:	4a1e      	ldr	r2, [pc, #120]	; (800f1e8 <_free_r+0x94>)
 800f170:	9801      	ldr	r0, [sp, #4]
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	b933      	cbnz	r3, 800f184 <_free_r+0x30>
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	6014      	str	r4, [r2, #0]
 800f17a:	b003      	add	sp, #12
 800f17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f180:	f000 b8e2 	b.w	800f348 <__malloc_unlock>
 800f184:	42a3      	cmp	r3, r4
 800f186:	d908      	bls.n	800f19a <_free_r+0x46>
 800f188:	6825      	ldr	r5, [r4, #0]
 800f18a:	1961      	adds	r1, r4, r5
 800f18c:	428b      	cmp	r3, r1
 800f18e:	bf01      	itttt	eq
 800f190:	6819      	ldreq	r1, [r3, #0]
 800f192:	685b      	ldreq	r3, [r3, #4]
 800f194:	1949      	addeq	r1, r1, r5
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	e7ed      	b.n	800f176 <_free_r+0x22>
 800f19a:	461a      	mov	r2, r3
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	b10b      	cbz	r3, 800f1a4 <_free_r+0x50>
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	d9fa      	bls.n	800f19a <_free_r+0x46>
 800f1a4:	6811      	ldr	r1, [r2, #0]
 800f1a6:	1855      	adds	r5, r2, r1
 800f1a8:	42a5      	cmp	r5, r4
 800f1aa:	d10b      	bne.n	800f1c4 <_free_r+0x70>
 800f1ac:	6824      	ldr	r4, [r4, #0]
 800f1ae:	4421      	add	r1, r4
 800f1b0:	1854      	adds	r4, r2, r1
 800f1b2:	42a3      	cmp	r3, r4
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	d1e0      	bne.n	800f17a <_free_r+0x26>
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	6053      	str	r3, [r2, #4]
 800f1be:	440c      	add	r4, r1
 800f1c0:	6014      	str	r4, [r2, #0]
 800f1c2:	e7da      	b.n	800f17a <_free_r+0x26>
 800f1c4:	d902      	bls.n	800f1cc <_free_r+0x78>
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	6003      	str	r3, [r0, #0]
 800f1ca:	e7d6      	b.n	800f17a <_free_r+0x26>
 800f1cc:	6825      	ldr	r5, [r4, #0]
 800f1ce:	1961      	adds	r1, r4, r5
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	bf04      	itt	eq
 800f1d4:	6819      	ldreq	r1, [r3, #0]
 800f1d6:	685b      	ldreq	r3, [r3, #4]
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	bf04      	itt	eq
 800f1dc:	1949      	addeq	r1, r1, r5
 800f1de:	6021      	streq	r1, [r4, #0]
 800f1e0:	6054      	str	r4, [r2, #4]
 800f1e2:	e7ca      	b.n	800f17a <_free_r+0x26>
 800f1e4:	b003      	add	sp, #12
 800f1e6:	bd30      	pop	{r4, r5, pc}
 800f1e8:	2000a8fc 	.word	0x2000a8fc

0800f1ec <malloc>:
 800f1ec:	4b02      	ldr	r3, [pc, #8]	; (800f1f8 <malloc+0xc>)
 800f1ee:	4601      	mov	r1, r0
 800f1f0:	6818      	ldr	r0, [r3, #0]
 800f1f2:	f000 b823 	b.w	800f23c <_malloc_r>
 800f1f6:	bf00      	nop
 800f1f8:	200000c8 	.word	0x200000c8

0800f1fc <sbrk_aligned>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	4e0e      	ldr	r6, [pc, #56]	; (800f238 <sbrk_aligned+0x3c>)
 800f200:	460c      	mov	r4, r1
 800f202:	6831      	ldr	r1, [r6, #0]
 800f204:	4605      	mov	r5, r0
 800f206:	b911      	cbnz	r1, 800f20e <sbrk_aligned+0x12>
 800f208:	f001 f808 	bl	801021c <_sbrk_r>
 800f20c:	6030      	str	r0, [r6, #0]
 800f20e:	4621      	mov	r1, r4
 800f210:	4628      	mov	r0, r5
 800f212:	f001 f803 	bl	801021c <_sbrk_r>
 800f216:	1c43      	adds	r3, r0, #1
 800f218:	d00a      	beq.n	800f230 <sbrk_aligned+0x34>
 800f21a:	1cc4      	adds	r4, r0, #3
 800f21c:	f024 0403 	bic.w	r4, r4, #3
 800f220:	42a0      	cmp	r0, r4
 800f222:	d007      	beq.n	800f234 <sbrk_aligned+0x38>
 800f224:	1a21      	subs	r1, r4, r0
 800f226:	4628      	mov	r0, r5
 800f228:	f000 fff8 	bl	801021c <_sbrk_r>
 800f22c:	3001      	adds	r0, #1
 800f22e:	d101      	bne.n	800f234 <sbrk_aligned+0x38>
 800f230:	f04f 34ff 	mov.w	r4, #4294967295
 800f234:	4620      	mov	r0, r4
 800f236:	bd70      	pop	{r4, r5, r6, pc}
 800f238:	2000a900 	.word	0x2000a900

0800f23c <_malloc_r>:
 800f23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f240:	1ccd      	adds	r5, r1, #3
 800f242:	f025 0503 	bic.w	r5, r5, #3
 800f246:	3508      	adds	r5, #8
 800f248:	2d0c      	cmp	r5, #12
 800f24a:	bf38      	it	cc
 800f24c:	250c      	movcc	r5, #12
 800f24e:	2d00      	cmp	r5, #0
 800f250:	4607      	mov	r7, r0
 800f252:	db01      	blt.n	800f258 <_malloc_r+0x1c>
 800f254:	42a9      	cmp	r1, r5
 800f256:	d905      	bls.n	800f264 <_malloc_r+0x28>
 800f258:	230c      	movs	r3, #12
 800f25a:	603b      	str	r3, [r7, #0]
 800f25c:	2600      	movs	r6, #0
 800f25e:	4630      	mov	r0, r6
 800f260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f338 <_malloc_r+0xfc>
 800f268:	f000 f868 	bl	800f33c <__malloc_lock>
 800f26c:	f8d8 3000 	ldr.w	r3, [r8]
 800f270:	461c      	mov	r4, r3
 800f272:	bb5c      	cbnz	r4, 800f2cc <_malloc_r+0x90>
 800f274:	4629      	mov	r1, r5
 800f276:	4638      	mov	r0, r7
 800f278:	f7ff ffc0 	bl	800f1fc <sbrk_aligned>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	4604      	mov	r4, r0
 800f280:	d155      	bne.n	800f32e <_malloc_r+0xf2>
 800f282:	f8d8 4000 	ldr.w	r4, [r8]
 800f286:	4626      	mov	r6, r4
 800f288:	2e00      	cmp	r6, #0
 800f28a:	d145      	bne.n	800f318 <_malloc_r+0xdc>
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	d048      	beq.n	800f322 <_malloc_r+0xe6>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	4631      	mov	r1, r6
 800f294:	4638      	mov	r0, r7
 800f296:	eb04 0903 	add.w	r9, r4, r3
 800f29a:	f000 ffbf 	bl	801021c <_sbrk_r>
 800f29e:	4581      	cmp	r9, r0
 800f2a0:	d13f      	bne.n	800f322 <_malloc_r+0xe6>
 800f2a2:	6821      	ldr	r1, [r4, #0]
 800f2a4:	1a6d      	subs	r5, r5, r1
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff ffa7 	bl	800f1fc <sbrk_aligned>
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	d037      	beq.n	800f322 <_malloc_r+0xe6>
 800f2b2:	6823      	ldr	r3, [r4, #0]
 800f2b4:	442b      	add	r3, r5
 800f2b6:	6023      	str	r3, [r4, #0]
 800f2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d038      	beq.n	800f332 <_malloc_r+0xf6>
 800f2c0:	685a      	ldr	r2, [r3, #4]
 800f2c2:	42a2      	cmp	r2, r4
 800f2c4:	d12b      	bne.n	800f31e <_malloc_r+0xe2>
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	605a      	str	r2, [r3, #4]
 800f2ca:	e00f      	b.n	800f2ec <_malloc_r+0xb0>
 800f2cc:	6822      	ldr	r2, [r4, #0]
 800f2ce:	1b52      	subs	r2, r2, r5
 800f2d0:	d41f      	bmi.n	800f312 <_malloc_r+0xd6>
 800f2d2:	2a0b      	cmp	r2, #11
 800f2d4:	d917      	bls.n	800f306 <_malloc_r+0xca>
 800f2d6:	1961      	adds	r1, r4, r5
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	6025      	str	r5, [r4, #0]
 800f2dc:	bf18      	it	ne
 800f2de:	6059      	strne	r1, [r3, #4]
 800f2e0:	6863      	ldr	r3, [r4, #4]
 800f2e2:	bf08      	it	eq
 800f2e4:	f8c8 1000 	streq.w	r1, [r8]
 800f2e8:	5162      	str	r2, [r4, r5]
 800f2ea:	604b      	str	r3, [r1, #4]
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f104 060b 	add.w	r6, r4, #11
 800f2f2:	f000 f829 	bl	800f348 <__malloc_unlock>
 800f2f6:	f026 0607 	bic.w	r6, r6, #7
 800f2fa:	1d23      	adds	r3, r4, #4
 800f2fc:	1af2      	subs	r2, r6, r3
 800f2fe:	d0ae      	beq.n	800f25e <_malloc_r+0x22>
 800f300:	1b9b      	subs	r3, r3, r6
 800f302:	50a3      	str	r3, [r4, r2]
 800f304:	e7ab      	b.n	800f25e <_malloc_r+0x22>
 800f306:	42a3      	cmp	r3, r4
 800f308:	6862      	ldr	r2, [r4, #4]
 800f30a:	d1dd      	bne.n	800f2c8 <_malloc_r+0x8c>
 800f30c:	f8c8 2000 	str.w	r2, [r8]
 800f310:	e7ec      	b.n	800f2ec <_malloc_r+0xb0>
 800f312:	4623      	mov	r3, r4
 800f314:	6864      	ldr	r4, [r4, #4]
 800f316:	e7ac      	b.n	800f272 <_malloc_r+0x36>
 800f318:	4634      	mov	r4, r6
 800f31a:	6876      	ldr	r6, [r6, #4]
 800f31c:	e7b4      	b.n	800f288 <_malloc_r+0x4c>
 800f31e:	4613      	mov	r3, r2
 800f320:	e7cc      	b.n	800f2bc <_malloc_r+0x80>
 800f322:	230c      	movs	r3, #12
 800f324:	603b      	str	r3, [r7, #0]
 800f326:	4638      	mov	r0, r7
 800f328:	f000 f80e 	bl	800f348 <__malloc_unlock>
 800f32c:	e797      	b.n	800f25e <_malloc_r+0x22>
 800f32e:	6025      	str	r5, [r4, #0]
 800f330:	e7dc      	b.n	800f2ec <_malloc_r+0xb0>
 800f332:	605b      	str	r3, [r3, #4]
 800f334:	deff      	udf	#255	; 0xff
 800f336:	bf00      	nop
 800f338:	2000a8fc 	.word	0x2000a8fc

0800f33c <__malloc_lock>:
 800f33c:	4801      	ldr	r0, [pc, #4]	; (800f344 <__malloc_lock+0x8>)
 800f33e:	f7ff b874 	b.w	800e42a <__retarget_lock_acquire_recursive>
 800f342:	bf00      	nop
 800f344:	2000a8f8 	.word	0x2000a8f8

0800f348 <__malloc_unlock>:
 800f348:	4801      	ldr	r0, [pc, #4]	; (800f350 <__malloc_unlock+0x8>)
 800f34a:	f7ff b86f 	b.w	800e42c <__retarget_lock_release_recursive>
 800f34e:	bf00      	nop
 800f350:	2000a8f8 	.word	0x2000a8f8

0800f354 <_Balloc>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	69c6      	ldr	r6, [r0, #28]
 800f358:	4604      	mov	r4, r0
 800f35a:	460d      	mov	r5, r1
 800f35c:	b976      	cbnz	r6, 800f37c <_Balloc+0x28>
 800f35e:	2010      	movs	r0, #16
 800f360:	f7ff ff44 	bl	800f1ec <malloc>
 800f364:	4602      	mov	r2, r0
 800f366:	61e0      	str	r0, [r4, #28]
 800f368:	b920      	cbnz	r0, 800f374 <_Balloc+0x20>
 800f36a:	4b18      	ldr	r3, [pc, #96]	; (800f3cc <_Balloc+0x78>)
 800f36c:	4818      	ldr	r0, [pc, #96]	; (800f3d0 <_Balloc+0x7c>)
 800f36e:	216b      	movs	r1, #107	; 0x6b
 800f370:	f000 ff64 	bl	801023c <__assert_func>
 800f374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f378:	6006      	str	r6, [r0, #0]
 800f37a:	60c6      	str	r6, [r0, #12]
 800f37c:	69e6      	ldr	r6, [r4, #28]
 800f37e:	68f3      	ldr	r3, [r6, #12]
 800f380:	b183      	cbz	r3, 800f3a4 <_Balloc+0x50>
 800f382:	69e3      	ldr	r3, [r4, #28]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f38a:	b9b8      	cbnz	r0, 800f3bc <_Balloc+0x68>
 800f38c:	2101      	movs	r1, #1
 800f38e:	fa01 f605 	lsl.w	r6, r1, r5
 800f392:	1d72      	adds	r2, r6, #5
 800f394:	0092      	lsls	r2, r2, #2
 800f396:	4620      	mov	r0, r4
 800f398:	f000 ff6e 	bl	8010278 <_calloc_r>
 800f39c:	b160      	cbz	r0, 800f3b8 <_Balloc+0x64>
 800f39e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f3a2:	e00e      	b.n	800f3c2 <_Balloc+0x6e>
 800f3a4:	2221      	movs	r2, #33	; 0x21
 800f3a6:	2104      	movs	r1, #4
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 ff65 	bl	8010278 <_calloc_r>
 800f3ae:	69e3      	ldr	r3, [r4, #28]
 800f3b0:	60f0      	str	r0, [r6, #12]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1e4      	bne.n	800f382 <_Balloc+0x2e>
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	6802      	ldr	r2, [r0, #0]
 800f3be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3c8:	e7f7      	b.n	800f3ba <_Balloc+0x66>
 800f3ca:	bf00      	nop
 800f3cc:	080106c9 	.word	0x080106c9
 800f3d0:	08010749 	.word	0x08010749

0800f3d4 <_Bfree>:
 800f3d4:	b570      	push	{r4, r5, r6, lr}
 800f3d6:	69c6      	ldr	r6, [r0, #28]
 800f3d8:	4605      	mov	r5, r0
 800f3da:	460c      	mov	r4, r1
 800f3dc:	b976      	cbnz	r6, 800f3fc <_Bfree+0x28>
 800f3de:	2010      	movs	r0, #16
 800f3e0:	f7ff ff04 	bl	800f1ec <malloc>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	61e8      	str	r0, [r5, #28]
 800f3e8:	b920      	cbnz	r0, 800f3f4 <_Bfree+0x20>
 800f3ea:	4b09      	ldr	r3, [pc, #36]	; (800f410 <_Bfree+0x3c>)
 800f3ec:	4809      	ldr	r0, [pc, #36]	; (800f414 <_Bfree+0x40>)
 800f3ee:	218f      	movs	r1, #143	; 0x8f
 800f3f0:	f000 ff24 	bl	801023c <__assert_func>
 800f3f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3f8:	6006      	str	r6, [r0, #0]
 800f3fa:	60c6      	str	r6, [r0, #12]
 800f3fc:	b13c      	cbz	r4, 800f40e <_Bfree+0x3a>
 800f3fe:	69eb      	ldr	r3, [r5, #28]
 800f400:	6862      	ldr	r2, [r4, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f408:	6021      	str	r1, [r4, #0]
 800f40a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f40e:	bd70      	pop	{r4, r5, r6, pc}
 800f410:	080106c9 	.word	0x080106c9
 800f414:	08010749 	.word	0x08010749

0800f418 <__multadd>:
 800f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41c:	690d      	ldr	r5, [r1, #16]
 800f41e:	4607      	mov	r7, r0
 800f420:	460c      	mov	r4, r1
 800f422:	461e      	mov	r6, r3
 800f424:	f101 0c14 	add.w	ip, r1, #20
 800f428:	2000      	movs	r0, #0
 800f42a:	f8dc 3000 	ldr.w	r3, [ip]
 800f42e:	b299      	uxth	r1, r3
 800f430:	fb02 6101 	mla	r1, r2, r1, r6
 800f434:	0c1e      	lsrs	r6, r3, #16
 800f436:	0c0b      	lsrs	r3, r1, #16
 800f438:	fb02 3306 	mla	r3, r2, r6, r3
 800f43c:	b289      	uxth	r1, r1
 800f43e:	3001      	adds	r0, #1
 800f440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f444:	4285      	cmp	r5, r0
 800f446:	f84c 1b04 	str.w	r1, [ip], #4
 800f44a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f44e:	dcec      	bgt.n	800f42a <__multadd+0x12>
 800f450:	b30e      	cbz	r6, 800f496 <__multadd+0x7e>
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	42ab      	cmp	r3, r5
 800f456:	dc19      	bgt.n	800f48c <__multadd+0x74>
 800f458:	6861      	ldr	r1, [r4, #4]
 800f45a:	4638      	mov	r0, r7
 800f45c:	3101      	adds	r1, #1
 800f45e:	f7ff ff79 	bl	800f354 <_Balloc>
 800f462:	4680      	mov	r8, r0
 800f464:	b928      	cbnz	r0, 800f472 <__multadd+0x5a>
 800f466:	4602      	mov	r2, r0
 800f468:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <__multadd+0x84>)
 800f46a:	480d      	ldr	r0, [pc, #52]	; (800f4a0 <__multadd+0x88>)
 800f46c:	21ba      	movs	r1, #186	; 0xba
 800f46e:	f000 fee5 	bl	801023c <__assert_func>
 800f472:	6922      	ldr	r2, [r4, #16]
 800f474:	3202      	adds	r2, #2
 800f476:	f104 010c 	add.w	r1, r4, #12
 800f47a:	0092      	lsls	r2, r2, #2
 800f47c:	300c      	adds	r0, #12
 800f47e:	f7fe ffde 	bl	800e43e <memcpy>
 800f482:	4621      	mov	r1, r4
 800f484:	4638      	mov	r0, r7
 800f486:	f7ff ffa5 	bl	800f3d4 <_Bfree>
 800f48a:	4644      	mov	r4, r8
 800f48c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f490:	3501      	adds	r5, #1
 800f492:	615e      	str	r6, [r3, #20]
 800f494:	6125      	str	r5, [r4, #16]
 800f496:	4620      	mov	r0, r4
 800f498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49c:	08010738 	.word	0x08010738
 800f4a0:	08010749 	.word	0x08010749

0800f4a4 <__hi0bits>:
 800f4a4:	0c03      	lsrs	r3, r0, #16
 800f4a6:	041b      	lsls	r3, r3, #16
 800f4a8:	b9d3      	cbnz	r3, 800f4e0 <__hi0bits+0x3c>
 800f4aa:	0400      	lsls	r0, r0, #16
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4b2:	bf04      	itt	eq
 800f4b4:	0200      	lsleq	r0, r0, #8
 800f4b6:	3308      	addeq	r3, #8
 800f4b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4bc:	bf04      	itt	eq
 800f4be:	0100      	lsleq	r0, r0, #4
 800f4c0:	3304      	addeq	r3, #4
 800f4c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4c6:	bf04      	itt	eq
 800f4c8:	0080      	lsleq	r0, r0, #2
 800f4ca:	3302      	addeq	r3, #2
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	db05      	blt.n	800f4dc <__hi0bits+0x38>
 800f4d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4d4:	f103 0301 	add.w	r3, r3, #1
 800f4d8:	bf08      	it	eq
 800f4da:	2320      	moveq	r3, #32
 800f4dc:	4618      	mov	r0, r3
 800f4de:	4770      	bx	lr
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	e7e4      	b.n	800f4ae <__hi0bits+0xa>

0800f4e4 <__lo0bits>:
 800f4e4:	6803      	ldr	r3, [r0, #0]
 800f4e6:	f013 0207 	ands.w	r2, r3, #7
 800f4ea:	d00c      	beq.n	800f506 <__lo0bits+0x22>
 800f4ec:	07d9      	lsls	r1, r3, #31
 800f4ee:	d422      	bmi.n	800f536 <__lo0bits+0x52>
 800f4f0:	079a      	lsls	r2, r3, #30
 800f4f2:	bf49      	itett	mi
 800f4f4:	085b      	lsrmi	r3, r3, #1
 800f4f6:	089b      	lsrpl	r3, r3, #2
 800f4f8:	6003      	strmi	r3, [r0, #0]
 800f4fa:	2201      	movmi	r2, #1
 800f4fc:	bf5c      	itt	pl
 800f4fe:	6003      	strpl	r3, [r0, #0]
 800f500:	2202      	movpl	r2, #2
 800f502:	4610      	mov	r0, r2
 800f504:	4770      	bx	lr
 800f506:	b299      	uxth	r1, r3
 800f508:	b909      	cbnz	r1, 800f50e <__lo0bits+0x2a>
 800f50a:	0c1b      	lsrs	r3, r3, #16
 800f50c:	2210      	movs	r2, #16
 800f50e:	b2d9      	uxtb	r1, r3
 800f510:	b909      	cbnz	r1, 800f516 <__lo0bits+0x32>
 800f512:	3208      	adds	r2, #8
 800f514:	0a1b      	lsrs	r3, r3, #8
 800f516:	0719      	lsls	r1, r3, #28
 800f518:	bf04      	itt	eq
 800f51a:	091b      	lsreq	r3, r3, #4
 800f51c:	3204      	addeq	r2, #4
 800f51e:	0799      	lsls	r1, r3, #30
 800f520:	bf04      	itt	eq
 800f522:	089b      	lsreq	r3, r3, #2
 800f524:	3202      	addeq	r2, #2
 800f526:	07d9      	lsls	r1, r3, #31
 800f528:	d403      	bmi.n	800f532 <__lo0bits+0x4e>
 800f52a:	085b      	lsrs	r3, r3, #1
 800f52c:	f102 0201 	add.w	r2, r2, #1
 800f530:	d003      	beq.n	800f53a <__lo0bits+0x56>
 800f532:	6003      	str	r3, [r0, #0]
 800f534:	e7e5      	b.n	800f502 <__lo0bits+0x1e>
 800f536:	2200      	movs	r2, #0
 800f538:	e7e3      	b.n	800f502 <__lo0bits+0x1e>
 800f53a:	2220      	movs	r2, #32
 800f53c:	e7e1      	b.n	800f502 <__lo0bits+0x1e>
	...

0800f540 <__i2b>:
 800f540:	b510      	push	{r4, lr}
 800f542:	460c      	mov	r4, r1
 800f544:	2101      	movs	r1, #1
 800f546:	f7ff ff05 	bl	800f354 <_Balloc>
 800f54a:	4602      	mov	r2, r0
 800f54c:	b928      	cbnz	r0, 800f55a <__i2b+0x1a>
 800f54e:	4b05      	ldr	r3, [pc, #20]	; (800f564 <__i2b+0x24>)
 800f550:	4805      	ldr	r0, [pc, #20]	; (800f568 <__i2b+0x28>)
 800f552:	f240 1145 	movw	r1, #325	; 0x145
 800f556:	f000 fe71 	bl	801023c <__assert_func>
 800f55a:	2301      	movs	r3, #1
 800f55c:	6144      	str	r4, [r0, #20]
 800f55e:	6103      	str	r3, [r0, #16]
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	08010738 	.word	0x08010738
 800f568:	08010749 	.word	0x08010749

0800f56c <__multiply>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	4691      	mov	r9, r2
 800f572:	690a      	ldr	r2, [r1, #16]
 800f574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f578:	429a      	cmp	r2, r3
 800f57a:	bfb8      	it	lt
 800f57c:	460b      	movlt	r3, r1
 800f57e:	460c      	mov	r4, r1
 800f580:	bfbc      	itt	lt
 800f582:	464c      	movlt	r4, r9
 800f584:	4699      	movlt	r9, r3
 800f586:	6927      	ldr	r7, [r4, #16]
 800f588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f58c:	68a3      	ldr	r3, [r4, #8]
 800f58e:	6861      	ldr	r1, [r4, #4]
 800f590:	eb07 060a 	add.w	r6, r7, sl
 800f594:	42b3      	cmp	r3, r6
 800f596:	b085      	sub	sp, #20
 800f598:	bfb8      	it	lt
 800f59a:	3101      	addlt	r1, #1
 800f59c:	f7ff feda 	bl	800f354 <_Balloc>
 800f5a0:	b930      	cbnz	r0, 800f5b0 <__multiply+0x44>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	4b44      	ldr	r3, [pc, #272]	; (800f6b8 <__multiply+0x14c>)
 800f5a6:	4845      	ldr	r0, [pc, #276]	; (800f6bc <__multiply+0x150>)
 800f5a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f5ac:	f000 fe46 	bl	801023c <__assert_func>
 800f5b0:	f100 0514 	add.w	r5, r0, #20
 800f5b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5b8:	462b      	mov	r3, r5
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	4543      	cmp	r3, r8
 800f5be:	d321      	bcc.n	800f604 <__multiply+0x98>
 800f5c0:	f104 0314 	add.w	r3, r4, #20
 800f5c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5c8:	f109 0314 	add.w	r3, r9, #20
 800f5cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5d0:	9202      	str	r2, [sp, #8]
 800f5d2:	1b3a      	subs	r2, r7, r4
 800f5d4:	3a15      	subs	r2, #21
 800f5d6:	f022 0203 	bic.w	r2, r2, #3
 800f5da:	3204      	adds	r2, #4
 800f5dc:	f104 0115 	add.w	r1, r4, #21
 800f5e0:	428f      	cmp	r7, r1
 800f5e2:	bf38      	it	cc
 800f5e4:	2204      	movcc	r2, #4
 800f5e6:	9201      	str	r2, [sp, #4]
 800f5e8:	9a02      	ldr	r2, [sp, #8]
 800f5ea:	9303      	str	r3, [sp, #12]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d80c      	bhi.n	800f60a <__multiply+0x9e>
 800f5f0:	2e00      	cmp	r6, #0
 800f5f2:	dd03      	ble.n	800f5fc <__multiply+0x90>
 800f5f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d05b      	beq.n	800f6b4 <__multiply+0x148>
 800f5fc:	6106      	str	r6, [r0, #16]
 800f5fe:	b005      	add	sp, #20
 800f600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f604:	f843 2b04 	str.w	r2, [r3], #4
 800f608:	e7d8      	b.n	800f5bc <__multiply+0x50>
 800f60a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f60e:	f1ba 0f00 	cmp.w	sl, #0
 800f612:	d024      	beq.n	800f65e <__multiply+0xf2>
 800f614:	f104 0e14 	add.w	lr, r4, #20
 800f618:	46a9      	mov	r9, r5
 800f61a:	f04f 0c00 	mov.w	ip, #0
 800f61e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f622:	f8d9 1000 	ldr.w	r1, [r9]
 800f626:	fa1f fb82 	uxth.w	fp, r2
 800f62a:	b289      	uxth	r1, r1
 800f62c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f634:	f8d9 2000 	ldr.w	r2, [r9]
 800f638:	4461      	add	r1, ip
 800f63a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f63e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f646:	b289      	uxth	r1, r1
 800f648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f64c:	4577      	cmp	r7, lr
 800f64e:	f849 1b04 	str.w	r1, [r9], #4
 800f652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f656:	d8e2      	bhi.n	800f61e <__multiply+0xb2>
 800f658:	9a01      	ldr	r2, [sp, #4]
 800f65a:	f845 c002 	str.w	ip, [r5, r2]
 800f65e:	9a03      	ldr	r2, [sp, #12]
 800f660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f664:	3304      	adds	r3, #4
 800f666:	f1b9 0f00 	cmp.w	r9, #0
 800f66a:	d021      	beq.n	800f6b0 <__multiply+0x144>
 800f66c:	6829      	ldr	r1, [r5, #0]
 800f66e:	f104 0c14 	add.w	ip, r4, #20
 800f672:	46ae      	mov	lr, r5
 800f674:	f04f 0a00 	mov.w	sl, #0
 800f678:	f8bc b000 	ldrh.w	fp, [ip]
 800f67c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f680:	fb09 220b 	mla	r2, r9, fp, r2
 800f684:	4452      	add	r2, sl
 800f686:	b289      	uxth	r1, r1
 800f688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f68c:	f84e 1b04 	str.w	r1, [lr], #4
 800f690:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f698:	f8be 1000 	ldrh.w	r1, [lr]
 800f69c:	fb09 110a 	mla	r1, r9, sl, r1
 800f6a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f6a4:	4567      	cmp	r7, ip
 800f6a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6aa:	d8e5      	bhi.n	800f678 <__multiply+0x10c>
 800f6ac:	9a01      	ldr	r2, [sp, #4]
 800f6ae:	50a9      	str	r1, [r5, r2]
 800f6b0:	3504      	adds	r5, #4
 800f6b2:	e799      	b.n	800f5e8 <__multiply+0x7c>
 800f6b4:	3e01      	subs	r6, #1
 800f6b6:	e79b      	b.n	800f5f0 <__multiply+0x84>
 800f6b8:	08010738 	.word	0x08010738
 800f6bc:	08010749 	.word	0x08010749

0800f6c0 <__pow5mult>:
 800f6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c4:	4615      	mov	r5, r2
 800f6c6:	f012 0203 	ands.w	r2, r2, #3
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	d007      	beq.n	800f6e0 <__pow5mult+0x20>
 800f6d0:	4c25      	ldr	r4, [pc, #148]	; (800f768 <__pow5mult+0xa8>)
 800f6d2:	3a01      	subs	r2, #1
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6da:	f7ff fe9d 	bl	800f418 <__multadd>
 800f6de:	4607      	mov	r7, r0
 800f6e0:	10ad      	asrs	r5, r5, #2
 800f6e2:	d03d      	beq.n	800f760 <__pow5mult+0xa0>
 800f6e4:	69f4      	ldr	r4, [r6, #28]
 800f6e6:	b97c      	cbnz	r4, 800f708 <__pow5mult+0x48>
 800f6e8:	2010      	movs	r0, #16
 800f6ea:	f7ff fd7f 	bl	800f1ec <malloc>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	61f0      	str	r0, [r6, #28]
 800f6f2:	b928      	cbnz	r0, 800f700 <__pow5mult+0x40>
 800f6f4:	4b1d      	ldr	r3, [pc, #116]	; (800f76c <__pow5mult+0xac>)
 800f6f6:	481e      	ldr	r0, [pc, #120]	; (800f770 <__pow5mult+0xb0>)
 800f6f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f6fc:	f000 fd9e 	bl	801023c <__assert_func>
 800f700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f704:	6004      	str	r4, [r0, #0]
 800f706:	60c4      	str	r4, [r0, #12]
 800f708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f70c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f710:	b94c      	cbnz	r4, 800f726 <__pow5mult+0x66>
 800f712:	f240 2171 	movw	r1, #625	; 0x271
 800f716:	4630      	mov	r0, r6
 800f718:	f7ff ff12 	bl	800f540 <__i2b>
 800f71c:	2300      	movs	r3, #0
 800f71e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f722:	4604      	mov	r4, r0
 800f724:	6003      	str	r3, [r0, #0]
 800f726:	f04f 0900 	mov.w	r9, #0
 800f72a:	07eb      	lsls	r3, r5, #31
 800f72c:	d50a      	bpl.n	800f744 <__pow5mult+0x84>
 800f72e:	4639      	mov	r1, r7
 800f730:	4622      	mov	r2, r4
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ff1a 	bl	800f56c <__multiply>
 800f738:	4639      	mov	r1, r7
 800f73a:	4680      	mov	r8, r0
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff fe49 	bl	800f3d4 <_Bfree>
 800f742:	4647      	mov	r7, r8
 800f744:	106d      	asrs	r5, r5, #1
 800f746:	d00b      	beq.n	800f760 <__pow5mult+0xa0>
 800f748:	6820      	ldr	r0, [r4, #0]
 800f74a:	b938      	cbnz	r0, 800f75c <__pow5mult+0x9c>
 800f74c:	4622      	mov	r2, r4
 800f74e:	4621      	mov	r1, r4
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff ff0b 	bl	800f56c <__multiply>
 800f756:	6020      	str	r0, [r4, #0]
 800f758:	f8c0 9000 	str.w	r9, [r0]
 800f75c:	4604      	mov	r4, r0
 800f75e:	e7e4      	b.n	800f72a <__pow5mult+0x6a>
 800f760:	4638      	mov	r0, r7
 800f762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f766:	bf00      	nop
 800f768:	08010898 	.word	0x08010898
 800f76c:	080106c9 	.word	0x080106c9
 800f770:	08010749 	.word	0x08010749

0800f774 <__lshift>:
 800f774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f778:	460c      	mov	r4, r1
 800f77a:	6849      	ldr	r1, [r1, #4]
 800f77c:	6923      	ldr	r3, [r4, #16]
 800f77e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f782:	68a3      	ldr	r3, [r4, #8]
 800f784:	4607      	mov	r7, r0
 800f786:	4691      	mov	r9, r2
 800f788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f78c:	f108 0601 	add.w	r6, r8, #1
 800f790:	42b3      	cmp	r3, r6
 800f792:	db0b      	blt.n	800f7ac <__lshift+0x38>
 800f794:	4638      	mov	r0, r7
 800f796:	f7ff fddd 	bl	800f354 <_Balloc>
 800f79a:	4605      	mov	r5, r0
 800f79c:	b948      	cbnz	r0, 800f7b2 <__lshift+0x3e>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	4b28      	ldr	r3, [pc, #160]	; (800f844 <__lshift+0xd0>)
 800f7a2:	4829      	ldr	r0, [pc, #164]	; (800f848 <__lshift+0xd4>)
 800f7a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f7a8:	f000 fd48 	bl	801023c <__assert_func>
 800f7ac:	3101      	adds	r1, #1
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	e7ee      	b.n	800f790 <__lshift+0x1c>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f100 0114 	add.w	r1, r0, #20
 800f7b8:	f100 0210 	add.w	r2, r0, #16
 800f7bc:	4618      	mov	r0, r3
 800f7be:	4553      	cmp	r3, sl
 800f7c0:	db33      	blt.n	800f82a <__lshift+0xb6>
 800f7c2:	6920      	ldr	r0, [r4, #16]
 800f7c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7c8:	f104 0314 	add.w	r3, r4, #20
 800f7cc:	f019 091f 	ands.w	r9, r9, #31
 800f7d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7d8:	d02b      	beq.n	800f832 <__lshift+0xbe>
 800f7da:	f1c9 0e20 	rsb	lr, r9, #32
 800f7de:	468a      	mov	sl, r1
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7e8:	4310      	orrs	r0, r2
 800f7ea:	f84a 0b04 	str.w	r0, [sl], #4
 800f7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f2:	459c      	cmp	ip, r3
 800f7f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7f8:	d8f3      	bhi.n	800f7e2 <__lshift+0x6e>
 800f7fa:	ebac 0304 	sub.w	r3, ip, r4
 800f7fe:	3b15      	subs	r3, #21
 800f800:	f023 0303 	bic.w	r3, r3, #3
 800f804:	3304      	adds	r3, #4
 800f806:	f104 0015 	add.w	r0, r4, #21
 800f80a:	4584      	cmp	ip, r0
 800f80c:	bf38      	it	cc
 800f80e:	2304      	movcc	r3, #4
 800f810:	50ca      	str	r2, [r1, r3]
 800f812:	b10a      	cbz	r2, 800f818 <__lshift+0xa4>
 800f814:	f108 0602 	add.w	r6, r8, #2
 800f818:	3e01      	subs	r6, #1
 800f81a:	4638      	mov	r0, r7
 800f81c:	612e      	str	r6, [r5, #16]
 800f81e:	4621      	mov	r1, r4
 800f820:	f7ff fdd8 	bl	800f3d4 <_Bfree>
 800f824:	4628      	mov	r0, r5
 800f826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f82e:	3301      	adds	r3, #1
 800f830:	e7c5      	b.n	800f7be <__lshift+0x4a>
 800f832:	3904      	subs	r1, #4
 800f834:	f853 2b04 	ldr.w	r2, [r3], #4
 800f838:	f841 2f04 	str.w	r2, [r1, #4]!
 800f83c:	459c      	cmp	ip, r3
 800f83e:	d8f9      	bhi.n	800f834 <__lshift+0xc0>
 800f840:	e7ea      	b.n	800f818 <__lshift+0xa4>
 800f842:	bf00      	nop
 800f844:	08010738 	.word	0x08010738
 800f848:	08010749 	.word	0x08010749

0800f84c <__mcmp>:
 800f84c:	b530      	push	{r4, r5, lr}
 800f84e:	6902      	ldr	r2, [r0, #16]
 800f850:	690c      	ldr	r4, [r1, #16]
 800f852:	1b12      	subs	r2, r2, r4
 800f854:	d10e      	bne.n	800f874 <__mcmp+0x28>
 800f856:	f100 0314 	add.w	r3, r0, #20
 800f85a:	3114      	adds	r1, #20
 800f85c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f86c:	42a5      	cmp	r5, r4
 800f86e:	d003      	beq.n	800f878 <__mcmp+0x2c>
 800f870:	d305      	bcc.n	800f87e <__mcmp+0x32>
 800f872:	2201      	movs	r2, #1
 800f874:	4610      	mov	r0, r2
 800f876:	bd30      	pop	{r4, r5, pc}
 800f878:	4283      	cmp	r3, r0
 800f87a:	d3f3      	bcc.n	800f864 <__mcmp+0x18>
 800f87c:	e7fa      	b.n	800f874 <__mcmp+0x28>
 800f87e:	f04f 32ff 	mov.w	r2, #4294967295
 800f882:	e7f7      	b.n	800f874 <__mcmp+0x28>

0800f884 <__mdiff>:
 800f884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f888:	460c      	mov	r4, r1
 800f88a:	4606      	mov	r6, r0
 800f88c:	4611      	mov	r1, r2
 800f88e:	4620      	mov	r0, r4
 800f890:	4690      	mov	r8, r2
 800f892:	f7ff ffdb 	bl	800f84c <__mcmp>
 800f896:	1e05      	subs	r5, r0, #0
 800f898:	d110      	bne.n	800f8bc <__mdiff+0x38>
 800f89a:	4629      	mov	r1, r5
 800f89c:	4630      	mov	r0, r6
 800f89e:	f7ff fd59 	bl	800f354 <_Balloc>
 800f8a2:	b930      	cbnz	r0, 800f8b2 <__mdiff+0x2e>
 800f8a4:	4b3a      	ldr	r3, [pc, #232]	; (800f990 <__mdiff+0x10c>)
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	f240 2137 	movw	r1, #567	; 0x237
 800f8ac:	4839      	ldr	r0, [pc, #228]	; (800f994 <__mdiff+0x110>)
 800f8ae:	f000 fcc5 	bl	801023c <__assert_func>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	bfa4      	itt	ge
 800f8be:	4643      	movge	r3, r8
 800f8c0:	46a0      	movge	r8, r4
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8c8:	bfa6      	itte	ge
 800f8ca:	461c      	movge	r4, r3
 800f8cc:	2500      	movge	r5, #0
 800f8ce:	2501      	movlt	r5, #1
 800f8d0:	f7ff fd40 	bl	800f354 <_Balloc>
 800f8d4:	b920      	cbnz	r0, 800f8e0 <__mdiff+0x5c>
 800f8d6:	4b2e      	ldr	r3, [pc, #184]	; (800f990 <__mdiff+0x10c>)
 800f8d8:	4602      	mov	r2, r0
 800f8da:	f240 2145 	movw	r1, #581	; 0x245
 800f8de:	e7e5      	b.n	800f8ac <__mdiff+0x28>
 800f8e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8e4:	6926      	ldr	r6, [r4, #16]
 800f8e6:	60c5      	str	r5, [r0, #12]
 800f8e8:	f104 0914 	add.w	r9, r4, #20
 800f8ec:	f108 0514 	add.w	r5, r8, #20
 800f8f0:	f100 0e14 	add.w	lr, r0, #20
 800f8f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f8f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f8fc:	f108 0210 	add.w	r2, r8, #16
 800f900:	46f2      	mov	sl, lr
 800f902:	2100      	movs	r1, #0
 800f904:	f859 3b04 	ldr.w	r3, [r9], #4
 800f908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f90c:	fa11 f88b 	uxtah	r8, r1, fp
 800f910:	b299      	uxth	r1, r3
 800f912:	0c1b      	lsrs	r3, r3, #16
 800f914:	eba8 0801 	sub.w	r8, r8, r1
 800f918:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f91c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f920:	fa1f f888 	uxth.w	r8, r8
 800f924:	1419      	asrs	r1, r3, #16
 800f926:	454e      	cmp	r6, r9
 800f928:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f92c:	f84a 3b04 	str.w	r3, [sl], #4
 800f930:	d8e8      	bhi.n	800f904 <__mdiff+0x80>
 800f932:	1b33      	subs	r3, r6, r4
 800f934:	3b15      	subs	r3, #21
 800f936:	f023 0303 	bic.w	r3, r3, #3
 800f93a:	3304      	adds	r3, #4
 800f93c:	3415      	adds	r4, #21
 800f93e:	42a6      	cmp	r6, r4
 800f940:	bf38      	it	cc
 800f942:	2304      	movcc	r3, #4
 800f944:	441d      	add	r5, r3
 800f946:	4473      	add	r3, lr
 800f948:	469e      	mov	lr, r3
 800f94a:	462e      	mov	r6, r5
 800f94c:	4566      	cmp	r6, ip
 800f94e:	d30e      	bcc.n	800f96e <__mdiff+0xea>
 800f950:	f10c 0203 	add.w	r2, ip, #3
 800f954:	1b52      	subs	r2, r2, r5
 800f956:	f022 0203 	bic.w	r2, r2, #3
 800f95a:	3d03      	subs	r5, #3
 800f95c:	45ac      	cmp	ip, r5
 800f95e:	bf38      	it	cc
 800f960:	2200      	movcc	r2, #0
 800f962:	4413      	add	r3, r2
 800f964:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f968:	b17a      	cbz	r2, 800f98a <__mdiff+0x106>
 800f96a:	6107      	str	r7, [r0, #16]
 800f96c:	e7a4      	b.n	800f8b8 <__mdiff+0x34>
 800f96e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f972:	fa11 f288 	uxtah	r2, r1, r8
 800f976:	1414      	asrs	r4, r2, #16
 800f978:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f97c:	b292      	uxth	r2, r2
 800f97e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f982:	f84e 2b04 	str.w	r2, [lr], #4
 800f986:	1421      	asrs	r1, r4, #16
 800f988:	e7e0      	b.n	800f94c <__mdiff+0xc8>
 800f98a:	3f01      	subs	r7, #1
 800f98c:	e7ea      	b.n	800f964 <__mdiff+0xe0>
 800f98e:	bf00      	nop
 800f990:	08010738 	.word	0x08010738
 800f994:	08010749 	.word	0x08010749

0800f998 <__d2b>:
 800f998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	460f      	mov	r7, r1
 800f99e:	2101      	movs	r1, #1
 800f9a0:	ec59 8b10 	vmov	r8, r9, d0
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	f7ff fcd5 	bl	800f354 <_Balloc>
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	b930      	cbnz	r0, 800f9bc <__d2b+0x24>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	4b24      	ldr	r3, [pc, #144]	; (800fa44 <__d2b+0xac>)
 800f9b2:	4825      	ldr	r0, [pc, #148]	; (800fa48 <__d2b+0xb0>)
 800f9b4:	f240 310f 	movw	r1, #783	; 0x30f
 800f9b8:	f000 fc40 	bl	801023c <__assert_func>
 800f9bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9c4:	bb2d      	cbnz	r5, 800fa12 <__d2b+0x7a>
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800f9cc:	d026      	beq.n	800fa1c <__d2b+0x84>
 800f9ce:	4668      	mov	r0, sp
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	f7ff fd87 	bl	800f4e4 <__lo0bits>
 800f9d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f9da:	b1e8      	cbz	r0, 800fa18 <__d2b+0x80>
 800f9dc:	f1c0 0320 	rsb	r3, r0, #32
 800f9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f9e4:	430b      	orrs	r3, r1
 800f9e6:	40c2      	lsrs	r2, r0
 800f9e8:	6163      	str	r3, [r4, #20]
 800f9ea:	9201      	str	r2, [sp, #4]
 800f9ec:	9b01      	ldr	r3, [sp, #4]
 800f9ee:	61a3      	str	r3, [r4, #24]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	bf14      	ite	ne
 800f9f4:	2202      	movne	r2, #2
 800f9f6:	2201      	moveq	r2, #1
 800f9f8:	6122      	str	r2, [r4, #16]
 800f9fa:	b1bd      	cbz	r5, 800fa2c <__d2b+0x94>
 800f9fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa00:	4405      	add	r5, r0
 800fa02:	603d      	str	r5, [r7, #0]
 800fa04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa08:	6030      	str	r0, [r6, #0]
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	b003      	add	sp, #12
 800fa0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa16:	e7d6      	b.n	800f9c6 <__d2b+0x2e>
 800fa18:	6161      	str	r1, [r4, #20]
 800fa1a:	e7e7      	b.n	800f9ec <__d2b+0x54>
 800fa1c:	a801      	add	r0, sp, #4
 800fa1e:	f7ff fd61 	bl	800f4e4 <__lo0bits>
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	6163      	str	r3, [r4, #20]
 800fa26:	3020      	adds	r0, #32
 800fa28:	2201      	movs	r2, #1
 800fa2a:	e7e5      	b.n	800f9f8 <__d2b+0x60>
 800fa2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa34:	6038      	str	r0, [r7, #0]
 800fa36:	6918      	ldr	r0, [r3, #16]
 800fa38:	f7ff fd34 	bl	800f4a4 <__hi0bits>
 800fa3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa40:	e7e2      	b.n	800fa08 <__d2b+0x70>
 800fa42:	bf00      	nop
 800fa44:	08010738 	.word	0x08010738
 800fa48:	08010749 	.word	0x08010749

0800fa4c <__ssputs_r>:
 800fa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa50:	688e      	ldr	r6, [r1, #8]
 800fa52:	461f      	mov	r7, r3
 800fa54:	42be      	cmp	r6, r7
 800fa56:	680b      	ldr	r3, [r1, #0]
 800fa58:	4682      	mov	sl, r0
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	4690      	mov	r8, r2
 800fa5e:	d82c      	bhi.n	800faba <__ssputs_r+0x6e>
 800fa60:	898a      	ldrh	r2, [r1, #12]
 800fa62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa66:	d026      	beq.n	800fab6 <__ssputs_r+0x6a>
 800fa68:	6965      	ldr	r5, [r4, #20]
 800fa6a:	6909      	ldr	r1, [r1, #16]
 800fa6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa70:	eba3 0901 	sub.w	r9, r3, r1
 800fa74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa78:	1c7b      	adds	r3, r7, #1
 800fa7a:	444b      	add	r3, r9
 800fa7c:	106d      	asrs	r5, r5, #1
 800fa7e:	429d      	cmp	r5, r3
 800fa80:	bf38      	it	cc
 800fa82:	461d      	movcc	r5, r3
 800fa84:	0553      	lsls	r3, r2, #21
 800fa86:	d527      	bpl.n	800fad8 <__ssputs_r+0x8c>
 800fa88:	4629      	mov	r1, r5
 800fa8a:	f7ff fbd7 	bl	800f23c <_malloc_r>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	b360      	cbz	r0, 800faec <__ssputs_r+0xa0>
 800fa92:	6921      	ldr	r1, [r4, #16]
 800fa94:	464a      	mov	r2, r9
 800fa96:	f7fe fcd2 	bl	800e43e <memcpy>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800faa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faa4:	81a3      	strh	r3, [r4, #12]
 800faa6:	6126      	str	r6, [r4, #16]
 800faa8:	6165      	str	r5, [r4, #20]
 800faaa:	444e      	add	r6, r9
 800faac:	eba5 0509 	sub.w	r5, r5, r9
 800fab0:	6026      	str	r6, [r4, #0]
 800fab2:	60a5      	str	r5, [r4, #8]
 800fab4:	463e      	mov	r6, r7
 800fab6:	42be      	cmp	r6, r7
 800fab8:	d900      	bls.n	800fabc <__ssputs_r+0x70>
 800faba:	463e      	mov	r6, r7
 800fabc:	6820      	ldr	r0, [r4, #0]
 800fabe:	4632      	mov	r2, r6
 800fac0:	4641      	mov	r1, r8
 800fac2:	f000 fb6f 	bl	80101a4 <memmove>
 800fac6:	68a3      	ldr	r3, [r4, #8]
 800fac8:	1b9b      	subs	r3, r3, r6
 800faca:	60a3      	str	r3, [r4, #8]
 800facc:	6823      	ldr	r3, [r4, #0]
 800face:	4433      	add	r3, r6
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	2000      	movs	r0, #0
 800fad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad8:	462a      	mov	r2, r5
 800fada:	f000 fbf5 	bl	80102c8 <_realloc_r>
 800fade:	4606      	mov	r6, r0
 800fae0:	2800      	cmp	r0, #0
 800fae2:	d1e0      	bne.n	800faa6 <__ssputs_r+0x5a>
 800fae4:	6921      	ldr	r1, [r4, #16]
 800fae6:	4650      	mov	r0, sl
 800fae8:	f7ff fb34 	bl	800f154 <_free_r>
 800faec:	230c      	movs	r3, #12
 800faee:	f8ca 3000 	str.w	r3, [sl]
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf8:	81a3      	strh	r3, [r4, #12]
 800fafa:	f04f 30ff 	mov.w	r0, #4294967295
 800fafe:	e7e9      	b.n	800fad4 <__ssputs_r+0x88>

0800fb00 <_svfiprintf_r>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	4698      	mov	r8, r3
 800fb06:	898b      	ldrh	r3, [r1, #12]
 800fb08:	061b      	lsls	r3, r3, #24
 800fb0a:	b09d      	sub	sp, #116	; 0x74
 800fb0c:	4607      	mov	r7, r0
 800fb0e:	460d      	mov	r5, r1
 800fb10:	4614      	mov	r4, r2
 800fb12:	d50e      	bpl.n	800fb32 <_svfiprintf_r+0x32>
 800fb14:	690b      	ldr	r3, [r1, #16]
 800fb16:	b963      	cbnz	r3, 800fb32 <_svfiprintf_r+0x32>
 800fb18:	2140      	movs	r1, #64	; 0x40
 800fb1a:	f7ff fb8f 	bl	800f23c <_malloc_r>
 800fb1e:	6028      	str	r0, [r5, #0]
 800fb20:	6128      	str	r0, [r5, #16]
 800fb22:	b920      	cbnz	r0, 800fb2e <_svfiprintf_r+0x2e>
 800fb24:	230c      	movs	r3, #12
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2c:	e0d0      	b.n	800fcd0 <_svfiprintf_r+0x1d0>
 800fb2e:	2340      	movs	r3, #64	; 0x40
 800fb30:	616b      	str	r3, [r5, #20]
 800fb32:	2300      	movs	r3, #0
 800fb34:	9309      	str	r3, [sp, #36]	; 0x24
 800fb36:	2320      	movs	r3, #32
 800fb38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb40:	2330      	movs	r3, #48	; 0x30
 800fb42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fce8 <_svfiprintf_r+0x1e8>
 800fb46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb4a:	f04f 0901 	mov.w	r9, #1
 800fb4e:	4623      	mov	r3, r4
 800fb50:	469a      	mov	sl, r3
 800fb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb56:	b10a      	cbz	r2, 800fb5c <_svfiprintf_r+0x5c>
 800fb58:	2a25      	cmp	r2, #37	; 0x25
 800fb5a:	d1f9      	bne.n	800fb50 <_svfiprintf_r+0x50>
 800fb5c:	ebba 0b04 	subs.w	fp, sl, r4
 800fb60:	d00b      	beq.n	800fb7a <_svfiprintf_r+0x7a>
 800fb62:	465b      	mov	r3, fp
 800fb64:	4622      	mov	r2, r4
 800fb66:	4629      	mov	r1, r5
 800fb68:	4638      	mov	r0, r7
 800fb6a:	f7ff ff6f 	bl	800fa4c <__ssputs_r>
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f000 80a9 	beq.w	800fcc6 <_svfiprintf_r+0x1c6>
 800fb74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb76:	445a      	add	r2, fp
 800fb78:	9209      	str	r2, [sp, #36]	; 0x24
 800fb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 80a1 	beq.w	800fcc6 <_svfiprintf_r+0x1c6>
 800fb84:	2300      	movs	r3, #0
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295
 800fb8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb8e:	f10a 0a01 	add.w	sl, sl, #1
 800fb92:	9304      	str	r3, [sp, #16]
 800fb94:	9307      	str	r3, [sp, #28]
 800fb96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb9a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb9c:	4654      	mov	r4, sl
 800fb9e:	2205      	movs	r2, #5
 800fba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fba4:	4850      	ldr	r0, [pc, #320]	; (800fce8 <_svfiprintf_r+0x1e8>)
 800fba6:	f7f0 fb13 	bl	80001d0 <memchr>
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	b9d8      	cbnz	r0, 800fbe6 <_svfiprintf_r+0xe6>
 800fbae:	06d0      	lsls	r0, r2, #27
 800fbb0:	bf44      	itt	mi
 800fbb2:	2320      	movmi	r3, #32
 800fbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbb8:	0711      	lsls	r1, r2, #28
 800fbba:	bf44      	itt	mi
 800fbbc:	232b      	movmi	r3, #43	; 0x2b
 800fbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800fbc8:	d015      	beq.n	800fbf6 <_svfiprintf_r+0xf6>
 800fbca:	9a07      	ldr	r2, [sp, #28]
 800fbcc:	4654      	mov	r4, sl
 800fbce:	2000      	movs	r0, #0
 800fbd0:	f04f 0c0a 	mov.w	ip, #10
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbda:	3b30      	subs	r3, #48	; 0x30
 800fbdc:	2b09      	cmp	r3, #9
 800fbde:	d94d      	bls.n	800fc7c <_svfiprintf_r+0x17c>
 800fbe0:	b1b0      	cbz	r0, 800fc10 <_svfiprintf_r+0x110>
 800fbe2:	9207      	str	r2, [sp, #28]
 800fbe4:	e014      	b.n	800fc10 <_svfiprintf_r+0x110>
 800fbe6:	eba0 0308 	sub.w	r3, r0, r8
 800fbea:	fa09 f303 	lsl.w	r3, r9, r3
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	9304      	str	r3, [sp, #16]
 800fbf2:	46a2      	mov	sl, r4
 800fbf4:	e7d2      	b.n	800fb9c <_svfiprintf_r+0x9c>
 800fbf6:	9b03      	ldr	r3, [sp, #12]
 800fbf8:	1d19      	adds	r1, r3, #4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	9103      	str	r1, [sp, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	bfbb      	ittet	lt
 800fc02:	425b      	neglt	r3, r3
 800fc04:	f042 0202 	orrlt.w	r2, r2, #2
 800fc08:	9307      	strge	r3, [sp, #28]
 800fc0a:	9307      	strlt	r3, [sp, #28]
 800fc0c:	bfb8      	it	lt
 800fc0e:	9204      	strlt	r2, [sp, #16]
 800fc10:	7823      	ldrb	r3, [r4, #0]
 800fc12:	2b2e      	cmp	r3, #46	; 0x2e
 800fc14:	d10c      	bne.n	800fc30 <_svfiprintf_r+0x130>
 800fc16:	7863      	ldrb	r3, [r4, #1]
 800fc18:	2b2a      	cmp	r3, #42	; 0x2a
 800fc1a:	d134      	bne.n	800fc86 <_svfiprintf_r+0x186>
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	1d1a      	adds	r2, r3, #4
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	9203      	str	r2, [sp, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bfb8      	it	lt
 800fc28:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc2c:	3402      	adds	r4, #2
 800fc2e:	9305      	str	r3, [sp, #20]
 800fc30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fcf8 <_svfiprintf_r+0x1f8>
 800fc34:	7821      	ldrb	r1, [r4, #0]
 800fc36:	2203      	movs	r2, #3
 800fc38:	4650      	mov	r0, sl
 800fc3a:	f7f0 fac9 	bl	80001d0 <memchr>
 800fc3e:	b138      	cbz	r0, 800fc50 <_svfiprintf_r+0x150>
 800fc40:	9b04      	ldr	r3, [sp, #16]
 800fc42:	eba0 000a 	sub.w	r0, r0, sl
 800fc46:	2240      	movs	r2, #64	; 0x40
 800fc48:	4082      	lsls	r2, r0
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	3401      	adds	r4, #1
 800fc4e:	9304      	str	r3, [sp, #16]
 800fc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc54:	4825      	ldr	r0, [pc, #148]	; (800fcec <_svfiprintf_r+0x1ec>)
 800fc56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc5a:	2206      	movs	r2, #6
 800fc5c:	f7f0 fab8 	bl	80001d0 <memchr>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d038      	beq.n	800fcd6 <_svfiprintf_r+0x1d6>
 800fc64:	4b22      	ldr	r3, [pc, #136]	; (800fcf0 <_svfiprintf_r+0x1f0>)
 800fc66:	bb1b      	cbnz	r3, 800fcb0 <_svfiprintf_r+0x1b0>
 800fc68:	9b03      	ldr	r3, [sp, #12]
 800fc6a:	3307      	adds	r3, #7
 800fc6c:	f023 0307 	bic.w	r3, r3, #7
 800fc70:	3308      	adds	r3, #8
 800fc72:	9303      	str	r3, [sp, #12]
 800fc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc76:	4433      	add	r3, r6
 800fc78:	9309      	str	r3, [sp, #36]	; 0x24
 800fc7a:	e768      	b.n	800fb4e <_svfiprintf_r+0x4e>
 800fc7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc80:	460c      	mov	r4, r1
 800fc82:	2001      	movs	r0, #1
 800fc84:	e7a6      	b.n	800fbd4 <_svfiprintf_r+0xd4>
 800fc86:	2300      	movs	r3, #0
 800fc88:	3401      	adds	r4, #1
 800fc8a:	9305      	str	r3, [sp, #20]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	f04f 0c0a 	mov.w	ip, #10
 800fc92:	4620      	mov	r0, r4
 800fc94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc98:	3a30      	subs	r2, #48	; 0x30
 800fc9a:	2a09      	cmp	r2, #9
 800fc9c:	d903      	bls.n	800fca6 <_svfiprintf_r+0x1a6>
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0c6      	beq.n	800fc30 <_svfiprintf_r+0x130>
 800fca2:	9105      	str	r1, [sp, #20]
 800fca4:	e7c4      	b.n	800fc30 <_svfiprintf_r+0x130>
 800fca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcaa:	4604      	mov	r4, r0
 800fcac:	2301      	movs	r3, #1
 800fcae:	e7f0      	b.n	800fc92 <_svfiprintf_r+0x192>
 800fcb0:	ab03      	add	r3, sp, #12
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	462a      	mov	r2, r5
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <_svfiprintf_r+0x1f4>)
 800fcb8:	a904      	add	r1, sp, #16
 800fcba:	4638      	mov	r0, r7
 800fcbc:	f7fd fd4a 	bl	800d754 <_printf_float>
 800fcc0:	1c42      	adds	r2, r0, #1
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	d1d6      	bne.n	800fc74 <_svfiprintf_r+0x174>
 800fcc6:	89ab      	ldrh	r3, [r5, #12]
 800fcc8:	065b      	lsls	r3, r3, #25
 800fcca:	f53f af2d 	bmi.w	800fb28 <_svfiprintf_r+0x28>
 800fcce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcd0:	b01d      	add	sp, #116	; 0x74
 800fcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd6:	ab03      	add	r3, sp, #12
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	462a      	mov	r2, r5
 800fcdc:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <_svfiprintf_r+0x1f4>)
 800fcde:	a904      	add	r1, sp, #16
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7fd ffdb 	bl	800dc9c <_printf_i>
 800fce6:	e7eb      	b.n	800fcc0 <_svfiprintf_r+0x1c0>
 800fce8:	080108a4 	.word	0x080108a4
 800fcec:	080108ae 	.word	0x080108ae
 800fcf0:	0800d755 	.word	0x0800d755
 800fcf4:	0800fa4d 	.word	0x0800fa4d
 800fcf8:	080108aa 	.word	0x080108aa

0800fcfc <__sfputc_r>:
 800fcfc:	6893      	ldr	r3, [r2, #8]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	b410      	push	{r4}
 800fd04:	6093      	str	r3, [r2, #8]
 800fd06:	da08      	bge.n	800fd1a <__sfputc_r+0x1e>
 800fd08:	6994      	ldr	r4, [r2, #24]
 800fd0a:	42a3      	cmp	r3, r4
 800fd0c:	db01      	blt.n	800fd12 <__sfputc_r+0x16>
 800fd0e:	290a      	cmp	r1, #10
 800fd10:	d103      	bne.n	800fd1a <__sfputc_r+0x1e>
 800fd12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd16:	f7fe ba76 	b.w	800e206 <__swbuf_r>
 800fd1a:	6813      	ldr	r3, [r2, #0]
 800fd1c:	1c58      	adds	r0, r3, #1
 800fd1e:	6010      	str	r0, [r2, #0]
 800fd20:	7019      	strb	r1, [r3, #0]
 800fd22:	4608      	mov	r0, r1
 800fd24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <__sfputs_r>:
 800fd2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	460f      	mov	r7, r1
 800fd30:	4614      	mov	r4, r2
 800fd32:	18d5      	adds	r5, r2, r3
 800fd34:	42ac      	cmp	r4, r5
 800fd36:	d101      	bne.n	800fd3c <__sfputs_r+0x12>
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e007      	b.n	800fd4c <__sfputs_r+0x22>
 800fd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd40:	463a      	mov	r2, r7
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7ff ffda 	bl	800fcfc <__sfputc_r>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d1f3      	bne.n	800fd34 <__sfputs_r+0xa>
 800fd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd50 <_vfiprintf_r>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	460d      	mov	r5, r1
 800fd56:	b09d      	sub	sp, #116	; 0x74
 800fd58:	4614      	mov	r4, r2
 800fd5a:	4698      	mov	r8, r3
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	b118      	cbz	r0, 800fd68 <_vfiprintf_r+0x18>
 800fd60:	6a03      	ldr	r3, [r0, #32]
 800fd62:	b90b      	cbnz	r3, 800fd68 <_vfiprintf_r+0x18>
 800fd64:	f7fe f948 	bl	800dff8 <__sinit>
 800fd68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd6a:	07d9      	lsls	r1, r3, #31
 800fd6c:	d405      	bmi.n	800fd7a <_vfiprintf_r+0x2a>
 800fd6e:	89ab      	ldrh	r3, [r5, #12]
 800fd70:	059a      	lsls	r2, r3, #22
 800fd72:	d402      	bmi.n	800fd7a <_vfiprintf_r+0x2a>
 800fd74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd76:	f7fe fb58 	bl	800e42a <__retarget_lock_acquire_recursive>
 800fd7a:	89ab      	ldrh	r3, [r5, #12]
 800fd7c:	071b      	lsls	r3, r3, #28
 800fd7e:	d501      	bpl.n	800fd84 <_vfiprintf_r+0x34>
 800fd80:	692b      	ldr	r3, [r5, #16]
 800fd82:	b99b      	cbnz	r3, 800fdac <_vfiprintf_r+0x5c>
 800fd84:	4629      	mov	r1, r5
 800fd86:	4630      	mov	r0, r6
 800fd88:	f7fe fa7a 	bl	800e280 <__swsetup_r>
 800fd8c:	b170      	cbz	r0, 800fdac <_vfiprintf_r+0x5c>
 800fd8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd90:	07dc      	lsls	r4, r3, #31
 800fd92:	d504      	bpl.n	800fd9e <_vfiprintf_r+0x4e>
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	b01d      	add	sp, #116	; 0x74
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	89ab      	ldrh	r3, [r5, #12]
 800fda0:	0598      	lsls	r0, r3, #22
 800fda2:	d4f7      	bmi.n	800fd94 <_vfiprintf_r+0x44>
 800fda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fda6:	f7fe fb41 	bl	800e42c <__retarget_lock_release_recursive>
 800fdaa:	e7f3      	b.n	800fd94 <_vfiprintf_r+0x44>
 800fdac:	2300      	movs	r3, #0
 800fdae:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb0:	2320      	movs	r3, #32
 800fdb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdba:	2330      	movs	r3, #48	; 0x30
 800fdbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ff70 <_vfiprintf_r+0x220>
 800fdc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdc4:	f04f 0901 	mov.w	r9, #1
 800fdc8:	4623      	mov	r3, r4
 800fdca:	469a      	mov	sl, r3
 800fdcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdd0:	b10a      	cbz	r2, 800fdd6 <_vfiprintf_r+0x86>
 800fdd2:	2a25      	cmp	r2, #37	; 0x25
 800fdd4:	d1f9      	bne.n	800fdca <_vfiprintf_r+0x7a>
 800fdd6:	ebba 0b04 	subs.w	fp, sl, r4
 800fdda:	d00b      	beq.n	800fdf4 <_vfiprintf_r+0xa4>
 800fddc:	465b      	mov	r3, fp
 800fdde:	4622      	mov	r2, r4
 800fde0:	4629      	mov	r1, r5
 800fde2:	4630      	mov	r0, r6
 800fde4:	f7ff ffa1 	bl	800fd2a <__sfputs_r>
 800fde8:	3001      	adds	r0, #1
 800fdea:	f000 80a9 	beq.w	800ff40 <_vfiprintf_r+0x1f0>
 800fdee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdf0:	445a      	add	r2, fp
 800fdf2:	9209      	str	r2, [sp, #36]	; 0x24
 800fdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f000 80a1 	beq.w	800ff40 <_vfiprintf_r+0x1f0>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f04f 32ff 	mov.w	r2, #4294967295
 800fe04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe08:	f10a 0a01 	add.w	sl, sl, #1
 800fe0c:	9304      	str	r3, [sp, #16]
 800fe0e:	9307      	str	r3, [sp, #28]
 800fe10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe14:	931a      	str	r3, [sp, #104]	; 0x68
 800fe16:	4654      	mov	r4, sl
 800fe18:	2205      	movs	r2, #5
 800fe1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe1e:	4854      	ldr	r0, [pc, #336]	; (800ff70 <_vfiprintf_r+0x220>)
 800fe20:	f7f0 f9d6 	bl	80001d0 <memchr>
 800fe24:	9a04      	ldr	r2, [sp, #16]
 800fe26:	b9d8      	cbnz	r0, 800fe60 <_vfiprintf_r+0x110>
 800fe28:	06d1      	lsls	r1, r2, #27
 800fe2a:	bf44      	itt	mi
 800fe2c:	2320      	movmi	r3, #32
 800fe2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe32:	0713      	lsls	r3, r2, #28
 800fe34:	bf44      	itt	mi
 800fe36:	232b      	movmi	r3, #43	; 0x2b
 800fe38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe40:	2b2a      	cmp	r3, #42	; 0x2a
 800fe42:	d015      	beq.n	800fe70 <_vfiprintf_r+0x120>
 800fe44:	9a07      	ldr	r2, [sp, #28]
 800fe46:	4654      	mov	r4, sl
 800fe48:	2000      	movs	r0, #0
 800fe4a:	f04f 0c0a 	mov.w	ip, #10
 800fe4e:	4621      	mov	r1, r4
 800fe50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe54:	3b30      	subs	r3, #48	; 0x30
 800fe56:	2b09      	cmp	r3, #9
 800fe58:	d94d      	bls.n	800fef6 <_vfiprintf_r+0x1a6>
 800fe5a:	b1b0      	cbz	r0, 800fe8a <_vfiprintf_r+0x13a>
 800fe5c:	9207      	str	r2, [sp, #28]
 800fe5e:	e014      	b.n	800fe8a <_vfiprintf_r+0x13a>
 800fe60:	eba0 0308 	sub.w	r3, r0, r8
 800fe64:	fa09 f303 	lsl.w	r3, r9, r3
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	46a2      	mov	sl, r4
 800fe6e:	e7d2      	b.n	800fe16 <_vfiprintf_r+0xc6>
 800fe70:	9b03      	ldr	r3, [sp, #12]
 800fe72:	1d19      	adds	r1, r3, #4
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	9103      	str	r1, [sp, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	bfbb      	ittet	lt
 800fe7c:	425b      	neglt	r3, r3
 800fe7e:	f042 0202 	orrlt.w	r2, r2, #2
 800fe82:	9307      	strge	r3, [sp, #28]
 800fe84:	9307      	strlt	r3, [sp, #28]
 800fe86:	bfb8      	it	lt
 800fe88:	9204      	strlt	r2, [sp, #16]
 800fe8a:	7823      	ldrb	r3, [r4, #0]
 800fe8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe8e:	d10c      	bne.n	800feaa <_vfiprintf_r+0x15a>
 800fe90:	7863      	ldrb	r3, [r4, #1]
 800fe92:	2b2a      	cmp	r3, #42	; 0x2a
 800fe94:	d134      	bne.n	800ff00 <_vfiprintf_r+0x1b0>
 800fe96:	9b03      	ldr	r3, [sp, #12]
 800fe98:	1d1a      	adds	r2, r3, #4
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	9203      	str	r2, [sp, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	bfb8      	it	lt
 800fea2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fea6:	3402      	adds	r4, #2
 800fea8:	9305      	str	r3, [sp, #20]
 800feaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ff80 <_vfiprintf_r+0x230>
 800feae:	7821      	ldrb	r1, [r4, #0]
 800feb0:	2203      	movs	r2, #3
 800feb2:	4650      	mov	r0, sl
 800feb4:	f7f0 f98c 	bl	80001d0 <memchr>
 800feb8:	b138      	cbz	r0, 800feca <_vfiprintf_r+0x17a>
 800feba:	9b04      	ldr	r3, [sp, #16]
 800febc:	eba0 000a 	sub.w	r0, r0, sl
 800fec0:	2240      	movs	r2, #64	; 0x40
 800fec2:	4082      	lsls	r2, r0
 800fec4:	4313      	orrs	r3, r2
 800fec6:	3401      	adds	r4, #1
 800fec8:	9304      	str	r3, [sp, #16]
 800feca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fece:	4829      	ldr	r0, [pc, #164]	; (800ff74 <_vfiprintf_r+0x224>)
 800fed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fed4:	2206      	movs	r2, #6
 800fed6:	f7f0 f97b 	bl	80001d0 <memchr>
 800feda:	2800      	cmp	r0, #0
 800fedc:	d03f      	beq.n	800ff5e <_vfiprintf_r+0x20e>
 800fede:	4b26      	ldr	r3, [pc, #152]	; (800ff78 <_vfiprintf_r+0x228>)
 800fee0:	bb1b      	cbnz	r3, 800ff2a <_vfiprintf_r+0x1da>
 800fee2:	9b03      	ldr	r3, [sp, #12]
 800fee4:	3307      	adds	r3, #7
 800fee6:	f023 0307 	bic.w	r3, r3, #7
 800feea:	3308      	adds	r3, #8
 800feec:	9303      	str	r3, [sp, #12]
 800feee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fef0:	443b      	add	r3, r7
 800fef2:	9309      	str	r3, [sp, #36]	; 0x24
 800fef4:	e768      	b.n	800fdc8 <_vfiprintf_r+0x78>
 800fef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fefa:	460c      	mov	r4, r1
 800fefc:	2001      	movs	r0, #1
 800fefe:	e7a6      	b.n	800fe4e <_vfiprintf_r+0xfe>
 800ff00:	2300      	movs	r3, #0
 800ff02:	3401      	adds	r4, #1
 800ff04:	9305      	str	r3, [sp, #20]
 800ff06:	4619      	mov	r1, r3
 800ff08:	f04f 0c0a 	mov.w	ip, #10
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff12:	3a30      	subs	r2, #48	; 0x30
 800ff14:	2a09      	cmp	r2, #9
 800ff16:	d903      	bls.n	800ff20 <_vfiprintf_r+0x1d0>
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d0c6      	beq.n	800feaa <_vfiprintf_r+0x15a>
 800ff1c:	9105      	str	r1, [sp, #20]
 800ff1e:	e7c4      	b.n	800feaa <_vfiprintf_r+0x15a>
 800ff20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff24:	4604      	mov	r4, r0
 800ff26:	2301      	movs	r3, #1
 800ff28:	e7f0      	b.n	800ff0c <_vfiprintf_r+0x1bc>
 800ff2a:	ab03      	add	r3, sp, #12
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	462a      	mov	r2, r5
 800ff30:	4b12      	ldr	r3, [pc, #72]	; (800ff7c <_vfiprintf_r+0x22c>)
 800ff32:	a904      	add	r1, sp, #16
 800ff34:	4630      	mov	r0, r6
 800ff36:	f7fd fc0d 	bl	800d754 <_printf_float>
 800ff3a:	4607      	mov	r7, r0
 800ff3c:	1c78      	adds	r0, r7, #1
 800ff3e:	d1d6      	bne.n	800feee <_vfiprintf_r+0x19e>
 800ff40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff42:	07d9      	lsls	r1, r3, #31
 800ff44:	d405      	bmi.n	800ff52 <_vfiprintf_r+0x202>
 800ff46:	89ab      	ldrh	r3, [r5, #12]
 800ff48:	059a      	lsls	r2, r3, #22
 800ff4a:	d402      	bmi.n	800ff52 <_vfiprintf_r+0x202>
 800ff4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff4e:	f7fe fa6d 	bl	800e42c <__retarget_lock_release_recursive>
 800ff52:	89ab      	ldrh	r3, [r5, #12]
 800ff54:	065b      	lsls	r3, r3, #25
 800ff56:	f53f af1d 	bmi.w	800fd94 <_vfiprintf_r+0x44>
 800ff5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff5c:	e71c      	b.n	800fd98 <_vfiprintf_r+0x48>
 800ff5e:	ab03      	add	r3, sp, #12
 800ff60:	9300      	str	r3, [sp, #0]
 800ff62:	462a      	mov	r2, r5
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <_vfiprintf_r+0x22c>)
 800ff66:	a904      	add	r1, sp, #16
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f7fd fe97 	bl	800dc9c <_printf_i>
 800ff6e:	e7e4      	b.n	800ff3a <_vfiprintf_r+0x1ea>
 800ff70:	080108a4 	.word	0x080108a4
 800ff74:	080108ae 	.word	0x080108ae
 800ff78:	0800d755 	.word	0x0800d755
 800ff7c:	0800fd2b 	.word	0x0800fd2b
 800ff80:	080108aa 	.word	0x080108aa

0800ff84 <__sflush_r>:
 800ff84:	898a      	ldrh	r2, [r1, #12]
 800ff86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	0710      	lsls	r0, r2, #28
 800ff8e:	460c      	mov	r4, r1
 800ff90:	d458      	bmi.n	8010044 <__sflush_r+0xc0>
 800ff92:	684b      	ldr	r3, [r1, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	dc05      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dc02      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d0f9      	beq.n	800ff9e <__sflush_r+0x1a>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffb0:	682f      	ldr	r7, [r5, #0]
 800ffb2:	6a21      	ldr	r1, [r4, #32]
 800ffb4:	602b      	str	r3, [r5, #0]
 800ffb6:	d032      	beq.n	801001e <__sflush_r+0x9a>
 800ffb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	075a      	lsls	r2, r3, #29
 800ffbe:	d505      	bpl.n	800ffcc <__sflush_r+0x48>
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	1ac0      	subs	r0, r0, r3
 800ffc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffc6:	b10b      	cbz	r3, 800ffcc <__sflush_r+0x48>
 800ffc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffca:	1ac0      	subs	r0, r0, r3
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4602      	mov	r2, r0
 800ffd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffd2:	6a21      	ldr	r1, [r4, #32]
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	47b0      	blx	r6
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	d106      	bne.n	800ffec <__sflush_r+0x68>
 800ffde:	6829      	ldr	r1, [r5, #0]
 800ffe0:	291d      	cmp	r1, #29
 800ffe2:	d82b      	bhi.n	801003c <__sflush_r+0xb8>
 800ffe4:	4a29      	ldr	r2, [pc, #164]	; (801008c <__sflush_r+0x108>)
 800ffe6:	410a      	asrs	r2, r1
 800ffe8:	07d6      	lsls	r6, r2, #31
 800ffea:	d427      	bmi.n	801003c <__sflush_r+0xb8>
 800ffec:	2200      	movs	r2, #0
 800ffee:	6062      	str	r2, [r4, #4]
 800fff0:	04d9      	lsls	r1, r3, #19
 800fff2:	6922      	ldr	r2, [r4, #16]
 800fff4:	6022      	str	r2, [r4, #0]
 800fff6:	d504      	bpl.n	8010002 <__sflush_r+0x7e>
 800fff8:	1c42      	adds	r2, r0, #1
 800fffa:	d101      	bne.n	8010000 <__sflush_r+0x7c>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	b903      	cbnz	r3, 8010002 <__sflush_r+0x7e>
 8010000:	6560      	str	r0, [r4, #84]	; 0x54
 8010002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010004:	602f      	str	r7, [r5, #0]
 8010006:	2900      	cmp	r1, #0
 8010008:	d0c9      	beq.n	800ff9e <__sflush_r+0x1a>
 801000a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801000e:	4299      	cmp	r1, r3
 8010010:	d002      	beq.n	8010018 <__sflush_r+0x94>
 8010012:	4628      	mov	r0, r5
 8010014:	f7ff f89e 	bl	800f154 <_free_r>
 8010018:	2000      	movs	r0, #0
 801001a:	6360      	str	r0, [r4, #52]	; 0x34
 801001c:	e7c0      	b.n	800ffa0 <__sflush_r+0x1c>
 801001e:	2301      	movs	r3, #1
 8010020:	4628      	mov	r0, r5
 8010022:	47b0      	blx	r6
 8010024:	1c41      	adds	r1, r0, #1
 8010026:	d1c8      	bne.n	800ffba <__sflush_r+0x36>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d0c5      	beq.n	800ffba <__sflush_r+0x36>
 801002e:	2b1d      	cmp	r3, #29
 8010030:	d001      	beq.n	8010036 <__sflush_r+0xb2>
 8010032:	2b16      	cmp	r3, #22
 8010034:	d101      	bne.n	801003a <__sflush_r+0xb6>
 8010036:	602f      	str	r7, [r5, #0]
 8010038:	e7b1      	b.n	800ff9e <__sflush_r+0x1a>
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	e7ad      	b.n	800ffa0 <__sflush_r+0x1c>
 8010044:	690f      	ldr	r7, [r1, #16]
 8010046:	2f00      	cmp	r7, #0
 8010048:	d0a9      	beq.n	800ff9e <__sflush_r+0x1a>
 801004a:	0793      	lsls	r3, r2, #30
 801004c:	680e      	ldr	r6, [r1, #0]
 801004e:	bf08      	it	eq
 8010050:	694b      	ldreq	r3, [r1, #20]
 8010052:	600f      	str	r7, [r1, #0]
 8010054:	bf18      	it	ne
 8010056:	2300      	movne	r3, #0
 8010058:	eba6 0807 	sub.w	r8, r6, r7
 801005c:	608b      	str	r3, [r1, #8]
 801005e:	f1b8 0f00 	cmp.w	r8, #0
 8010062:	dd9c      	ble.n	800ff9e <__sflush_r+0x1a>
 8010064:	6a21      	ldr	r1, [r4, #32]
 8010066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010068:	4643      	mov	r3, r8
 801006a:	463a      	mov	r2, r7
 801006c:	4628      	mov	r0, r5
 801006e:	47b0      	blx	r6
 8010070:	2800      	cmp	r0, #0
 8010072:	dc06      	bgt.n	8010082 <__sflush_r+0xfe>
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	f04f 30ff 	mov.w	r0, #4294967295
 8010080:	e78e      	b.n	800ffa0 <__sflush_r+0x1c>
 8010082:	4407      	add	r7, r0
 8010084:	eba8 0800 	sub.w	r8, r8, r0
 8010088:	e7e9      	b.n	801005e <__sflush_r+0xda>
 801008a:	bf00      	nop
 801008c:	dfbffffe 	.word	0xdfbffffe

08010090 <_fflush_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	690b      	ldr	r3, [r1, #16]
 8010094:	4605      	mov	r5, r0
 8010096:	460c      	mov	r4, r1
 8010098:	b913      	cbnz	r3, 80100a0 <_fflush_r+0x10>
 801009a:	2500      	movs	r5, #0
 801009c:	4628      	mov	r0, r5
 801009e:	bd38      	pop	{r3, r4, r5, pc}
 80100a0:	b118      	cbz	r0, 80100aa <_fflush_r+0x1a>
 80100a2:	6a03      	ldr	r3, [r0, #32]
 80100a4:	b90b      	cbnz	r3, 80100aa <_fflush_r+0x1a>
 80100a6:	f7fd ffa7 	bl	800dff8 <__sinit>
 80100aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d0f3      	beq.n	801009a <_fflush_r+0xa>
 80100b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100b4:	07d0      	lsls	r0, r2, #31
 80100b6:	d404      	bmi.n	80100c2 <_fflush_r+0x32>
 80100b8:	0599      	lsls	r1, r3, #22
 80100ba:	d402      	bmi.n	80100c2 <_fflush_r+0x32>
 80100bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100be:	f7fe f9b4 	bl	800e42a <__retarget_lock_acquire_recursive>
 80100c2:	4628      	mov	r0, r5
 80100c4:	4621      	mov	r1, r4
 80100c6:	f7ff ff5d 	bl	800ff84 <__sflush_r>
 80100ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100cc:	07da      	lsls	r2, r3, #31
 80100ce:	4605      	mov	r5, r0
 80100d0:	d4e4      	bmi.n	801009c <_fflush_r+0xc>
 80100d2:	89a3      	ldrh	r3, [r4, #12]
 80100d4:	059b      	lsls	r3, r3, #22
 80100d6:	d4e1      	bmi.n	801009c <_fflush_r+0xc>
 80100d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100da:	f7fe f9a7 	bl	800e42c <__retarget_lock_release_recursive>
 80100de:	e7dd      	b.n	801009c <_fflush_r+0xc>

080100e0 <__swhatbuf_r>:
 80100e0:	b570      	push	{r4, r5, r6, lr}
 80100e2:	460c      	mov	r4, r1
 80100e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e8:	2900      	cmp	r1, #0
 80100ea:	b096      	sub	sp, #88	; 0x58
 80100ec:	4615      	mov	r5, r2
 80100ee:	461e      	mov	r6, r3
 80100f0:	da0d      	bge.n	801010e <__swhatbuf_r+0x2e>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80100f8:	f04f 0100 	mov.w	r1, #0
 80100fc:	bf0c      	ite	eq
 80100fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010102:	2340      	movne	r3, #64	; 0x40
 8010104:	2000      	movs	r0, #0
 8010106:	6031      	str	r1, [r6, #0]
 8010108:	602b      	str	r3, [r5, #0]
 801010a:	b016      	add	sp, #88	; 0x58
 801010c:	bd70      	pop	{r4, r5, r6, pc}
 801010e:	466a      	mov	r2, sp
 8010110:	f000 f862 	bl	80101d8 <_fstat_r>
 8010114:	2800      	cmp	r0, #0
 8010116:	dbec      	blt.n	80100f2 <__swhatbuf_r+0x12>
 8010118:	9901      	ldr	r1, [sp, #4]
 801011a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801011e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010122:	4259      	negs	r1, r3
 8010124:	4159      	adcs	r1, r3
 8010126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801012a:	e7eb      	b.n	8010104 <__swhatbuf_r+0x24>

0801012c <__smakebuf_r>:
 801012c:	898b      	ldrh	r3, [r1, #12]
 801012e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010130:	079d      	lsls	r5, r3, #30
 8010132:	4606      	mov	r6, r0
 8010134:	460c      	mov	r4, r1
 8010136:	d507      	bpl.n	8010148 <__smakebuf_r+0x1c>
 8010138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	6123      	str	r3, [r4, #16]
 8010140:	2301      	movs	r3, #1
 8010142:	6163      	str	r3, [r4, #20]
 8010144:	b002      	add	sp, #8
 8010146:	bd70      	pop	{r4, r5, r6, pc}
 8010148:	ab01      	add	r3, sp, #4
 801014a:	466a      	mov	r2, sp
 801014c:	f7ff ffc8 	bl	80100e0 <__swhatbuf_r>
 8010150:	9900      	ldr	r1, [sp, #0]
 8010152:	4605      	mov	r5, r0
 8010154:	4630      	mov	r0, r6
 8010156:	f7ff f871 	bl	800f23c <_malloc_r>
 801015a:	b948      	cbnz	r0, 8010170 <__smakebuf_r+0x44>
 801015c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010160:	059a      	lsls	r2, r3, #22
 8010162:	d4ef      	bmi.n	8010144 <__smakebuf_r+0x18>
 8010164:	f023 0303 	bic.w	r3, r3, #3
 8010168:	f043 0302 	orr.w	r3, r3, #2
 801016c:	81a3      	strh	r3, [r4, #12]
 801016e:	e7e3      	b.n	8010138 <__smakebuf_r+0xc>
 8010170:	89a3      	ldrh	r3, [r4, #12]
 8010172:	6020      	str	r0, [r4, #0]
 8010174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010178:	81a3      	strh	r3, [r4, #12]
 801017a:	9b00      	ldr	r3, [sp, #0]
 801017c:	6163      	str	r3, [r4, #20]
 801017e:	9b01      	ldr	r3, [sp, #4]
 8010180:	6120      	str	r0, [r4, #16]
 8010182:	b15b      	cbz	r3, 801019c <__smakebuf_r+0x70>
 8010184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010188:	4630      	mov	r0, r6
 801018a:	f000 f837 	bl	80101fc <_isatty_r>
 801018e:	b128      	cbz	r0, 801019c <__smakebuf_r+0x70>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	f023 0303 	bic.w	r3, r3, #3
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	81a3      	strh	r3, [r4, #12]
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	431d      	orrs	r5, r3
 80101a0:	81a5      	strh	r5, [r4, #12]
 80101a2:	e7cf      	b.n	8010144 <__smakebuf_r+0x18>

080101a4 <memmove>:
 80101a4:	4288      	cmp	r0, r1
 80101a6:	b510      	push	{r4, lr}
 80101a8:	eb01 0402 	add.w	r4, r1, r2
 80101ac:	d902      	bls.n	80101b4 <memmove+0x10>
 80101ae:	4284      	cmp	r4, r0
 80101b0:	4623      	mov	r3, r4
 80101b2:	d807      	bhi.n	80101c4 <memmove+0x20>
 80101b4:	1e43      	subs	r3, r0, #1
 80101b6:	42a1      	cmp	r1, r4
 80101b8:	d008      	beq.n	80101cc <memmove+0x28>
 80101ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101c2:	e7f8      	b.n	80101b6 <memmove+0x12>
 80101c4:	4402      	add	r2, r0
 80101c6:	4601      	mov	r1, r0
 80101c8:	428a      	cmp	r2, r1
 80101ca:	d100      	bne.n	80101ce <memmove+0x2a>
 80101cc:	bd10      	pop	{r4, pc}
 80101ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101d6:	e7f7      	b.n	80101c8 <memmove+0x24>

080101d8 <_fstat_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d07      	ldr	r5, [pc, #28]	; (80101f8 <_fstat_r+0x20>)
 80101dc:	2300      	movs	r3, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	4611      	mov	r1, r2
 80101e4:	602b      	str	r3, [r5, #0]
 80101e6:	f7f2 ff68 	bl	80030ba <_fstat>
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	d102      	bne.n	80101f4 <_fstat_r+0x1c>
 80101ee:	682b      	ldr	r3, [r5, #0]
 80101f0:	b103      	cbz	r3, 80101f4 <_fstat_r+0x1c>
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
 80101f6:	bf00      	nop
 80101f8:	2000a8f4 	.word	0x2000a8f4

080101fc <_isatty_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4d06      	ldr	r5, [pc, #24]	; (8010218 <_isatty_r+0x1c>)
 8010200:	2300      	movs	r3, #0
 8010202:	4604      	mov	r4, r0
 8010204:	4608      	mov	r0, r1
 8010206:	602b      	str	r3, [r5, #0]
 8010208:	f7f2 ff67 	bl	80030da <_isatty>
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	d102      	bne.n	8010216 <_isatty_r+0x1a>
 8010210:	682b      	ldr	r3, [r5, #0]
 8010212:	b103      	cbz	r3, 8010216 <_isatty_r+0x1a>
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	bd38      	pop	{r3, r4, r5, pc}
 8010218:	2000a8f4 	.word	0x2000a8f4

0801021c <_sbrk_r>:
 801021c:	b538      	push	{r3, r4, r5, lr}
 801021e:	4d06      	ldr	r5, [pc, #24]	; (8010238 <_sbrk_r+0x1c>)
 8010220:	2300      	movs	r3, #0
 8010222:	4604      	mov	r4, r0
 8010224:	4608      	mov	r0, r1
 8010226:	602b      	str	r3, [r5, #0]
 8010228:	f7f2 ff70 	bl	800310c <_sbrk>
 801022c:	1c43      	adds	r3, r0, #1
 801022e:	d102      	bne.n	8010236 <_sbrk_r+0x1a>
 8010230:	682b      	ldr	r3, [r5, #0]
 8010232:	b103      	cbz	r3, 8010236 <_sbrk_r+0x1a>
 8010234:	6023      	str	r3, [r4, #0]
 8010236:	bd38      	pop	{r3, r4, r5, pc}
 8010238:	2000a8f4 	.word	0x2000a8f4

0801023c <__assert_func>:
 801023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801023e:	4614      	mov	r4, r2
 8010240:	461a      	mov	r2, r3
 8010242:	4b09      	ldr	r3, [pc, #36]	; (8010268 <__assert_func+0x2c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4605      	mov	r5, r0
 8010248:	68d8      	ldr	r0, [r3, #12]
 801024a:	b14c      	cbz	r4, 8010260 <__assert_func+0x24>
 801024c:	4b07      	ldr	r3, [pc, #28]	; (801026c <__assert_func+0x30>)
 801024e:	9100      	str	r1, [sp, #0]
 8010250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010254:	4906      	ldr	r1, [pc, #24]	; (8010270 <__assert_func+0x34>)
 8010256:	462b      	mov	r3, r5
 8010258:	f000 f872 	bl	8010340 <fiprintf>
 801025c:	f000 f882 	bl	8010364 <abort>
 8010260:	4b04      	ldr	r3, [pc, #16]	; (8010274 <__assert_func+0x38>)
 8010262:	461c      	mov	r4, r3
 8010264:	e7f3      	b.n	801024e <__assert_func+0x12>
 8010266:	bf00      	nop
 8010268:	200000c8 	.word	0x200000c8
 801026c:	080108bf 	.word	0x080108bf
 8010270:	080108cc 	.word	0x080108cc
 8010274:	080108fa 	.word	0x080108fa

08010278 <_calloc_r>:
 8010278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801027a:	fba1 2402 	umull	r2, r4, r1, r2
 801027e:	b94c      	cbnz	r4, 8010294 <_calloc_r+0x1c>
 8010280:	4611      	mov	r1, r2
 8010282:	9201      	str	r2, [sp, #4]
 8010284:	f7fe ffda 	bl	800f23c <_malloc_r>
 8010288:	9a01      	ldr	r2, [sp, #4]
 801028a:	4605      	mov	r5, r0
 801028c:	b930      	cbnz	r0, 801029c <_calloc_r+0x24>
 801028e:	4628      	mov	r0, r5
 8010290:	b003      	add	sp, #12
 8010292:	bd30      	pop	{r4, r5, pc}
 8010294:	220c      	movs	r2, #12
 8010296:	6002      	str	r2, [r0, #0]
 8010298:	2500      	movs	r5, #0
 801029a:	e7f8      	b.n	801028e <_calloc_r+0x16>
 801029c:	4621      	mov	r1, r4
 801029e:	f7fe f847 	bl	800e330 <memset>
 80102a2:	e7f4      	b.n	801028e <_calloc_r+0x16>

080102a4 <__ascii_mbtowc>:
 80102a4:	b082      	sub	sp, #8
 80102a6:	b901      	cbnz	r1, 80102aa <__ascii_mbtowc+0x6>
 80102a8:	a901      	add	r1, sp, #4
 80102aa:	b142      	cbz	r2, 80102be <__ascii_mbtowc+0x1a>
 80102ac:	b14b      	cbz	r3, 80102c2 <__ascii_mbtowc+0x1e>
 80102ae:	7813      	ldrb	r3, [r2, #0]
 80102b0:	600b      	str	r3, [r1, #0]
 80102b2:	7812      	ldrb	r2, [r2, #0]
 80102b4:	1e10      	subs	r0, r2, #0
 80102b6:	bf18      	it	ne
 80102b8:	2001      	movne	r0, #1
 80102ba:	b002      	add	sp, #8
 80102bc:	4770      	bx	lr
 80102be:	4610      	mov	r0, r2
 80102c0:	e7fb      	b.n	80102ba <__ascii_mbtowc+0x16>
 80102c2:	f06f 0001 	mvn.w	r0, #1
 80102c6:	e7f8      	b.n	80102ba <__ascii_mbtowc+0x16>

080102c8 <_realloc_r>:
 80102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102cc:	4680      	mov	r8, r0
 80102ce:	4614      	mov	r4, r2
 80102d0:	460e      	mov	r6, r1
 80102d2:	b921      	cbnz	r1, 80102de <_realloc_r+0x16>
 80102d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	4611      	mov	r1, r2
 80102da:	f7fe bfaf 	b.w	800f23c <_malloc_r>
 80102de:	b92a      	cbnz	r2, 80102ec <_realloc_r+0x24>
 80102e0:	f7fe ff38 	bl	800f154 <_free_r>
 80102e4:	4625      	mov	r5, r4
 80102e6:	4628      	mov	r0, r5
 80102e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ec:	f000 f841 	bl	8010372 <_malloc_usable_size_r>
 80102f0:	4284      	cmp	r4, r0
 80102f2:	4607      	mov	r7, r0
 80102f4:	d802      	bhi.n	80102fc <_realloc_r+0x34>
 80102f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102fa:	d812      	bhi.n	8010322 <_realloc_r+0x5a>
 80102fc:	4621      	mov	r1, r4
 80102fe:	4640      	mov	r0, r8
 8010300:	f7fe ff9c 	bl	800f23c <_malloc_r>
 8010304:	4605      	mov	r5, r0
 8010306:	2800      	cmp	r0, #0
 8010308:	d0ed      	beq.n	80102e6 <_realloc_r+0x1e>
 801030a:	42bc      	cmp	r4, r7
 801030c:	4622      	mov	r2, r4
 801030e:	4631      	mov	r1, r6
 8010310:	bf28      	it	cs
 8010312:	463a      	movcs	r2, r7
 8010314:	f7fe f893 	bl	800e43e <memcpy>
 8010318:	4631      	mov	r1, r6
 801031a:	4640      	mov	r0, r8
 801031c:	f7fe ff1a 	bl	800f154 <_free_r>
 8010320:	e7e1      	b.n	80102e6 <_realloc_r+0x1e>
 8010322:	4635      	mov	r5, r6
 8010324:	e7df      	b.n	80102e6 <_realloc_r+0x1e>

08010326 <__ascii_wctomb>:
 8010326:	b149      	cbz	r1, 801033c <__ascii_wctomb+0x16>
 8010328:	2aff      	cmp	r2, #255	; 0xff
 801032a:	bf85      	ittet	hi
 801032c:	238a      	movhi	r3, #138	; 0x8a
 801032e:	6003      	strhi	r3, [r0, #0]
 8010330:	700a      	strbls	r2, [r1, #0]
 8010332:	f04f 30ff 	movhi.w	r0, #4294967295
 8010336:	bf98      	it	ls
 8010338:	2001      	movls	r0, #1
 801033a:	4770      	bx	lr
 801033c:	4608      	mov	r0, r1
 801033e:	4770      	bx	lr

08010340 <fiprintf>:
 8010340:	b40e      	push	{r1, r2, r3}
 8010342:	b503      	push	{r0, r1, lr}
 8010344:	4601      	mov	r1, r0
 8010346:	ab03      	add	r3, sp, #12
 8010348:	4805      	ldr	r0, [pc, #20]	; (8010360 <fiprintf+0x20>)
 801034a:	f853 2b04 	ldr.w	r2, [r3], #4
 801034e:	6800      	ldr	r0, [r0, #0]
 8010350:	9301      	str	r3, [sp, #4]
 8010352:	f7ff fcfd 	bl	800fd50 <_vfiprintf_r>
 8010356:	b002      	add	sp, #8
 8010358:	f85d eb04 	ldr.w	lr, [sp], #4
 801035c:	b003      	add	sp, #12
 801035e:	4770      	bx	lr
 8010360:	200000c8 	.word	0x200000c8

08010364 <abort>:
 8010364:	b508      	push	{r3, lr}
 8010366:	2006      	movs	r0, #6
 8010368:	f000 f834 	bl	80103d4 <raise>
 801036c:	2001      	movs	r0, #1
 801036e:	f7f2 fe55 	bl	800301c <_exit>

08010372 <_malloc_usable_size_r>:
 8010372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010376:	1f18      	subs	r0, r3, #4
 8010378:	2b00      	cmp	r3, #0
 801037a:	bfbc      	itt	lt
 801037c:	580b      	ldrlt	r3, [r1, r0]
 801037e:	18c0      	addlt	r0, r0, r3
 8010380:	4770      	bx	lr

08010382 <_raise_r>:
 8010382:	291f      	cmp	r1, #31
 8010384:	b538      	push	{r3, r4, r5, lr}
 8010386:	4604      	mov	r4, r0
 8010388:	460d      	mov	r5, r1
 801038a:	d904      	bls.n	8010396 <_raise_r+0x14>
 801038c:	2316      	movs	r3, #22
 801038e:	6003      	str	r3, [r0, #0]
 8010390:	f04f 30ff 	mov.w	r0, #4294967295
 8010394:	bd38      	pop	{r3, r4, r5, pc}
 8010396:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010398:	b112      	cbz	r2, 80103a0 <_raise_r+0x1e>
 801039a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801039e:	b94b      	cbnz	r3, 80103b4 <_raise_r+0x32>
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 f831 	bl	8010408 <_getpid_r>
 80103a6:	462a      	mov	r2, r5
 80103a8:	4601      	mov	r1, r0
 80103aa:	4620      	mov	r0, r4
 80103ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103b0:	f000 b818 	b.w	80103e4 <_kill_r>
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d00a      	beq.n	80103ce <_raise_r+0x4c>
 80103b8:	1c59      	adds	r1, r3, #1
 80103ba:	d103      	bne.n	80103c4 <_raise_r+0x42>
 80103bc:	2316      	movs	r3, #22
 80103be:	6003      	str	r3, [r0, #0]
 80103c0:	2001      	movs	r0, #1
 80103c2:	e7e7      	b.n	8010394 <_raise_r+0x12>
 80103c4:	2400      	movs	r4, #0
 80103c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103ca:	4628      	mov	r0, r5
 80103cc:	4798      	blx	r3
 80103ce:	2000      	movs	r0, #0
 80103d0:	e7e0      	b.n	8010394 <_raise_r+0x12>
	...

080103d4 <raise>:
 80103d4:	4b02      	ldr	r3, [pc, #8]	; (80103e0 <raise+0xc>)
 80103d6:	4601      	mov	r1, r0
 80103d8:	6818      	ldr	r0, [r3, #0]
 80103da:	f7ff bfd2 	b.w	8010382 <_raise_r>
 80103de:	bf00      	nop
 80103e0:	200000c8 	.word	0x200000c8

080103e4 <_kill_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	4d07      	ldr	r5, [pc, #28]	; (8010404 <_kill_r+0x20>)
 80103e8:	2300      	movs	r3, #0
 80103ea:	4604      	mov	r4, r0
 80103ec:	4608      	mov	r0, r1
 80103ee:	4611      	mov	r1, r2
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f7f2 fe03 	bl	8002ffc <_kill>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d102      	bne.n	8010400 <_kill_r+0x1c>
 80103fa:	682b      	ldr	r3, [r5, #0]
 80103fc:	b103      	cbz	r3, 8010400 <_kill_r+0x1c>
 80103fe:	6023      	str	r3, [r4, #0]
 8010400:	bd38      	pop	{r3, r4, r5, pc}
 8010402:	bf00      	nop
 8010404:	2000a8f4 	.word	0x2000a8f4

08010408 <_getpid_r>:
 8010408:	f7f2 bdf0 	b.w	8002fec <_getpid>

0801040c <_init>:
 801040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040e:	bf00      	nop
 8010410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010412:	bc08      	pop	{r3}
 8010414:	469e      	mov	lr, r3
 8010416:	4770      	bx	lr

08010418 <_fini>:
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	bf00      	nop
 801041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041e:	bc08      	pop	{r3}
 8010420:	469e      	mov	lr, r3
 8010422:	4770      	bx	lr
